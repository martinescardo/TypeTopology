Andrew Sneap - 11th November 2021

\begin{code}

{-# OPTIONS --without-K --exact-split --safe #-}

open import SpartanMLTT renaming (_+_ to _‚àî_) --TypeTopology

open import UF-Base hiding (_‚âà_) --TypeTopology
open import UF-FunExt --TypeTopology
open import NaturalNumbers-Properties -- TypeTopology

open import IntegersAbs
open import IntegersB
open import IntegersMultiplication renaming (_*_ to _‚Ñ§*_)
open import NaturalsMultiplication renaming (_*_ to _‚Ñï*_)
open import ncRationals
open import ncRationalsOperations renaming (_*_ to _‚Ñö‚Çô*_ ; _+_ to _‚Ñö‚Çô+_)
open import Rationals
open import RationalsAddition

_*_ : ‚Ñö ‚Üí ‚Ñö ‚Üí ‚Ñö
(p , _) * (q , _) = to‚Ñö (p ‚Ñö‚Çô* q)

infixl 33 _*_

to‚Ñö-* : Fun-Ext ‚Üí (p q : ‚Ñö‚Çô) ‚Üí to‚Ñö (p ‚Ñö‚Çô* q) ‚â° to‚Ñö p * to‚Ñö q
to‚Ñö-* fe p q = equiv‚Üíequality fe (p ‚Ñö‚Çô* q) (p' ‚Ñö‚Çô* q') conclusion
 where
  p' = to‚Ñö‚Çô (to‚Ñö p)
  q' = to‚Ñö‚Çô (to‚Ñö q)

  I : p ‚âà p'
  I = ‚âà-to‚Ñö p

  II : q ‚âà q'
  II = ‚âà-to‚Ñö q

  III : (p ‚Ñö‚Çô* q) ‚âà (p' ‚Ñö‚Çô* q)
  III = ‚âà-over-* p p' q I

  IV : (q ‚Ñö‚Çô* p') ‚âà (q' ‚Ñö‚Çô* p')
  IV = ‚âà-over-* q q' p' II

  V : (p' ‚Ñö‚Çô* q) ‚âà (p' ‚Ñö‚Çô* q')
  V = transport‚ÇÇ _‚âà_ (‚Ñö‚Çô*-comm q p') (‚Ñö‚Çô*-comm q' p') IV
  
  conclusion : (p ‚Ñö‚Çô* q) ‚âà (p' ‚Ñö‚Çô* q')
  conclusion = ‚âà-trans (p ‚Ñö‚Çô* q) (p' ‚Ñö‚Çô* q) (p' ‚Ñö‚Çô* q') III V

‚Ñö*-comm : (p q : ‚Ñö) ‚Üí p * q ‚â° q * p
‚Ñö*-comm (p , _) (q , _) = ap to‚Ñö (‚Ñö‚Çô*-comm p q)

‚Ñö*-assoc : Fun-Ext ‚Üí (p q r : ‚Ñö) ‚Üí (p * q) * r ‚â° p * (q * r)
‚Ñö*-assoc fe (x , p) (y , q) (z , r) = III
 where
  left : ‚Ñö
  left = (x , p) * (y , q)

  right : ‚Ñö
  right = (y , q) * (z , r)

  I : Œ£ l Íûâ ‚Ñö‚Çô , (z , r ‚â° to‚Ñö l)
  I = q-has-qn fe (z , r)

  II : Œ£ t Íûâ ‚Ñö‚Çô , (x , p ‚â° to‚Ñö t)
  II = q-has-qn fe (x , p)

  l t : ‚Ñö‚Çô
  l = pr‚ÇÅ I
  t = pr‚ÇÅ II

  III : to‚Ñö (x ‚Ñö‚Çô* y) * (z , r) ‚â° ((x , p) * to‚Ñö (y ‚Ñö‚Çô* z))
  III = (left * (z , r))      ‚â°‚ü® ap (left *_) (pr‚ÇÇ I) ‚ü©
        left * to‚Ñö z          ‚â°‚ü® to‚Ñö-* fe (x ‚Ñö‚Çô* y) z ‚Åª¬π ‚ü©
        to‚Ñö ((x ‚Ñö‚Çô* y) ‚Ñö‚Çô* z) ‚â°‚ü® ap to‚Ñö (‚Ñö‚Çô*-assoc x y z) ‚ü©
        to‚Ñö (x ‚Ñö‚Çô* (y ‚Ñö‚Çô* z)) ‚â°‚ü® to‚Ñö-* fe x (y ‚Ñö‚Çô* z) ‚ü©
        (to‚Ñö x * right)       ‚â°‚ü® ap (_* right) (pr‚ÇÇ II ‚Åª¬π) ‚ü©
        ((x , p) * right) ‚àé

‚Ñö-zero-left-is-zero : Fun-Ext ‚Üí (q : ‚Ñö) ‚Üí 0‚Ñö * q ‚â° 0‚Ñö
‚Ñö-zero-left-is-zero fe ((x , a) , q) = III
 where
  qn : Œ£ (x' , a') Íûâ ‚Ñö‚Çô , ((x , a) , q ‚â° to‚Ñö (x' , a'))
  qn = q-has-qn fe ((x , a) , q)
  x' = pr‚ÇÅ (pr‚ÇÅ qn)
  a' = pr‚ÇÇ (pr‚ÇÅ qn)

  II : to‚Ñö ((pos 0 , 0) ‚Ñö‚Çô* (x' , a'))  ‚â° to‚Ñö (pos 0 , 0)
  II = equiv‚Üíequality fe ((pos 0 , 0) ‚Ñö‚Çô* (x' , a')) (pos 0 , 0) (‚Ñö‚Çô-zero-left-neutral (x' , a'))
  
  III : 0‚Ñö * ((x , a) , q) ‚â° 0‚Ñö
  III = 0‚Ñö * ((x , a) , q)             ‚â°‚ü® ap (0‚Ñö *_) (pr‚ÇÇ qn) ‚ü©
       0‚Ñö * to‚Ñö (x' , a')              ‚â°‚ü® to‚Ñö-* fe (pos 0 , 0) (x' , a') ‚Åª¬π ‚ü©
       to‚Ñö ((pos 0 , 0) ‚Ñö‚Çô* (x' , a')) ‚â°‚ü® II ‚ü©
       0‚Ñö ‚àé

‚Ñö-zero-right-is-zero : Fun-Ext ‚Üí (q : ‚Ñö) ‚Üí q * 0‚Ñö ‚â° 0‚Ñö
‚Ñö-zero-right-is-zero fe q = ‚Ñö*-comm q 0‚Ñö ‚àô ‚Ñö-zero-left-is-zero fe q

‚Ñö-mult-left-id : Fun-Ext ‚Üí (q : ‚Ñö) ‚Üí 1‚Ñö * q ‚â° q
‚Ñö-mult-left-id fe q = II
 where
  I : Œ£ q' Íûâ ‚Ñö‚Çô , q ‚â° to‚Ñö q'
  I = q-has-qn fe q 
  
  q' : ‚Ñö‚Çô
  q' = pr‚ÇÅ I

  II : (1‚Ñö * q) ‚â° q
  II = (1‚Ñö * q)                    ‚â°‚ü® refl ‚ü©
        to‚Ñö ((pos 1 , 0) ‚Ñö‚Çô* q')   ‚â°‚ü® ap to‚Ñö (‚Ñö‚Çô-mult-left-id q') ‚ü©
        to‚Ñö q'                     ‚â°‚ü® pr‚ÇÇ I ‚Åª¬π ‚ü©
        q ‚àé

‚Ñö-mult-right-id : Fun-Ext ‚Üí (q : ‚Ñö) ‚Üí q * 1‚Ñö ‚â° q
‚Ñö-mult-right-id fe q = ‚Ñö*-comm q 1‚Ñö ‚àô ‚Ñö-mult-left-id fe q 

‚Ñö-distributivity : Fun-Ext ‚Üí (p q r : ‚Ñö) ‚Üí p * (q + r) ‚â° (p * q) + (p * r) 
‚Ñö-distributivity fe p q r = II
 where
  pnc : Œ£ p' Íûâ ‚Ñö‚Çô , p ‚â° to‚Ñö p'
  pnc = q-has-qn fe p

  qnc : Œ£ q' Íûâ ‚Ñö‚Çô , q ‚â° to‚Ñö q'
  qnc = q-has-qn fe q

  rnc : Œ£ r' Íûâ ‚Ñö‚Çô , r ‚â° to‚Ñö r'
  rnc = q-has-qn fe r

  p' q' r' : ‚Ñö‚Çô
  p' = pr‚ÇÅ pnc
  q' = pr‚ÇÅ qnc
  r' = pr‚ÇÅ rnc

  I : (p' ‚Ñö‚Çô* (q' ‚Ñö‚Çô+ r')) ‚âà ((p' ‚Ñö‚Çô* q') ‚Ñö‚Çô+ (p' ‚Ñö‚Çô* r')) ‚Üí to‚Ñö (p' ‚Ñö‚Çô* (q' ‚Ñö‚Çô+ r')) ‚â° to‚Ñö ((p' ‚Ñö‚Çô* q') ‚Ñö‚Çô+ (p' ‚Ñö‚Çô* r')) 
  I = equiv‚Üíequality fe (p' ‚Ñö‚Çô* (q' ‚Ñö‚Çô+ r')) ((p' ‚Ñö‚Çô* q') ‚Ñö‚Çô+ (p' ‚Ñö‚Çô* r'))

  II : p * (q + r) ‚â° (p * q) + (p * r)
  II = p * (q + r)                             ‚â°‚ü® refl ‚ü©
       p * to‚Ñö (q' ‚Ñö‚Çô+ r')                     ‚â°‚ü® ap (Œª - ‚Üí - * to‚Ñö (q' ‚Ñö‚Çô+ r')) (pr‚ÇÇ pnc) ‚ü©
       to‚Ñö p' * to‚Ñö (q' ‚Ñö‚Çô+ r')                ‚â°‚ü® to‚Ñö-* fe p' (q' ‚Ñö‚Çô+ r') ‚Åª¬π ‚ü©
       to‚Ñö (p' ‚Ñö‚Çô* (q' ‚Ñö‚Çô+ r'))                ‚â°‚ü® I (‚Ñö‚Çô-dist p' q' r') ‚ü©
       to‚Ñö ((p' ‚Ñö‚Çô* q') ‚Ñö‚Çô+ (p' ‚Ñö‚Çô* r'))       ‚â°‚ü® to‚Ñö-+ fe (p' ‚Ñö‚Çô* q') (p' ‚Ñö‚Çô* r') ‚ü©
       to‚Ñö (p' ‚Ñö‚Çô* q') + to‚Ñö (p' ‚Ñö‚Çô* r')       ‚â°‚ü® refl ‚ü©
       (p * q) + (p * r)  ‚àé

‚Ñö-distributivity' : Fun-Ext ‚Üí (p q r : ‚Ñö) ‚Üí (q + r) * p ‚â° (q * p) + (r * p) 
‚Ñö-distributivity' fe p q r = II
 where
  I : p * (q + r) ‚â° p * q + p * r
  I = ‚Ñö-distributivity fe p q r

  II : (q + r) * p ‚â° q * p + r * p
  II = (q + r) * p ‚â°‚ü® ‚Ñö*-comm (q + r) p ‚ü©
       p * (q + r) ‚â°‚ü® I ‚ü©
       p * q + p * r ‚â°‚ü® ap‚ÇÇ _+_ (‚Ñö*-comm p q) (‚Ñö*-comm p r) ‚ü©
       q * p + r * p ‚àé

multiplicative-inverse : Fun-Ext ‚Üí (q : ‚Ñö) ‚Üí ¬¨ (q ‚â° 0‚Ñö) ‚Üí ‚Ñö 
multiplicative-inverse fe ((pos 0        , a) , p) nz = ùüò-elim (nz (numerator-zero-is-zero fe (((pos 0 , a) , p)) refl))
multiplicative-inverse fe ((pos (succ x) , a) , p) nz = to‚Ñö ((pos (succ a)) , x)
multiplicative-inverse fe ((negsucc x    , a) , p) nz = to‚Ñö ((negsucc  a) , x)

division-by-self-is-one : Fun-Ext ‚Üí ((x , a) : ‚Ñö‚Çô) ‚Üí x ‚â° pos (succ a) ‚Üí to‚Ñö (x , a) ‚â° 1‚Ñö
division-by-self-is-one fe (negsucc x    , a) e = ùüò-elim (neg-not-positive e)
division-by-self-is-one fe (pos 0        , a) e = ùüò-elim (zero-not-positive a (pos-lc e))
division-by-self-is-one fe (pos (succ x) , a) e = I II
 where
  I : (pos (succ x) , a) ‚âà (pos 1 , 0) ‚Üí to‚Ñö (pos (succ x) , a) ‚â° to‚Ñö (pos 1 , 0)
  I = lr-implication (equiv-equality fe (pos (succ x) , a) (pos (succ 0) , 0))

  II : (pos (succ x) , a) ‚âà (pos 1 , 0)
  II = pos (succ x) ‚â°‚ü® e ‚ü©
       pos (succ a) ‚â°‚ü® ‚Ñ§-mult-left-id (pos (succ a)) ‚Åª¬π ‚ü©
       pos 1 ‚Ñ§* pos (succ a) ‚àé

‚Ñö*-inverse-product-is-one : (fe : Fun-Ext) ‚Üí (q : ‚Ñö) ‚Üí (nz : ¬¨ (q ‚â° 0‚Ñö)) ‚Üí q * multiplicative-inverse fe q nz ‚â° 1‚Ñö
‚Ñö*-inverse-product-is-one fe ((pos zero     , a) , p) nz = ùüò-elim (nz (numerator-zero-is-zero fe ((pos zero , a) , p) refl))
‚Ñö*-inverse-product-is-one fe ((pos (succ x) , a) , p) nz = Œ≥
 where
  œà : pos (succ x) ‚Ñ§* pos (succ a) ‚â° pos (succ (pred (succ a ‚Ñï* succ x)))
  œà = pos (succ x) ‚Ñ§* pos (succ a) ‚â°‚ü® ‚Ñ§*-comm (pos (succ x)) (pos (succ a)) ‚ü©
      pos (succ a) ‚Ñ§* pos (succ x) ‚â°‚ü® denom-setup a x ‚Åª¬π ‚ü©
      pos (succ (pred (succ a ‚Ñï* succ x))) ‚àé

  Œ≥ : ((pos (succ x) , a) , p) * to‚Ñö ((pos (succ a)) , x) ‚â° 1‚Ñö
  Œ≥ = ((pos (succ x) , a) , p) * to‚Ñö ((pos (succ a)) , x)    ‚â°‚ü® ap (_* to‚Ñö (pos (succ a) , x)) (to‚Ñö-to‚Ñö‚Çô fe (((pos (succ x) , a) , p))) ‚ü©
      to‚Ñö (pos (succ x) , a) * to‚Ñö (pos (succ a) , x)        ‚â°‚ü® to‚Ñö-* fe (pos (succ x) , a) (pos (succ a) , x) ‚Åª¬π ‚ü©
      to‚Ñö ((pos (succ x) , a) ‚Ñö‚Çô* (pos (succ a) , x))        ‚â°‚ü® refl ‚ü©
      to‚Ñö ((pos (succ x) ‚Ñ§* pos (succ a)) , (pred (succ a ‚Ñï* succ x))) ‚â°‚ü® division-by-self-is-one fe ((pos (succ x) ‚Ñ§* pos (succ a)) , (pred (succ a ‚Ñï* succ x))) œà ‚ü©
      to‚Ñö (pos 1 , 0)                                        ‚â°‚ü® refl ‚ü©
      1‚Ñö                                                     ‚àé
‚Ñö*-inverse-product-is-one fe ((negsucc x    , a) , p) nz = Œ≥
 where
  œà : negsucc x ‚Ñ§* negsucc a ‚â° pos (succ (pred (succ a ‚Ñï* succ x)))
  œà = negsucc x ‚Ñ§* negsucc a       ‚â°‚ü® minus-times-minus-is-positive (pos (succ x)) (pos (succ a)) ‚ü©
      pos (succ x) ‚Ñ§* pos (succ a) ‚â°‚ü® ‚Ñ§*-comm (pos (succ x)) (pos (succ a)) ‚ü©
      pos (succ a) ‚Ñ§* pos (succ x) ‚â°‚ü® denom-setup a x ‚Åª¬π ‚ü©
      pos (succ (pred (succ a ‚Ñï* succ x))) ‚àé
 
  Œ≥ : (((negsucc x , a) , p) * to‚Ñö ((negsucc  a) , x)) ‚â° 1‚Ñö
  Œ≥ = ((negsucc x , a) , p) * to‚Ñö (negsucc a , x) ‚â°‚ü® ap (_* to‚Ñö (negsucc a , x)) (to‚Ñö-to‚Ñö‚Çô fe ((negsucc x , a) , p)) ‚ü©
      (to‚Ñö (negsucc x , a) * to‚Ñö (negsucc a , x)) ‚â°‚ü® to‚Ñö-* fe (negsucc x , a) (negsucc a , x) ‚Åª¬π ‚ü©
      to‚Ñö ((negsucc x , a) ‚Ñö‚Çô* (negsucc a , x))   ‚â°‚ü® division-by-self-is-one fe (negsucc x ‚Ñ§* negsucc a , pred (succ a ‚Ñï* succ x)) œà ‚ü©
      1‚Ñö ‚àé

‚Ñö*-inverse : Fun-Ext ‚Üí (q : ‚Ñö) ‚Üí ¬¨ (q ‚â° 0‚Ñö) ‚Üí Œ£ q' Íûâ ‚Ñö , q * q' ‚â° 1‚Ñö
‚Ñö*-inverse fe q nz = (multiplicative-inverse fe q nz) , ‚Ñö*-inverse-product-is-one fe q nz

‚ü®2/3‚ü©^_ : ‚Ñï ‚Üí ‚Ñö
‚ü®2/3‚ü©^ 0         = to‚Ñö (pos 1 , 0)
‚ü®2/3‚ü©^ (succ n)  = rec 2/3 (_* 2/3) n

‚ü®2/3‚ü©-to-mult : Fun-Ext ‚Üí (n : ‚Ñï) ‚Üí ‚ü®2/3‚ü©^ (succ n) ‚â° (‚ü®2/3‚ü©^ n) * 2/3
‚ü®2/3‚ü©-to-mult fe zero = f
 where
  abstract
   f : ‚ü®2/3‚ü©^ (succ 0) ‚â° ((‚ü®2/3‚ü©^ 0) * 2/3)
   f = (‚Ñö-mult-left-id fe 2/3) ‚Åª¬π
‚ü®2/3‚ü©-to-mult fe (succ n) = refl

‚ü®1/n‚ü© : ‚Ñï ‚Üí ‚Ñö
‚ü®1/n‚ü© n = to‚Ñö (pos 1 , n)

‚ü®1/sn‚ü© : ‚Ñï ‚Üí ‚Ñö
‚ü®1/sn‚ü© 0 = 1‚Ñö
‚ü®1/sn‚ü© (succ n) = ‚ü®1/n‚ü© n

‚ü®1/n‚ü©-1 : Fun-Ext ‚Üí ‚ü®1/n‚ü© 0 ‚â° 1‚Ñö
‚ü®1/n‚ü©-1 fe = equiv‚Üíequality fe (pos 1 , 0) (pos 1 , 0) refl

‚ü®1/n‚ü©-1/2 : Fun-Ext ‚Üí ‚ü®1/n‚ü© 1 ‚â° 1/2
‚ü®1/n‚ü©-1/2 fe = equiv‚Üíequality fe (pos 1 , 1) (pos 1 , 1) by-definition

‚ü®1/2‚ü©^_ : ‚Ñï ‚Üí ‚Ñö
‚ü®1/2‚ü©^ 0         = to‚Ñö (pos 1 , 0)
‚ü®1/2‚ü©^ (succ n)  = rec (1/2) (_* 1/2) n

‚Ñö-into-half : Fun-Ext ‚Üí (q : ‚Ñö) ‚Üí q ‚â° q * 1/2 + q * 1/2
‚Ñö-into-half fe q = q                 ‚â°‚ü® ‚Ñö-mult-right-id fe q ‚Åª¬π ‚ü©
                   q * 1‚Ñö            ‚â°‚ü® ap (q *_) (1/2+1/2 fe ‚Åª¬π) ‚ü©
                   q * (1/2 + 1/2)   ‚â°‚ü® ‚Ñö-distributivity fe q 1/2 1/2 ‚ü©
                   q * 1/2 + q * 1/2 ‚àé

‚Ñö*-rearrange : Fun-Ext ‚Üí (x y z : ‚Ñö) ‚Üí x * y * z ‚â° x * z * y
‚Ñö*-rearrange fe x y z = x * y * z     ‚â°‚ü® ‚Ñö*-assoc fe x y z ‚ü©
                        x * (y * z)   ‚â°‚ü® ap (x *_) (‚Ñö*-comm y z) ‚ü©
                        x * (z * y)   ‚â°‚ü® ‚Ñö*-assoc fe x z y ‚Åª¬π ‚ü©
                        x * z * y     ‚àé

‚Ñö*-rearrange' : Fun-Ext ‚Üí (x y z : ‚Ñö) ‚Üí x * y * z ‚â° z * x * y
‚Ñö*-rearrange' fe x y z = x * y * z   ‚â°‚ü® ‚Ñö*-comm (x * y) z ‚ü©
                         z * (x * y) ‚â°‚ü® ‚Ñö*-assoc fe z x y ‚Åª¬π ‚ü©
                         z * x * y   ‚àé

half-of-quarter : Fun-Ext ‚Üí 1/2 * 1/2 ‚â° 1/4
half-of-quarter fe = to‚Ñö-* fe (pos 1 , 1) (pos 1 , 1)

