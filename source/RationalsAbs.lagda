Andrew Sneap

\begin{code}
{-# OPTIONS --without-K --exact-split --safe #-}

open import SpartanMLTT renaming (_+_ to _‚àî_) -- TypeTopology

open import OrderNotation --TypeTopology
open import UF-FunExt -- TypeTopology
open import UF-Base hiding (_‚âà_) -- TypeTopology
open import UF-Subsingletons -- TypeTopology

open import IntegersAbs hiding (abs)
open import IntegersAddition renaming (_+_ to _‚Ñ§+_)
open import IntegersB
open import IntegersMultiplication renaming (_*_ to _‚Ñ§*_)
open import IntegersOrder 
open import NaturalsMultiplication renaming (_*_ to _‚Ñï*_)
open import ncRationals
open import ncRationalsOperations renaming (abs to ‚Ñö‚Çô-abs) renaming (-_ to ‚Ñö‚Çô-_) hiding (_+_)
open import Rationals
open import RationalsAddition
open import RationalsNegation
open import RationalsOrder

module RationalsAbs where

abs : ‚Ñö ‚Üí ‚Ñö
abs (q , _) = to‚Ñö (‚Ñö‚Çô-abs q)

‚Ñö-abs-zero : 0‚Ñö ‚â° abs 0‚Ñö
‚Ñö-abs-zero = by-definition

to‚Ñö-abs : Fun-Ext ‚Üí (q : ‚Ñö‚Çô) ‚Üí abs (to‚Ñö q) ‚â° to‚Ñö (‚Ñö‚Çô-abs q) 
to‚Ñö-abs fe (x , a) = conclusion
 where
  rational-q : Œ£ ((x' , a') , lxp) Íûâ ‚Ñö , Œ£ h Íûâ ‚Ñï , (x ‚â° pos (succ h) ‚Ñ§* x') √ó (succ a ‚â° succ h ‚Ñï* succ a')
  rational-q = to‚Ñölemma (x , a)
  lx : ‚Ñö
  lx = pr‚ÇÅ rational-q
  x' : ‚Ñ§
  x' = pr‚ÇÅ (pr‚ÇÅ lx)
  a' : ‚Ñï
  a' = pr‚ÇÇ (pr‚ÇÅ lx)
  lxp = pr‚ÇÇ lx
  h = pr‚ÇÅ (pr‚ÇÇ (rational-q))
  e‚ÇÅ : succ a ‚â° succ h ‚Ñï* succ a'
  e‚ÇÅ = pr‚ÇÇ (pr‚ÇÇ (pr‚ÇÇ rational-q))
  e‚ÇÇ : x ‚â° pos (succ h) ‚Ñ§* x'
  e‚ÇÇ = pr‚ÇÅ (pr‚ÇÇ (pr‚ÇÇ rational-q))

  sa = succ a
  psa = pos (succ a)
  sh = succ h
  psh = pos (succ h)
  sa' = succ a'
  psa' = pos (succ a')
    
  helper : ‚Ñö‚Çô-abs (x' , a') ‚âà ‚Ñö‚Çô-abs (x , a) ‚Üí to‚Ñö (‚Ñö‚Çô-abs (x' , a')) ‚â° to‚Ñö (‚Ñö‚Çô-abs (x , a))
  helper = equiv‚Üíequality fe (‚Ñö‚Çô-abs (x' , a')) (‚Ñö‚Çô-abs (x , a))

  I : ‚Ñö‚Çô-abs (x' , a') ‚âà ‚Ñö‚Çô-abs (x , a)
  I = ‚Ñ§-mult-left-cancellable (abs‚Ñ§ x' ‚Ñ§* psa) (abs‚Ñ§ x ‚Ñ§* psa') psh id II
   where
    II : psh ‚Ñ§* (abs‚Ñ§ x' ‚Ñ§* psa) ‚â° psh ‚Ñ§* (abs‚Ñ§ x ‚Ñ§* psa')
    II = psh ‚Ñ§* (abs‚Ñ§ x' ‚Ñ§* psa)       ‚â°‚ü® ‚Ñ§*-assoc psh (abs‚Ñ§ x') psa ‚Åª¬π ‚ü©
         psh ‚Ñ§* abs‚Ñ§ x' ‚Ñ§* psa         ‚â°‚ü® by-definition ‚ü©
         abs‚Ñ§ psh ‚Ñ§* abs‚Ñ§ x' ‚Ñ§* psa    ‚â°‚ü® ap (_‚Ñ§* psa) (abs-over-mult' psh x' ‚Åª¬π) ‚ü©
         abs‚Ñ§ (psh ‚Ñ§* x') ‚Ñ§* psa       ‚â°‚ü® ap (Œª z ‚Üí abs‚Ñ§ z ‚Ñ§* psa) (e‚ÇÇ ‚Åª¬π) ‚ü©
         abs‚Ñ§ x ‚Ñ§* psa                 ‚â°‚ü® ap (Œª z ‚Üí abs‚Ñ§ x ‚Ñ§* pos z) e‚ÇÅ ‚ü©
         abs‚Ñ§ x ‚Ñ§* pos (sh ‚Ñï* sa')     ‚â°‚ü® ap (Œª z ‚Üí abs‚Ñ§ x ‚Ñ§* z) (pos-multiplication-equiv-to-‚Ñï sh sa' ‚Åª¬π) ‚ü©
         abs‚Ñ§ x ‚Ñ§* (psh ‚Ñ§* psa')       ‚â°‚ü® ‚Ñ§-mult-rearrangement''' (abs‚Ñ§ x) psh psa' ‚ü©
         psh ‚Ñ§* (abs‚Ñ§ x ‚Ñ§* psa')       ‚àé
  
  conclusion : abs (to‚Ñö (x , a)) ‚â° to‚Ñö (‚Ñö‚Çô-abs (x , a))
  conclusion = helper I

abs-of-pos-is-pos : Fun-Ext ‚Üí (p : ‚Ñö) ‚Üí 0‚Ñö ‚â§ p ‚Üí abs p ‚â° p
abs-of-pos-is-pos fe ((pos x , a) , Œ±) l = I
 where
  I : abs ((pos x , a) , Œ±) ‚â° (pos x , a) , Œ±
  I = abs ((pos x , a) , Œ±)    ‚â°‚ü® by-definition ‚ü©
      to‚Ñö (‚Ñö‚Çô-abs (pos x , a)) ‚â°‚ü® by-definition ‚ü©
      to‚Ñö (pos x , a)          ‚â°‚ü® to‚Ñö-to‚Ñö‚Çô fe ((pos x , a) , Œ±) ‚Åª¬π ‚ü©
      ((pos x , a) , Œ±) ‚àé
abs-of-pos-is-pos fe ((negsucc x , a) , Œ±) l = ùüò-elim (III II)
 where
  I : (pos 0 ‚Ñ§* pos (succ a)) ‚â§ (negsucc x ‚Ñ§* pos 1)
  I = l
  II : pos 0 ‚â§ negsucc x
  II = transport‚ÇÇ _‚â§_ (‚Ñ§-zero-left-is-zero (pos (succ a))) (‚Ñ§-zero-right-neutral (negsucc x)) I
  III : ¬¨ (pos 0 ‚â§ negsucc x) 
  III (k , e) = pos-not-negative (‚Ñ§-zero-left-neutral (pos k) ‚Åª¬π ‚àô e)
  

‚Ñö-abs-neg-equals-pos : Fun-Ext ‚Üí (q : ‚Ñö) ‚Üí abs q ‚â° abs (- q)
‚Ñö-abs-neg-equals-pos fe (q , p) = conclusion
 where
  helper : ‚Ñö‚Çô-abs q ‚âà ‚Ñö‚Çô-abs (‚Ñö‚Çô- q) ‚Üí to‚Ñö (‚Ñö‚Çô-abs q) ‚â° to‚Ñö (‚Ñö‚Çô-abs (‚Ñö‚Çô- q))
  helper = equiv‚Üíequality fe (‚Ñö‚Çô-abs q) (‚Ñö‚Çô-abs (‚Ñö‚Çô- q))

  I : ‚Ñö‚Çô-abs q ‚âà ‚Ñö‚Çô-abs (‚Ñö‚Çô- q)
  I = ‚Ñö‚Çô-abs-neg-equals-pos q
  
  conclusion : abs (q , p) ‚â° abs (- (q , p))
  conclusion = abs (q , p)          ‚â°‚ü® by-definition ‚ü©
               to‚Ñö (‚Ñö‚Çô-abs q)        ‚â°‚ü® helper I ‚ü©
               to‚Ñö (‚Ñö‚Çô-abs (‚Ñö‚Çô- q))  ‚â°‚ü® to‚Ñö-abs fe (‚Ñö‚Çô- q) ‚Åª¬π ‚ü©
               abs (to‚Ñö (‚Ñö‚Çô- q))     ‚â°‚ü® by-definition ‚ü©
               abs (- (q , p)) ‚àé

‚Ñö-abs-inverse : Fun-Ext ‚Üí (q : ‚Ñö) ‚Üí (abs q ‚â° q) ‚àî (abs q ‚â° - q)
‚Ñö-abs-inverse fe ((pos x , a) , q) = inl conclusion
 where
  I : (pos x , a) ‚âà to‚Ñö‚Çô (to‚Ñö (pos x , a))
  I = ‚âà-to‚Ñö (pos x , a)
  II : Œ£ (x' , a') Íûâ ‚Ñö‚Çô , ((pos x , a) , q ‚â° (to‚Ñö (x' , a'))) 
  II = q-has-qn fe ((pos x , a) , q)
  x' = pr‚ÇÅ (pr‚ÇÅ II)
  a' = pr‚ÇÇ (pr‚ÇÅ II)

  helper : (pos x , a) ‚âà (x' , a') ‚Üí to‚Ñö (pos x , a) ‚â° to‚Ñö (x' , a')
  helper = equiv‚Üíequality fe (pos x , a) (x' , a')

  III : (pos x , a) ‚âà (x' , a')
  III = refl

  conclusion : abs ((pos x , a) , q) ‚â° (pos x , a) , q
  conclusion = abs ((pos x , a) , q)   ‚â°‚ü® by-definition ‚ü©
               to‚Ñö (pos x , a)         ‚â°‚ü® helper III ‚ü©
               to‚Ñö (x' , a')           ‚â°‚ü® pr‚ÇÇ II ‚Åª¬π ‚ü©
               (pos x , a) , q         ‚àé
‚Ñö-abs-inverse fe ((negsucc x , a) , q) = inr conclusion
 where
  conclusion : abs ((negsucc x , a) , q) ‚â° (- ((negsucc x , a) , q))
  conclusion = abs ((negsucc x , a) , q)    ‚â°‚ü® by-definition ‚ü©
               to‚Ñö ((abs‚Ñ§ (negsucc x)) , a)  ‚â°‚ü® by-definition ‚ü©
               to‚Ñö (pos (succ x) , a)        ‚â°‚ü® by-definition ‚ü©
               to‚Ñö (‚Ñö‚Çô- (negsucc x , a))     ‚â°‚ü® by-definition ‚ü©
               (- ((negsucc x , a) , q))     ‚àé

‚Ñö-positive-not-zero : Fun-Ext ‚Üí (x a : ‚Ñï) ‚Üí ¬¨ (to‚Ñö (pos (succ x) , a) ‚â° 0‚Ñö)
‚Ñö-positive-not-zero fe x a e = pos-int-not-zero x III
 where
  I : (pos (succ x) , a) ‚âà (pos 0 , 0)
  I = equality‚Üíequiv fe (pos (succ x) , a) (pos 0 , 0) e

  II : pos (succ x) ‚Ñ§* pos 1 ‚â° pos 0 ‚Ñ§* pos (succ a)
  II = I

  III : pos (succ x) ‚â° pos 0
  III = pos (succ x)            ‚â°‚ü® by-definition ‚ü©
        pos (succ x) ‚Ñ§* (pos 1) ‚â°‚ü® II ‚ü©
        pos 0 ‚Ñ§* pos (succ a)   ‚â°‚ü® ‚Ñ§-zero-left-is-zero (pos (succ a))  ‚ü©
        pos 0 ‚àé

‚Ñö-abs-is-positive : (q : ‚Ñö) ‚Üí 0‚Ñö ‚â§ abs q
‚Ñö-abs-is-positive ((pos zero , a) , _)     = 0 , I
 where
  I : pos 0 ‚Ñ§* pos 0 ‚Ñ§+ pos 0 ‚â° pos 0 ‚Ñ§* pos (succ 0)
  I = pos 0 ‚Ñ§* pos 0 ‚Ñ§+ pos 0 ‚â°‚ü® by-definition ‚ü©
      pos 0 ‚Ñ§* pos 0          ‚â°‚ü® by-definition ‚ü©
      pos 0                   ‚â°‚ü® by-definition ‚ü©
      pos 0 ‚Ñ§* pos 1          ‚àé
‚Ñö-abs-is-positive ((pos (succ x) , a) , q) = ‚Ñö<-coarser-than-‚â§ 0‚Ñö (abs ((pos (succ x) , a) , q)) (‚Ñö-zero-less-than-positive x a)
‚Ñö-abs-is-positive ((negsucc x , a) , q)    = ‚Ñö<-coarser-than-‚â§ 0‚Ñö (abs (((negsucc x , a) , q))) (‚Ñö-zero-less-than-positive x a)

‚Ñö-abs-zero-is-zero : Fun-Ext ‚Üí (q : ‚Ñö) ‚Üí abs q ‚â° 0‚Ñö ‚Üí q ‚â° 0‚Ñö
‚Ñö-abs-zero-is-zero fe ((pos 0 , a) , p) e = numerator-zero-is-zero fe ((pos 0 , a) , p) refl
‚Ñö-abs-zero-is-zero fe ((pos (succ x) , a) , p) e = ùüò-elim (‚Ñö-positive-not-zero fe x a e)
‚Ñö-abs-zero-is-zero fe ((negsucc x , a) , p) e = ùüò-elim (‚Ñö-positive-not-zero fe x a e)

‚Ñö-abs-‚â§ : Fun-Ext ‚Üí (q : ‚Ñö) ‚Üí (- (abs q)) ‚â§ q √ó q ‚â§ abs q
‚Ñö-abs-‚â§ fe q = locate-q (‚Ñö-abs-inverse fe q)
 where
  i : 0‚Ñö ‚â§ abs q
  i = ‚Ñö-abs-is-positive q
  ii : (0‚Ñö + (- abs q)) ‚â§ (abs q + (- abs q))
  ii = ‚Ñö‚â§-addition-preserves-order fe 0‚Ñö (abs q) (- abs q) i
  iii : (- abs q) ‚â§ 0‚Ñö
  iii = transport‚ÇÇ _‚â§_ (‚Ñö-zero-left-neutral fe (- abs q)) (‚Ñö-inverse-sum-to-zero fe (abs q)) ii
  iv : (- abs q) ‚â§ abs q
  iv = ‚Ñö‚â§-trans fe (- abs q) 0‚Ñö (abs q) iii i
  
  locate-q : (abs q ‚â° q) ‚àî (abs q ‚â° (- q)) ‚Üí ((- abs q) ‚â§ q) √ó (q ‚â§ abs q)
  locate-q (inl e) = I , II
   where
    I : (- abs q) ‚â§ q
    I = transport ((- abs q) ‚â§_) e iv

    II : q ‚â§ abs q
    II = transport (q ‚â§_) (e ‚Åª¬π) (‚Ñö‚â§-refl q)
  locate-q (inr r) = I , II
   where
    Œ± : q ‚â° (- abs q)
    Œ± = q         ‚â°‚ü® ‚Ñö-minus-minus fe q ‚ü©
        (- (- q)) ‚â°‚ü® ap -_ (r ‚Åª¬π) ‚ü©
        - (abs q) ‚àé
        
    I : (- abs q) ‚â§ q
    I = transport (_‚â§ q) Œ± (‚Ñö‚â§-refl q)

    II : q ‚â§ abs q 
    II = transport (_‚â§ (abs q)) (Œ± ‚Åª¬π) iv

‚Ñö-abs-‚â§-unpack : Fun-Ext ‚Üí (q Œµ : ‚Ñö) ‚Üí abs q ‚â§ Œµ ‚Üí - Œµ ‚â§ q √ó q ‚â§ Œµ
‚Ñö-abs-‚â§-unpack fe q Œµ l = locate-q (‚Ñö-abs-inverse fe q)
 where
  abs-q-positive : 0‚Ñö ‚â§ abs q
  abs-q-positive = ‚Ñö-abs-is-positive q

  Œµ-positive : 0‚Ñö ‚â§ Œµ
  Œµ-positive = ‚Ñö‚â§-trans fe 0‚Ñö (abs q) Œµ abs-q-positive l

  neg-epsilon-negative : (- Œµ) ‚â§ 0‚Ñö
  neg-epsilon-negative = ‚Ñö‚â§-swap fe 0‚Ñö Œµ Œµ-positive
  
  locate-q : (abs q ‚â° q) ‚àî (abs q ‚â° - q) ‚Üí ((- Œµ) ‚â§ q) √ó (q ‚â§ Œµ)
  locate-q (inl i) = ‚Ñö‚â§-trans fe (- Œµ) 0‚Ñö q neg-epsilon-negative (transport (0‚Ñö ‚â§_) i abs-q-positive) , (transport (_‚â§ Œµ) i l)
  locate-q (inr i) = transport (- Œµ ‚â§_) (‚Ñö-minus-minus fe q ‚Åª¬π) Œ≤ , ‚Ñö‚â§-trans fe q 0‚Ñö Œµ Œ¥ Œµ-positive
   where
    Œ± : (- q) ‚â§ Œµ
    Œ± = transport (_‚â§ Œµ) i l
    Œ≤ : (- Œµ) ‚â§ (- (- q))
    Œ≤ = ‚Ñö‚â§-swap fe (- q) Œµ Œ±
    Œ≥ : (- (- q)) ‚â§ 0‚Ñö
    Œ≥ = transport (Œª z ‚Üí - z ‚â§ 0‚Ñö) i (‚Ñö‚â§-swap fe 0‚Ñö (abs q) abs-q-positive)
    Œ¥ : q ‚â§ 0‚Ñö
    Œ¥ = transport (_‚â§ 0‚Ñö) (‚Ñö-minus-minus fe q ‚Åª¬π) Œ≥
  
‚Ñö‚â§-to-abs : Fun-Ext ‚Üí (x y : ‚Ñö) ‚Üí (- y) ‚â§ x √ó x ‚â§ y ‚Üí abs x ‚â§ y
‚Ñö‚â§-to-abs fe x y (l‚ÇÅ , l‚ÇÇ) = I (‚Ñö-abs-inverse fe x)
 where
  Œ± : (- x) ‚â§ (- (- y))
  Œ± = ‚Ñö‚â§-swap fe (- y) x l‚ÇÅ
  I : (abs x ‚â° x) ‚àî (abs x ‚â° (- x)) ‚Üí abs x ‚â§ y
  I (inl l) = transport (_‚â§ y) (l ‚Åª¬π) l‚ÇÇ
  I (inr r) = transport‚ÇÇ _‚â§_ (r ‚Åª¬π) (‚Ñö-minus-minus fe y ‚Åª¬π) Œ±

‚Ñö<-to-abs : Fun-Ext ‚Üí (x y : ‚Ñö) ‚Üí (- y) < x √ó x < y ‚Üí abs x < y
‚Ñö<-to-abs fe x y (l‚ÇÅ , l‚ÇÇ) = II (‚Ñö‚â§-split fe (abs x) y I) 
 where
  I : abs x ‚â§ y
  I = ‚Ñö‚â§-to-abs fe x y (‚Ñö<-coarser-than-‚â§ (- y) x l‚ÇÅ , ‚Ñö<-coarser-than-‚â§ x y l‚ÇÇ)
  II : (abs x < y) ‚àî (abs x ‚â° y) ‚Üí abs x < y
  II (inl l) = l
  II (inr r) = III (‚Ñö-abs-inverse fe x)
   where
    
    III : (abs x ‚â° x) ‚àî (abs x ‚â° - x) ‚Üí abs x < y
    III (inl s) = ùüò-elim (‚Ñö<-not-itself x (transport (x <_) (r ‚Åª¬π ‚àô s) l‚ÇÇ))
    III (inr s) = ùüò-elim (‚Ñö<-not-itself x (transport (_< x) IV l‚ÇÅ))
     where
      IV : - y ‚â° x
      IV = - y     ‚â°‚ü® ap -_ (r ‚Åª¬π ‚àô s) ‚ü©
           - (- x) ‚â°‚ü® ‚Ñö-minus-minus fe x ‚Åª¬π ‚ü©
           x ‚àé

‚Ñö-abs-<-unpack :  Fun-Ext ‚Üí (q Œµ : ‚Ñö) ‚Üí abs q < Œµ ‚Üí - Œµ < q √ó q < Œµ
‚Ñö-abs-<-unpack fe q Œµ l = locate-q (‚Ñö-abs-inverse fe q)
 where
  abs-q-positive : 0‚Ñö ‚â§ abs q
  abs-q-positive = ‚Ñö-abs-is-positive q
  
  Œµ-positive : 0‚Ñö < Œµ
  Œµ-positive = ‚Ñö‚â§-<-trans fe 0‚Ñö (abs q) Œµ abs-q-positive l

  neg-epsilon-negative : - Œµ < 0‚Ñö
  neg-epsilon-negative = ‚Ñö<-swap fe 0‚Ñö Œµ Œµ-positive

  locate-q : (abs q ‚â° q) ‚àî (abs q ‚â° - q) ‚Üí ((- Œµ) < q) √ó (q < Œµ)
  locate-q (inl i) = ‚Ñö<-‚â§-trans fe (- Œµ) 0‚Ñö q neg-epsilon-negative (transport (0‚Ñö ‚â§_) i abs-q-positive) , (transport (_< Œµ) i l)
  locate-q (inr i) = transport (- Œµ <_) (‚Ñö-minus-minus fe q ‚Åª¬π) Œ≤ , ‚Ñö‚â§-<-trans fe q 0‚Ñö Œµ Œ¥ Œµ-positive
   where
    Œ± : - q < Œµ
    Œ± = transport (_< Œµ) i l
    Œ≤ : - Œµ < - (- q)
    Œ≤ = ‚Ñö<-swap fe (- q) Œµ Œ±
    Œ≥ : - (- q) ‚â§ 0‚Ñö
    Œ≥ = transport (Œª z ‚Üí - z ‚â§ 0‚Ñö) i (‚Ñö‚â§-swap fe 0‚Ñö (abs q) abs-q-positive)
    Œ¥ : q ‚â§ 0‚Ñö
    Œ¥ = transport (_‚â§ 0‚Ñö) (‚Ñö-minus-minus fe q ‚Åª¬π) Œ≥
  

‚Ñö-triangle-inequality : Fun-Ext ‚Üí (x y : ‚Ñö) ‚Üí abs (x + y) ‚â§ (abs x + abs y)
‚Ñö-triangle-inequality fe x y = ‚Ñö‚â§-to-abs fe (x + y) (abs x + abs y) (I (‚Ñö-abs-‚â§ fe x) (‚Ñö-abs-‚â§ fe y))
 where
  I : (- (abs x)) ‚â§ x √ó x ‚â§ abs x ‚Üí (- abs y) ‚â§ y √ó y ‚â§ abs y ‚Üí (- (abs x + abs y)) ‚â§ (x + y) √ó (x + y) ‚â§ (abs x + abs y) -- (input ‚Ñö-abs-order' x and ‚Ñö-abs-order' y)
  I (l‚ÇÅ , l‚ÇÇ) (l‚ÇÉ , l‚ÇÑ) = transport (_‚â§ (x + y)) Œ≥ Œ± , Œ≤
   where
    Œ± : ((- abs x) + (- abs y)) ‚â§ (x + y)
    Œ± = ‚Ñö‚â§-adding fe (- abs x) x (- abs y) y l‚ÇÅ l‚ÇÉ
    Œ≥ : ((- abs x) + (- abs y)) ‚â° (- (abs x + abs y))
    Œ≥ = ‚Ñö-minus-dist fe (abs x) (abs y)
    Œ≤ : (x + y) ‚â§ (abs x + abs y)
    Œ≤ = ‚Ñö‚â§-adding fe x (abs x) y (abs y) l‚ÇÇ l‚ÇÑ



\end{code}
