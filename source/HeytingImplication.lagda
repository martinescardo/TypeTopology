\section{Preamble}

\begin{code}

{-# OPTIONS --without-K --safe --auto-inline #-}

open import Universes
open import SpartanMLTT
open import UF-Base
open import UF-PropTrunc
open import UF-FunExt
open import Sigma

module HeytingImplication
         (pt : propositional-truncations-exist)
         (fe : Fun-Ext)
         where

open import Frame pt fe
open import GaloisConnection pt fe
open import UF-Subsingletons

open import UF-Subsingleton-Combinators

open AllCombinators pt fe
open PropositionalTruncation pt

open import AdjointFunctorTheoremForFrames pt fe

open Locale

is-heyting-implication-of : (X : Locale ùì§ ùì• ùì¶) ‚Üí ‚ü® ùí™ X ‚ü© ‚Üí ‚ü® ùí™ X ‚ü© √ó ‚ü® ùí™ X ‚ü© ‚Üí  Œ© (ùì§ ‚äî ùì•)
is-heyting-implication-of X z (x , y) =
 ‚±Ø w ‚à∂ ‚ü® ùí™ X ‚ü© , ((w ‚àß[ ùí™ X ] x) ‚â§[ poset-of (ùí™ X) ] y) ‚Üî (w ‚â§[ poset-of (ùí™ X) ] z)

is-heyting-implication-operation : (X : Locale ùì§ ùì• ùì¶)
                                 ‚Üí (‚ü® ùí™ X ‚ü© ‚Üí ‚ü® ùí™ X ‚ü© ‚Üí ‚ü® ùí™ X ‚ü©)
                                 ‚Üí Œ© (ùì§ ‚äî ùì•)
is-heyting-implication-operation X _==>_ =
 ‚±Ø x ‚à∂ ‚ü® ùí™ X ‚ü© , ‚±Ø y ‚à∂ ‚ü® ùí™ X ‚ü© , is-heyting-implication-of X (x ==> y) (x , y)

modus-ponens : (X : Locale ùì§ ùì• ùì¶) {U V W : ‚ü® ùí™ X ‚ü©}
             ‚Üí is-heyting-implication-of X W (U , V) holds
             ‚Üí ((W ‚àß[ ùí™ X ] U) ‚â§[ poset-of (ùí™ X) ] V) holds
modus-ponens X {x} {y} {z} p = pr‚ÇÇ (p z) (‚â§-is-reflexive (poset-of (ùí™ X)) z)
 where
  open PosetReasoning (poset-of (ùí™ X))

module HeytingImplicationConstruction (X : Locale ùì§  ùì•  ùì•)
                                      (ùí∑ : has-basis (ùí™ X) holds) where

\end{code}

\begin{code}

 L  = ùí™ X
 L‚Çö = poset-of (ùí™ X)

 open GaloisConnectionBetween
 open AdjointFunctorTheorem X X ùí∑

 ‚àß-right-preserves-joins : (U : ‚ü® ùí™ X ‚ü©)
                         ‚Üí (is-join-preserving (ùí™ X) (ùí™ X) (meet-of (ùí™ X) U)) holds
 ‚àß-right-preserves-joins = distributivity (ùí™ X)

 meet-right-is-monotonic : (U : ‚ü® ùí™ X ‚ü©) ‚Üí is-monotonic L‚Çö L‚Çö (meet-of (ùí™ X) U) holds
 meet-right-is-monotonic U = scott-continuous-implies-monotone L L (meet-of L U) ŒΩ
  where
   ŒΩ : is-scott-continuous (ùí™ X) (ùí™ X) (meet-of (ùí™ X) U) holds
   ŒΩ = join-preserving-implies-scott-continuous L L (meet-of L U) (‚àß-right-preserves-joins U)

 meet-right‚Çò : ‚ü® L ‚ü© ‚Üí L‚Çö ‚îÄm‚Üí L‚Çö
 meet-right‚Çò U = (Œª V ‚Üí U ‚àß[ L ] V) , meet-right-is-monotonic U

 _==>_ : ‚ü® ùí™ X ‚ü© ‚Üí ‚ü® ùí™ X ‚ü© ‚Üí ‚ü® ùí™ X ‚ü©
 _==>_ U = pr‚ÇÅ (pr‚ÇÅ (aft-backward (meet-right‚Çò U) (‚àß-right-preserves-joins U)))

 ==>-is-heyting-implication : is-heyting-implication-operation X _==>_ holds
 ==>-is-heyting-implication U V W = Œ≤ , Œ≥
  where
   open PosetReasoning (poset-of L)

   œà = aft-backward (meet-right‚Çò U) (‚àß-right-preserves-joins U)

   Œ≤ : ((W ‚àß[ L ] U) ‚â§[ poset-of L ] V ‚áí W ‚â§[ poset-of L ] (U ==> V)) holds
   Œ≤ p = pr‚ÇÅ (pr‚ÇÇ œà W V) (U ‚àß[ L ] W   ‚â°‚ü® ‚àß[ L ]-is-commutative U W ‚ü©‚Çö
                          W ‚àß[ L ] U   ‚â§‚ü® p ‚ü©
                          V            ‚ñ†)

   ‚Ä† : ((U ‚àß[ L ] (U ==> V)) ‚â§[ poset-of L ] V) holds
   ‚Ä† = pr‚ÇÇ (pr‚ÇÇ œà (U ==> V) V) (‚â§-is-reflexive (poset-of L) (U ==> V))

   Œ≥ : (W ‚â§[ poset-of L ] (U ==> V) ‚áí (W ‚àß[ L ] U) ‚â§[ poset-of L ] V) holds
   Œ≥ p = W ‚àß[ L ] U            ‚â§‚ü® ‚àß[ L ]-left-monotone p            ‚ü©
         (U ==> V) ‚àß[ L ] U    ‚â°‚ü® ‚àß[ L ]-is-commutative (U ==> V) U ‚ü©‚Çö
         U ‚àß[ L ] (U ==> V)    ‚â§‚ü® ‚Ä†                                 ‚ü©
         V                     ‚ñ†

\end{code}
