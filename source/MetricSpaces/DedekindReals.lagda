Andrew Sneap, 10 March 2022
Updated 9th May 2023

This file proves that the Dedekind reals are a complete metric space.
A complete metric space is a metric space where every Cauchy Sequence is a
convergent sequence. The proof is an implementation of the one described in
the HoTT Book, section 11.2.2.

Cauchy approximation sequences, limits of such sequences, and the corollary that
any cauchy sequence has a limit is are implemented as described.

\begin{code}
{-# OPTIONS --safe --without-K --lossy-unification #-}

open import MLTT.Spartan renaming (_+_ to _‚àî_)

open import Notation.Order
open import UF.Base
open import UF.FunExt
open import UF.Powerset
open import UF.PropTrunc
open import UF.Subsingletons
open import Naturals.Addition renaming (_+_ to _‚Ñï+_)
open import Naturals.Order renaming ( max to ‚Ñïmax
                                    ; max-comm to ‚Ñïmax-comm
                                    ; max-assoc to ‚Ñïmax-assoc)
open import Rationals.Addition
open import Rationals.Type
open import Rationals.Abs
open import Rationals.Negation
open import Rationals.Order
open import Rationals.MinMax
open import Rationals.Multiplication
open import Rationals.Positive renaming (_+_ to _‚Ñö‚Çä+_ ; _*_ to _‚Ñö‚Çä*_)

module MetricSpaces.DedekindReals
  (fe : Fun-Ext)
  (pe : Prop-Ext)
  (pt : propositional-truncations-exist)
 where

open PropositionalTruncation pt

open import Rationals.Limits fe pe pt
open import MetricSpaces.Type fe pe pt
open import MetricSpaces.Rationals fe pe pt
open import DedekindReals.Type fe pe pt
open import DedekindReals.Properties fe pe pt
open import DedekindReals.Order fe pe pt

\end{code}

We say that two reals are Œµ-close if we can find a pair of rationals,
one either side of each real such that the the distance between the
furthest value on each side is less than Œµ.

\begin{code}

B-‚Ñù : (x y : ‚Ñù) ‚Üí ‚Ñö‚Çä ‚Üí ùì§‚ÇÄ Ãá
B-‚Ñù x y Œµ = ‚àÉ (p , q) Íûâ ‚Ñö √ó ‚Ñö , (p < x < q) √ó (p < y < q) √ó B-‚Ñö p q Œµ

‚Ñù-m2 : m2 ‚Ñù B-‚Ñù
‚Ñù-m2 x y Œµ = ‚à•‚à•-functor Œ≥
 where
  Œ≥ : Œ£ (p , q) Íûâ ‚Ñö √ó ‚Ñö , (p < x < q) √ó (p < y < q) √ó B-‚Ñö p q Œµ
    ‚Üí Œ£ (p , q) Íûâ ‚Ñö √ó ‚Ñö , (p < y < q) √ó (p < x < q) √ó B-‚Ñö p q Œµ
  Œ≥ ((p , q) , l‚ÇÅ , l‚ÇÇ , B) = (p , q) , l‚ÇÇ , l‚ÇÅ , B

‚Ñù-m1a-lemma : (x y : ‚Ñù) ‚Üí ((Œµ : ‚Ñö‚Çä) ‚Üí B-‚Ñù x y Œµ) ‚Üí (p : ‚Ñö) ‚Üí p < x ‚Üí p < y
‚Ñù-m1a-lemma x y f p p<x = ‚à•‚à•-rec II Œ≥ I
 where
  I : ‚àÉ q Íûâ ‚Ñö , (p < q) √ó (q < x)
  I = rounded-left-d x p p<x

  II : is-prop (p < y)
  II = ‚àà-is-prop (lower-cut-of y) p

  Œ≥ : Œ£ q Íûâ ‚Ñö , (p < q) √ó (q < x)
    ‚Üí p < y
  Œ≥ (q , p<q , q<x) = ‚à•‚à•-rec II Œ≥' III
   where
    Œµ‚Çä : ‚Ñö‚Çä
    Œµ‚Çä = q - p , ‚Ñö<-difference-positive p q p<q

    III : ‚àÉ (u , v) Íûâ ‚Ñö √ó ‚Ñö , (u < x < v) √ó (u < y < v) √ó B-‚Ñö u v Œµ‚Çä
    III = f Œµ‚Çä

    Œ≥' : Œ£ (u , v) Íûâ ‚Ñö √ó ‚Ñö , (u < x < v) √ó (u < y < v) √ó B-‚Ñö u v Œµ‚Çä
       ‚Üí p < y
    Œ≥' ((u , v) , (u<x , x<v) , (u<y , _) , B) = use-rounded-real-L y p u Œ≥'' u<y
     where
      u<v : u < v
      u<v = disjoint-from-real x u v (u<x , x<v)

      IV : abs (u - v) Ôºù v - u
      IV = ‚Ñö<-to-abs' u v u<v

      V : v - u < q - p
      V = transport (_< q - p) IV B

      VI : v - u + p < q
      VI = ‚Ñö<-subtraction-preserves-order'' (v - u) q p V

      VII : p + (v - u) < q
      VII = transport (_< q) (‚Ñö+-comm (v - u) p) VI

      VIII : p < q - (v - u)
      VIII = ‚Ñö<-subtraction-preserves-order''' p (v - u) q VII

      IX : q - (v - u) Ôºù u - (v - q)
      IX = q - (v - u)   Ôºù‚ü® ‚Ñö-minus-dist' (v - u) q ‚Åª¬π         ‚ü©
           - (v - u - q) Ôºù‚ü® ap -_ (‚Ñö+-rearrange v (- u) (- q)) ‚ü©
           - (v - q - u) Ôºù‚ü® ‚Ñö-minus-dist' (v - q) u            ‚ü©
           u - (v - q)   ‚àé

      X : p < u - (v - q)
      X = transport (p <_) IX VIII

      q<v : q < v
      q<v = disjoint-from-real x q v (q<x , x<v)

      XI : 0‚Ñö < v - q
      XI = ‚Ñö<-difference-positive q v q<v

      XII : u - (v - q) < u
      XII = ‚Ñö<-subtraction-preserves-order u (v - q) XI

      Œ≥'' : p < u
      Œ≥'' = ‚Ñö<-trans p (u - (v - q)) u X XII

‚Ñù-m1a : m1a ‚Ñù B-‚Ñù
‚Ñù-m1a x y f = ‚Ñù-equality-from-left-cut' x y Œ≥‚ÇÅ Œ≥‚ÇÇ
 where
  Œ≥‚ÇÅ : (p : ‚Ñö) ‚Üí p < x ‚Üí p < y
  Œ≥‚ÇÅ = ‚Ñù-m1a-lemma x y f

  f' : (Œµ : ‚Ñö‚Çä) ‚Üí B-‚Ñù y x Œµ
  f' Œµ = ‚Ñù-m2 x y Œµ (f Œµ)

  Œ≥‚ÇÇ : (p : ‚Ñö) ‚Üí p < y ‚Üí p < x
  Œ≥‚ÇÇ = ‚Ñù-m1a-lemma y x f'

‚Ñù-m1b : m1b ‚Ñù B-‚Ñù
‚Ñù-m1b x (Œµ , 0<Œµ) = ‚à•‚à•-functor Œ≥ (‚Ñù-arithmetically-located' x (Œµ , 0<Œµ))
 where
  Œ≥ : Œ£ (p , q) Íûâ ‚Ñö √ó ‚Ñö , (p < x < q) √ó (0‚Ñö < q - p < Œµ)
    ‚Üí Œ£ (p , q) Íûâ ‚Ñö √ó ‚Ñö , (p < x < q) √ó (p < x < q) √ó B-‚Ñö p q (Œµ , 0<Œµ)
  Œ≥ ((p , q) , (p<x , x<q) , (0<q-p , q-p<Œµ)) = Œ≥'
   where
    I : abs (q - p) < Œµ
    I = pos-abs-no-increase (q - p) Œµ (0<q-p , q-p<Œµ)

    l : B-‚Ñö p q (Œµ , 0<Œµ)
    l = transport (_< Œµ) (abs-comm q p) I

    Œ≥' : Œ£ (p , q) Íûâ ‚Ñö √ó ‚Ñö , (p < x < q) √ó (p < x < q) √ó B-‚Ñö p q (Œµ , 0<Œµ)
    Œ≥' = (p , q) , (p<x , x<q) , (p<x , x<q) , l

‚Ñù-m3 : m3 ‚Ñù B-‚Ñù
‚Ñù-m3 x y (Œµ‚ÇÅ , 0<Œµ‚ÇÅ) (Œµ‚ÇÇ , 0<Œµ‚ÇÇ) Œµ‚ÇÅ<Œµ‚ÇÇ = ‚à•‚à•-functor Œ≥
 where
  Œ≥ : Œ£ (p , q) Íûâ ‚Ñö √ó ‚Ñö , (p < x < q) √ó (p < y < q) √ó B-‚Ñö p q (Œµ‚ÇÅ , 0<Œµ‚ÇÅ)
    ‚Üí Œ£ (p , q) Íûâ ‚Ñö √ó ‚Ñö , (p < x < q) √ó (p < y < q) √ó B-‚Ñö p q (Œµ‚ÇÇ , 0<Œµ‚ÇÇ)
  Œ≥ ((p , q) , l‚ÇÅ , l‚ÇÇ , B) = (p , q) , l‚ÇÅ , l‚ÇÇ , Œ≥'
   where
    Œ≥' : B-‚Ñö p q (Œµ‚ÇÇ , 0<Œµ‚ÇÇ)
    Œ≥' = ‚Ñö<-trans (abs (p - q)) Œµ‚ÇÅ Œµ‚ÇÇ B Œµ‚ÇÅ<Œµ‚ÇÇ

‚Ñù-m4 : m4 ‚Ñù B-‚Ñù
‚Ñù-m4 x y z (Œµ‚ÇÅ , 0<Œµ‚ÇÅ) (Œµ‚ÇÇ , 0<Œµ‚ÇÇ) B‚ÇÅ B‚ÇÇ = ‚à•‚à•-functor Œ≥ (binary-choice B‚ÇÅ B‚ÇÇ)
 where
  Œµ‚ÇÉ = Œµ‚ÇÅ + Œµ‚ÇÇ
  Œµ‚ÇÉ' = Œµ‚ÇÇ + Œµ‚ÇÅ
  0<Œµ‚ÇÉ = ‚Ñö<-adding-zero Œµ‚ÇÅ Œµ‚ÇÇ 0<Œµ‚ÇÅ 0<Œµ‚ÇÇ

  Œ≥ : (Œ£ (a , b) Íûâ ‚Ñö √ó ‚Ñö , (a < x < b) √ó (a < y < b) √ó B-‚Ñö a b (Œµ‚ÇÅ , 0<Œµ‚ÇÅ))
    √ó (Œ£ (c , d) Íûâ ‚Ñö √ó ‚Ñö , (c < y < d) √ó (c < z < d) √ó B-‚Ñö c d (Œµ‚ÇÇ , 0<Œµ‚ÇÇ))
    ‚Üí (Œ£ (p , q) Íûâ ‚Ñö √ó ‚Ñö , (p < x < q) √ó (p < z < q) √ó B-‚Ñö p q (Œµ‚ÇÉ , 0<Œµ‚ÇÉ))
  Œ≥ ( ((a , b) , (a<x , x<b) , (a<y , y<b) , B‚ÇÉ)
    , ((c , d) , (c<y , y<d) , (c<z , z<d) , B‚ÇÑ)) = Œ≥'
   where
    a‚â§d : a ‚â§ d
    a‚â§d = disjoint-from-real' y a d (a<y , y<d)

    c‚â§b : c ‚â§ b
    c‚â§b = disjoint-from-real' y c b (c<y , y<b)

    p = min a c
    q = max b d

    p<x : p < x
    p<x = use-rounded-real-L' x p a (min‚â§ a c) a<x

    x<q : x < q
    x<q = use-rounded-real-R' x b q (max‚â§ b d) x<b

    p<z : p < z
    p<z = use-rounded-real-L' z p c (min‚â§' a c) c<z

    z<q : z < q
    z<q = use-rounded-real-R' z d q (max‚â§' b d) z<d

    I : (a ‚â§ c) √ó (p Ôºù a) ‚àî (c ‚â§ a) √ó (p Ôºù c)
    I = min-to-‚â§ a c

    II : (b ‚â§ d) √ó (q Ôºù d) ‚àî (d ‚â§ b) √ó (q Ôºù b)
    II = max-to-‚â§ b d

    Œµ‚ÇÅ<Œµ‚ÇÉ : Œµ‚ÇÅ < Œµ‚ÇÉ
    Œµ‚ÇÅ<Œµ‚ÇÉ = ‚Ñö<-addition-preserves-order'' Œµ‚ÇÅ Œµ‚ÇÇ 0<Œµ‚ÇÇ

    Œµ‚ÇÇ<Œµ‚ÇÉ' : Œµ‚ÇÇ < Œµ‚ÇÉ'
    Œµ‚ÇÇ<Œµ‚ÇÉ' = ‚Ñö<-addition-preserves-order'' Œµ‚ÇÇ Œµ‚ÇÅ 0<Œµ‚ÇÅ

    Œµ‚ÇÇ<Œµ‚ÇÉ : Œµ‚ÇÇ < Œµ‚ÇÉ
    Œµ‚ÇÇ<Œµ‚ÇÉ = transport (Œµ‚ÇÇ <_) (‚Ñö+-comm Œµ‚ÇÇ Œµ‚ÇÅ) Œµ‚ÇÇ<Œµ‚ÇÉ'

    c‚ÇÅ : c ‚â§ b ‚Üí b ‚â§ d ‚Üí abs (a - d) < Œµ‚ÇÉ
    c‚ÇÅ c‚â§b b‚â§d = inequality-chain-with-metric a b c d Œµ‚ÇÅ Œµ‚ÇÇ c‚â§b b‚â§d B‚ÇÉ B‚ÇÑ

    c‚ÇÇ : abs (a - b) < Œµ‚ÇÉ
    c‚ÇÇ = ‚Ñö<-trans (abs (a - b)) Œµ‚ÇÅ Œµ‚ÇÉ B‚ÇÉ Œµ‚ÇÅ<Œµ‚ÇÉ

    c‚ÇÉ : abs (c - d) < Œµ‚ÇÉ
    c‚ÇÉ = ‚Ñö<-trans (abs (c - d)) Œµ‚ÇÇ Œµ‚ÇÉ B‚ÇÑ Œµ‚ÇÇ<Œµ‚ÇÉ

    c‚ÇÑ' : (d ‚â§ b) ‚Üí abs (c - b) < Œµ‚ÇÉ'
    c‚ÇÑ' d‚â§b = inequality-chain-with-metric c d a b Œµ‚ÇÇ Œµ‚ÇÅ a‚â§d d‚â§b B‚ÇÑ B‚ÇÉ

    c‚ÇÑ : d ‚â§ b ‚Üí abs (c - b) < Œµ‚ÇÉ
    c‚ÇÑ d‚â§b = transport (abs (c - b) <_) (‚Ñö+-comm Œµ‚ÇÇ Œµ‚ÇÅ) (c‚ÇÑ' d‚â§b)

    Œ≥' : Œ£ (p , q) Íûâ ‚Ñö √ó ‚Ñö , (p < x < q) √ó (p < z < q) √ó B-‚Ñö p q (Œµ‚ÇÉ , 0<Œµ‚ÇÉ)
    Œ≥' = (min a c , max b d) , (p<x , x<q) , (p<z , z<q) , (Œ≥'' I II)
     where
      Œ≥'' : (a ‚â§ c) √ó (p Ôºù a) ‚àî (c ‚â§ a) √ó (p Ôºù c)
          ‚Üí (b ‚â§ d) √ó (q Ôºù d) ‚àî (d ‚â§ b) √ó (q Ôºù b)
          ‚Üí B-‚Ñö p q (Œµ‚ÇÉ , 0<Œµ‚ÇÉ)
      Œ≥'' (inl (a‚â§c , e‚ÇÅ)) (inl (b‚â§d , e‚ÇÇ))
       = transport‚ÇÇ (Œª ‚ñ†‚ÇÅ ‚ñ†‚ÇÇ ‚Üí abs (‚ñ†‚ÇÅ - ‚ñ†‚ÇÇ) < Œµ‚ÇÉ) (e‚ÇÅ ‚Åª¬π) (e‚ÇÇ ‚Åª¬π) (c‚ÇÅ c‚â§b b‚â§d)
      Œ≥'' (inl (a‚â§c , e‚ÇÅ)) (inr (d‚â§b , e‚ÇÇ))
       = transport‚ÇÇ (Œª ‚ñ†‚ÇÅ ‚ñ†‚ÇÇ ‚Üí abs (‚ñ†‚ÇÅ - ‚ñ†‚ÇÇ) < Œµ‚ÇÉ) (e‚ÇÅ ‚Åª¬π) (e‚ÇÇ ‚Åª¬π) c‚ÇÇ
      Œ≥'' (inr (c‚â§a , e‚ÇÅ)) (inl (b‚â§d , e‚ÇÇ))
       = transport‚ÇÇ (Œª ‚ñ†‚ÇÅ ‚ñ†‚ÇÇ ‚Üí abs (‚ñ†‚ÇÅ - ‚ñ†‚ÇÇ) < Œµ‚ÇÉ) (e‚ÇÅ ‚Åª¬π) (e‚ÇÇ ‚Åª¬π) c‚ÇÉ
      Œ≥'' (inr (a‚â§c , e‚ÇÅ)) (inr (d‚â§b , e‚ÇÇ))
       = transport‚ÇÇ (Œª ‚ñ†‚ÇÅ ‚ñ†‚ÇÇ ‚Üí abs (‚ñ†‚ÇÅ - ‚ñ†‚ÇÇ) < Œµ‚ÇÉ) (e‚ÇÅ ‚Åª¬π) (e‚ÇÇ ‚Åª¬π) (c‚ÇÑ d‚â§b)

‚Ñù-metric-space : metric-space ‚Ñù
‚Ñù-metric-space = B-‚Ñù , ‚Ñù-m1a , ‚Ñù-m1b , ‚Ñù-m2 , ‚Ñù-m3 , ‚Ñù-m4

cauchy-approximation : ùì§‚ÇÅ Ãá
cauchy-approximation
  = Œ£ f Íûâ (‚Ñö‚Çä ‚Üí ‚Ñù) , ((Œµ‚ÇÅ Œµ‚ÇÇ : ‚Ñö‚Çä) ‚Üí B-‚Ñù (f Œµ‚ÇÅ) (f Œµ‚ÇÇ) (Œµ‚ÇÅ ‚Ñö‚Çä+ Œµ‚ÇÇ))

cauchy-approximation-limit : cauchy-approximation ‚Üí ùì§‚ÇÅ Ãá
cauchy-approximation-limit (f , _)
 = Œ£ l Íûâ ‚Ñù , ((Œµ‚ÇÅ Œµ‚ÇÇ : ‚Ñö‚Çä) ‚Üí B-‚Ñù (f Œµ‚ÇÅ) l (Œµ‚ÇÅ ‚Ñö‚Çä+ Œµ‚ÇÇ))

cale-rl-lemma : (p q r s : ‚Ñö) ‚Üí q + r + s Ôºù p + r + (q - p + s)
cale-rl-lemma p q r s = Œ≥
 where
  Œ≥ : q + r + s Ôºù p + r + (q - p + s)
  Œ≥ = q + r + s                 Ôºù‚ü® ap (_+ s) (‚Ñö+-comm q r)                   ‚ü©
      r + q + s                 Ôºù‚ü® ‚Ñö-inverse-intro' (r + q + s) p            ‚ü©
      p - p + (r + q + s)       Ôºù‚ü® ‚Ñö+-assoc p (- p) (r + q + s)              ‚ü©
      p + ((- p) + (r + q + s)) Ôºù‚ü® ap (p +_) (‚Ñö+-comm (- p) (r + q + s))     ‚ü©
      p + (r + q + s - p)       Ôºù‚ü® ap (Œª ‚ñ† ‚Üí p + (‚ñ† - p)) (‚Ñö+-assoc r q s)   ‚ü©
      p + (r + (q + s) - p)     Ôºù‚ü® ap (p +_) (‚Ñö+-assoc r (q + s) (- p))      ‚ü©
      p + (r + (q + s - p))     Ôºù‚ü® ‚Ñö+-assoc p r (q + s - p) ‚Åª¬π               ‚ü©
      p + r + (q + s - p)       Ôºù‚ü® ap (p + r +_) (‚Ñö+-rearrange q (- p) s ‚Åª¬π) ‚ü©
      p + r + (q - p + s)       ‚àé

cale-lo-lemma : (p q : ‚Ñö)
              ‚Üí p < q
              ‚Üí let Œµ = 1/5 * (q - p)
                in p + Œµ + Œµ < q - Œµ - Œµ
cale-lo-lemma p q p<q = Œ≥
 where
  Œµ' = q - p
  Œµ = 1/5 * Œµ'
  0<Œµ' = ‚Ñö<-difference-positive p q p<q
  0<Œµ = ‚Ñö<-pos-multiplication-preserves-order 1/5 Œµ' 0<1/5 0<Œµ'
  0<2Œµ = ‚Ñö<-adding-zero Œµ Œµ 0<Œµ 0<Œµ

  e‚ÇÅ : 1/5 * Œµ' + 1/5 * Œµ' Ôºù 2/5 * Œµ'
  e‚ÇÅ = ‚Ñö-distributivity' Œµ' 1/5 1/5 ‚Åª¬π

  e‚ÇÇ : 2/5 * Œµ' + 2/5 * Œµ' Ôºù 4/5 * Œµ'
  e‚ÇÇ = ‚Ñö-distributivity' Œµ' 2/5 2/5 ‚Åª¬π

  e‚ÇÉ : 1/5 * Œµ' + 4/5 * Œµ' Ôºù 1‚Ñö * Œµ'
  e‚ÇÉ = ‚Ñö-distributivity' Œµ' 1/5 4/5 ‚Åª¬π

  I : p + Œµ + Œµ + Œµ + (Œµ + Œµ) Ôºù q - Œµ - Œµ + (Œµ + Œµ)
  I = p + Œµ + Œµ + Œµ + (Œµ + Œµ)       Ôºù‚ü® ap (p + Œµ + Œµ + Œµ +_) e‚ÇÅ                ‚ü©
      p + Œµ + Œµ + Œµ + 2/5 * Œµ'      Ôºù‚ü® ap (_+ 2/5 * Œµ') (‚Ñö+-assoc (p + Œµ) Œµ Œµ) ‚ü©
      p + Œµ + (Œµ + Œµ) + 2/5 * Œµ'    Ôºù‚ü® ap (Œª ‚ñ† ‚Üí p + Œµ + ‚ñ† + 2/5 * Œµ') e‚ÇÅ      ‚ü©
      p + Œµ + 2/5 * Œµ' + 2/5 * Œµ'   Ôºù‚ü® ‚Ñö+-assoc (p + Œµ) (2/5 * Œµ') (2/5 * Œµ')  ‚ü©
      p + Œµ + (2/5 * Œµ' + 2/5 * Œµ') Ôºù‚ü® ap (p + Œµ +_) e‚ÇÇ                        ‚ü©
      p + Œµ + 4/5 * Œµ'              Ôºù‚ü® ‚Ñö+-assoc p Œµ (4/5 * Œµ')                 ‚ü©
      p + (Œµ + 4/5 * Œµ')            Ôºù‚ü® ap (p +_) e‚ÇÉ                            ‚ü©
      p + 1‚Ñö * (q - p)              Ôºù‚ü® ap (p +_) (‚Ñö-mult-left-id Œµ')           ‚ü©
      p + (q - p)                   Ôºù‚ü® ap (p +_) (‚Ñö+-comm q (- p))             ‚ü©
      p + ((- p) + q)               Ôºù‚ü® ‚Ñö+-assoc p (- p) q ‚Åª¬π                   ‚ü©
      p - p + q                     Ôºù‚ü® ‚Ñö-inverse-intro' q p ‚Åª¬π                 ‚ü©
      q                             Ôºù‚ü® ‚Ñö-add-zero-twice q Œµ                    ‚ü©
      q - Œµ - Œµ + Œµ + Œµ             Ôºù‚ü® ‚Ñö+-assoc (q - Œµ - Œµ) Œµ Œµ                ‚ü©
      q - Œµ - Œµ + (Œµ + Œµ)           ‚àé

  II : p + Œµ + Œµ + Œµ Ôºù q - Œµ - Œµ
  II = ‚Ñö+-right-cancellable (p + Œµ + Œµ + Œµ) (q - Œµ - Œµ) (Œµ + Œµ) I

  III : p + Œµ + Œµ < p + Œµ + Œµ + Œµ
  III = ‚Ñö<-addition-preserves-order'' (p + Œµ + Œµ) Œµ 0<Œµ

  Œ≥ : p + Œµ + Œµ < q - Œµ - Œµ
  Œ≥ = transport (p + Œµ + Œµ <_) II III

cale-di-lemma‚ÇÅ : (p q r s t : ‚Ñö) ‚Üí p + q + r - (p - s - t) Ôºù r + t + (q + s)
cale-di-lemma‚ÇÅ p q r s t = Œ≥
 where
  I : - (p - s - t) Ôºù s + (t - p)
  I = - (p - s - t)       Ôºù‚ü® ap -_ (‚Ñö+-assoc p (- s) (- t))          ‚ü©
      - (p + ((- s) - t)) Ôºù‚ü® ap (Œª ‚ñ† ‚Üí - (p + ‚ñ†)) (‚Ñö-minus-dist s t) ‚ü©
      - (p - (s + t))     Ôºù‚ü® ‚Ñö-minus-dist' p (s + t)                 ‚ü©
      s + t - p           Ôºù‚ü® ‚Ñö+-assoc s t (- p)                      ‚ü©
      s + (t - p)         ‚àé

  II : q + r + (s + (t - p)) Ôºù (- p) + (q + r + s + t)
  II = q + r + (s + (t - p))   Ôºù‚ü® ‚Ñö+-assoc (q + r) s (t - p) ‚Åª¬π   ‚ü©
       q + r + s + (t - p)     Ôºù‚ü® ‚Ñö+-assoc (q + r + s) t (- p) ‚Åª¬π ‚ü©
       q + r + s + t + (- p)   Ôºù‚ü® ‚Ñö+-comm (q + r + s + t) (- p)   ‚ü©
       (- p) + (q + r + s + t) ‚àé

  Œ≥ : p + q + r - (p - s - t) Ôºù r + t + (q + s)
  Œ≥ = p + q + r - (p - s - t)       Ôºù‚ü® ap (p + q + r +_) I                    ‚ü©
      p + q + r + (s + (t - p))     Ôºù‚ü® ap (_+ (s + (t - p))) (‚Ñö+-assoc p q r) ‚ü©
      p + (q + r) + (s + (t - p))   Ôºù‚ü® ‚Ñö+-assoc p (q + r) (s + (t - p))       ‚ü©
      p + (q + r + (s + (t - p)))   Ôºù‚ü® ap (p +_) II                           ‚ü©
      p + ((- p) + (q + r + s + t)) Ôºù‚ü® ‚Ñö+-assoc p (- p) (q + r + s + t) ‚Åª¬π    ‚ü©
      p - p + (q + r + s + t)       Ôºù‚ü® ‚Ñö-inverse-intro' (q + r + s + t) p ‚Åª¬π  ‚ü©
      q + r + s + t                 Ôºù‚ü® ap (Œª ‚ñ† ‚Üí ‚ñ† + s + t) (‚Ñö+-comm q r)     ‚ü©
      r + q + s + t                 Ôºù‚ü® ap (_+ t) (‚Ñö+-assoc r q s)             ‚ü©
      r + (q + s) + t               Ôºù‚ü® ‚Ñö+-rearrange r t (q + s) ‚Åª¬π            ‚ü©
      r + t + (q + s)               ‚àé

cal-lim-lemma‚ÇÅ : (p q : ‚Ñö) ‚Üí 0‚Ñö < q ‚Üí p + 1/2 * q < p + q
cal-lim-lemma‚ÇÅ p q 0<q = ‚Ñö<-addition-preserves-order''' (1/2 * q) q p I
 where
  I : 1/2 * q < q
  I = half-of-pos-is-less q 0<q

cal-lim-lemma‚ÇÇ : (p q r s : ‚Ñö)
               ‚Üí p < q
               ‚Üí q - p < 1/2 * s
               ‚Üí 0‚Ñö < r
               ‚Üí 0‚Ñö < s
               ‚Üí abs (p - r - 1/2 * s - q) < r + s
cal-lim-lemma‚ÇÇ p q r s p<q l‚ÇÅ 0<r 0<s = Œ≥
 where
  l‚ÇÇ : 0‚Ñö < q - p
  l‚ÇÇ = ‚Ñö<-difference-positive p q p<q

  l‚ÇÉ : 0‚Ñö < 1/2 * s
  l‚ÇÉ = ‚Ñö<-pos-multiplication-preserves-order 1/2 s 0<1/2 0<s

  l‚ÇÑ : 0‚Ñö < r + 1/2 * s
  l‚ÇÑ = ‚Ñö<-adding-zero r (1/2 * s) 0<r l‚ÇÉ

  I : abs (p - r - 1/2 * s - q) Ôºù abs (q - p + (r + 1/2 * s))
  I = abs (p - r - 1/2 * s - q)         Ôºù‚ü® i   ‚ü©
      abs (q - (p - r - 1/2 * s))       Ôºù‚ü® ii  ‚ü©
      abs (q + (1/2 * s - (p - r)))     Ôºù‚ü® iii ‚ü©
      abs (q + (1/2 * s + (r - p)))     Ôºù‚ü® iv  ‚ü©
      abs (q + (r - p + 1/2 * s))       Ôºù‚ü® v   ‚ü©
      abs (q + ((- p) + r + 1/2 * s))   Ôºù‚ü® vi  ‚ü©
      abs (q + ((- p) + (r + 1/2 * s))) Ôºù‚ü® vii ‚ü©
      abs (q - p + (r + 1/2 * s))       ‚àé
   where
    i   = abs-comm (p - r - 1/2 * s) q
    ii  = ap (Œª ‚ñ† ‚Üí abs (q + ‚ñ†)) (‚Ñö-minus-dist' (p - r) (1/2 * s))
    iii = ap (Œª ‚ñ† ‚Üí abs (q + (1/2 * s + ‚ñ†))) (‚Ñö-minus-dist' p r)
    iv  = ap (Œª ‚ñ† ‚Üí abs (q + ‚ñ†)) (‚Ñö+-comm (1/2 * s) (r - p))
    v   = ap (Œª ‚ñ† ‚Üí abs (q + (‚ñ† + 1/2 * s))) (‚Ñö+-comm r (- p))
    vi  = ap (Œª ‚ñ† ‚Üí abs (q + ‚ñ†)) (‚Ñö+-assoc (- p) r (1/2 * s))
    vii = ap abs (‚Ñö+-assoc q (- p) (r + 1/2 * s) ‚Åª¬π)

  II : abs (q - p + (r + 1/2 * s)) ‚â§ abs (q - p) + abs (r + 1/2 * s)
  II = ‚Ñö-triangle-inequality (q - p) (r + 1/2 * s)

  e‚ÇÅ : abs (q - p) Ôºù q - p
  e‚ÇÅ = abs-of-pos-is-pos' (q - p) l‚ÇÇ

  e‚ÇÇ : abs (r + 1/2 * s) Ôºù r + 1/2 * s
  e‚ÇÇ = abs-of-pos-is-pos' (r + 1/2 * s) l‚ÇÑ

  III : abs (q - p) + abs (r + 1/2 * s) Ôºù q - p + (1/2 * s + r)
  III = abs (q - p) + abs (r + 1/2 * s) Ôºù‚ü® ap (_+ abs (r + 1/2 * s)) e‚ÇÅ        ‚ü©
        q - p + abs (r + 1/2 * s)       Ôºù‚ü® ap (q - p +_) e‚ÇÇ                    ‚ü©
        q - p + (r + 1/2 * s)           Ôºù‚ü® ap (q - p +_) (‚Ñö+-comm r (1/2 * s)) ‚ü©
        q - p + (1/2 * s + r)           ‚àé

  IV : abs (q - p + (r + 1/2 * s)) ‚â§ q - p + (1/2 * s + r)
  IV = transport (abs (q - p + (r + 1/2 * s)) ‚â§_) III II

  V : q - p + (1/2 * s + r) < 1/2 * s + (1/2 * s + r)
  V = ‚Ñö<-addition-preserves-order (q - p) (1/2 * s) (1/2 * s + r) l‚ÇÅ

  VI : abs (q - p + (r + 1/2 * s)) < 1/2 * s + (1/2 * s + r)
  VI = ‚Ñö‚â§-<-trans
        (abs (q - p + (r + 1/2 * s)))
         (q - p + (1/2 * s + r))
          (1/2 * s + (1/2 * s + r))
           IV V

  VII : 1/2 * s + (1/2 * s + r) Ôºù r + s
  VII = 1/2 * s + (1/2 * s + r) Ôºù‚ü® ‚Ñö+-assoc (1/2 * s) (1/2 * s) r ‚Åª¬π ‚ü©
        1/2 * s + 1/2 * s + r   Ôºù‚ü® ap (_+ r) (‚Ñö-into-half' s ‚Åª¬π)     ‚ü©
        s + r                   Ôºù‚ü® ‚Ñö+-comm s r                       ‚ü©
        r + s                   ‚àé

  Œ≥ : abs (p - r - 1/2 * s - q) < r + s
  Œ≥ = transport‚ÇÇ _<_ (I ‚Åª¬π) VII VI

cal-lim-lemma‚ÇÉ : (p q r s : ‚Ñö)
               ‚Üí p < q
               ‚Üí q - p < 1/2 * s
               ‚Üí 0‚Ñö < r
               ‚Üí 0‚Ñö < s
               ‚Üí abs (p - (q + r + 1/2 * s)) < r + s
cal-lim-lemma‚ÇÉ p q r s p<q l‚ÇÅ 0<r 0<s = Œ≥
 where
  s' = 1/2 * s

  I : abs (p - r - s' - q) < r + s
  I = cal-lim-lemma‚ÇÇ p q r s p<q l‚ÇÅ 0<r 0<s

  II : p - r - s' - q Ôºù p - (q + r + s')
  II = p - r - s' - q         Ôºù‚ü® ‚Ñö+-assoc (p - r) (- s') (- q)         ‚ü©
       p - r + ((- s') - q)   Ôºù‚ü® ap (p - r +_) (‚Ñö-minus-dist s' q)     ‚ü©
       p - r - (s' + q)       Ôºù‚ü® ap (Œª ‚ñ† ‚Üí p - r - ‚ñ†) (‚Ñö+-comm s' q)   ‚ü©
       p - r - (q + s')       Ôºù‚ü® ‚Ñö+-assoc p (- r) (- (q + s'))         ‚ü©
       p + ((- r) - (q + s')) Ôºù‚ü® ap (p +_) (‚Ñö-minus-dist r (q + s'))   ‚ü©
       p - (r + (q + s'))     Ôºù‚ü® ap (Œª ‚ñ† ‚Üí p - ‚ñ†) (‚Ñö+-assoc r q s' ‚Åª¬π) ‚ü©
       p - (r + q + s')       Ôºù‚ü® ap (Œª ‚ñ† ‚Üí p - (‚ñ† + s')) (‚Ñö+-comm r q) ‚ü©
       p - (q + r + s')       ‚àé

  III : abs (p - r - s' - q) Ôºù abs (p - (q + r + s'))
  III = ap abs II

  Œ≥ : abs (p - (q + r + s')) < r + s
  Œ≥ = transport (_< r + s) III I

cal-L cal-R : (ca : cauchy-approximation) ‚Üí ùìü ‚Ñö
cal-L (f , _) p
 = (‚àÉ (Œµ‚ÇÅ‚Çä@(Œµ‚ÇÅ , 0<Œµ‚ÇÅ) , (Œµ‚ÇÇ , _)) Íûâ ‚Ñö‚Çä √ó ‚Ñö‚Çä , (p + Œµ‚ÇÅ + Œµ‚ÇÇ) < f Œµ‚ÇÅ‚Çä)
 , ‚àÉ-is-prop

cal-R (f , _) q
 = (‚àÉ (Œµ‚ÇÅ‚Çä@(Œµ‚ÇÅ , 0<Œµ‚ÇÅ) , (Œµ‚ÇÇ , _)) Íûâ ‚Ñö‚Çä √ó ‚Ñö‚Çä , f Œµ‚ÇÅ‚Çä < q - Œµ‚ÇÅ - Œµ‚ÇÇ)
 , ‚àÉ-is-prop

cal-il : (ca : cauchy-approximation) ‚Üí inhabited-left (cal-L ca)
cal-il (f , Œ±) = ‚à•‚à•-functor Œ≥ (inhabited-from-real-L (f 1‚Ñö‚Çä))
 where
  I : (p : ‚Ñö) ‚Üí p Ôºù p - 1‚Ñö - 1‚Ñö + 1‚Ñö + 1‚Ñö
  I p = ‚Ñö-add-zero-twice p 1‚Ñö

  II : (p : ‚Ñö) ‚Üí p < f 1‚Ñö‚Çä ‚Üí p - 1‚Ñö - 1‚Ñö + 1‚Ñö + 1‚Ñö < f 1‚Ñö‚Çä
  II p p<f1 = transport (_< f 1‚Ñö‚Çä) (I p) p<f1

  Œ≥ : Œ£ p Íûâ ‚Ñö , p < f 1‚Ñö‚Çä
    ‚Üí Œ£ p Íûâ ‚Ñö , p ‚àà cal-L (f , Œ±)
  Œ≥ (p , p<f1) = p - 1‚Ñö - 1‚Ñö , ‚à£ (1‚Ñö‚Çä , 1‚Ñö‚Çä) , II p p<f1 ‚à£

cal-ir : (ca : cauchy-approximation) ‚Üí inhabited-right (cal-R ca)
cal-ir (f , Œ±) = ‚à•‚à•-functor Œ≥ (inhabited-from-real-R (f 1‚Ñö‚Çä))
 where
  I : (q : ‚Ñö) ‚Üí q Ôºù q + 1‚Ñö + 1‚Ñö - 1‚Ñö - 1‚Ñö
  I q = ‚Ñö-add-zero-twice' q 1‚Ñö

  II : (q : ‚Ñö) ‚Üí f 1‚Ñö‚Çä < q ‚Üí f 1‚Ñö‚Çä < q + 1‚Ñö + 1‚Ñö - 1‚Ñö - 1‚Ñö
  II q f1<q = transport (f 1‚Ñö‚Çä <_) (I q) f1<q

  Œ≥ : Œ£ q Íûâ ‚Ñö , f 1‚Ñö‚Çä < q
    ‚Üí Œ£ q Íûâ ‚Ñö , q ‚àà cal-R (f , Œ±)
  Œ≥ (q , f1<q) = q + 1‚Ñö + 1‚Ñö , ‚à£ (1‚Ñö‚Çä , 1‚Ñö‚Çä) , II q f1<q ‚à£

cal-rl : (ca : cauchy-approximation) ‚Üí rounded-left (cal-L ca)
cal-rl (f , Œ±) p = ‚à•‚à•-functor Œ≥‚ÇÅ , ‚à•‚à•-rec ‚àÉ-is-prop Œ≥‚ÇÇ
 where
  L = cal-L (f , Œ±)

  Œ≥‚ÇÅ : Œ£ (Œµ‚ÇÅ‚Çä@(Œµ‚ÇÅ , 0<Œµ‚ÇÅ) , (Œµ‚ÇÇ , _)) Íûâ ‚Ñö‚Çä √ó ‚Ñö‚Çä , (p + Œµ‚ÇÅ + Œµ‚ÇÇ) < f Œµ‚ÇÅ‚Çä
     ‚Üí Œ£ q Íûâ ‚Ñö , p < q √ó q ‚àà L
  Œ≥‚ÇÅ ((Œµ‚ÇÅ‚Çä@(Œµ‚ÇÅ , 0<Œµ‚ÇÅ) , (Œµ‚ÇÇ , 0<Œµ‚ÇÇ)) , l) = p + Œµ‚ÇÉ , Œ≥ , Œ≥'
   where
    Œµ‚ÇÉ = 1/2 * Œµ‚ÇÇ
    0<Œµ‚ÇÉ = halving-preserves-order' Œµ‚ÇÇ 0<Œµ‚ÇÇ

    Œ≥ : p < p + Œµ‚ÇÉ
    Œ≥ = ‚Ñö<-addition-preserves-order'' p (1/2 * Œµ‚ÇÇ) 0<Œµ‚ÇÉ

    I : p + Œµ‚ÇÅ + Œµ‚ÇÇ Ôºù p + Œµ‚ÇÉ + Œµ‚ÇÅ + Œµ‚ÇÉ
    I = p + Œµ‚ÇÅ + Œµ‚ÇÇ        Ôºù‚ü® ‚Ñö+-rearrange p Œµ‚ÇÅ Œµ‚ÇÇ                    ‚ü©
        p + Œµ‚ÇÇ + Œµ‚ÇÅ        Ôºù‚ü® ap (Œª - ‚Üí p + - + Œµ‚ÇÅ) (‚Ñö-into-half' Œµ‚ÇÇ) ‚ü©
        p + (Œµ‚ÇÉ + Œµ‚ÇÉ) + Œµ‚ÇÅ Ôºù‚ü® ap (_+ Œµ‚ÇÅ) (‚Ñö+-assoc p Œµ‚ÇÉ Œµ‚ÇÉ ‚Åª¬π)        ‚ü©
        p + Œµ‚ÇÉ + Œµ‚ÇÉ + Œµ‚ÇÅ   Ôºù‚ü® ‚Ñö+-rearrange (p + Œµ‚ÇÉ) Œµ‚ÇÅ Œµ‚ÇÉ ‚Åª¬π          ‚ü©
        p + Œµ‚ÇÉ + Œµ‚ÇÅ + Œµ‚ÇÉ   ‚àé

    II : p + Œµ‚ÇÉ + Œµ‚ÇÅ + Œµ‚ÇÉ < f Œµ‚ÇÅ‚Çä
    II = transport (_< f Œµ‚ÇÅ‚Çä) I l

    Œ≥' : (p + Œµ‚ÇÉ) ‚àà L
    Œ≥' = ‚à£ (Œµ‚ÇÅ‚Çä , Œµ‚ÇÉ , 0<Œµ‚ÇÉ) , II ‚à£

  Œ≥‚ÇÇ : Œ£ q Íûâ ‚Ñö , p < q √ó q ‚àà L
     ‚Üí ‚àÉ (Œµ‚ÇÅ‚Çä@(Œµ‚ÇÅ , 0<Œµ‚ÇÅ) , (Œµ‚ÇÇ , _)) Íûâ ‚Ñö‚Çä √ó ‚Ñö‚Çä , (p + Œµ‚ÇÅ + Œµ‚ÇÇ) < f Œµ‚ÇÅ‚Çä
  Œ≥‚ÇÇ (q , p<q , l) = ‚à•‚à•-functor Œ≥ l
   where
    Œ≥ : Œ£ (Œµ‚ÇÅ‚Çä@(Œµ‚ÇÅ , 0<Œµ‚ÇÅ) , (Œµ‚ÇÇ , _)) Íûâ ‚Ñö‚Çä √ó ‚Ñö‚Çä , (q + Œµ‚ÇÅ + Œµ‚ÇÇ) < f Œµ‚ÇÅ‚Çä
      ‚Üí Œ£ (Œµ‚ÇÅ‚Çä@(Œµ‚ÇÅ , 0<Œµ‚ÇÅ) , (Œµ‚ÇÇ , _)) Íûâ ‚Ñö‚Çä √ó ‚Ñö‚Çä , (p + Œµ‚ÇÅ + Œµ‚ÇÇ) < f Œµ‚ÇÅ‚Çä
    Œ≥ ((Œµ‚ÇÅ‚Çä@(Œµ‚ÇÅ , 0<Œµ‚ÇÅ) , (Œµ‚ÇÇ , 0<Œµ‚ÇÇ)) , l') = (Œµ‚ÇÅ‚Çä , Œµ‚ÇÑ , 0<Œµ‚ÇÑ) , Œ≥'
     where
      Œµ‚ÇÉ = q - p
      0<Œµ‚ÇÉ = ‚Ñö<-difference-positive p q p<q
      Œµ‚ÇÑ = Œµ‚ÇÉ + Œµ‚ÇÇ
      0<Œµ‚ÇÑ = ‚Ñö<-adding-zero Œµ‚ÇÉ Œµ‚ÇÇ 0<Œµ‚ÇÉ 0<Œµ‚ÇÇ

      I : q + Œµ‚ÇÅ + Œµ‚ÇÇ Ôºù p + Œµ‚ÇÅ + ((q - p) + Œµ‚ÇÇ)
      I = cale-rl-lemma p q Œµ‚ÇÅ Œµ‚ÇÇ

      Œ≥' : p + Œµ‚ÇÅ + Œµ‚ÇÑ < f Œµ‚ÇÅ‚Çä
      Œ≥' = transport (_< f Œµ‚ÇÅ‚Çä) I l'

cal-rr : (ca : cauchy-approximation) ‚Üí rounded-right (cal-R ca)
cal-rr (f , Œ±) q = ‚à•‚à•-functor Œ≥‚ÇÅ , ‚à•‚à•-rec ‚àÉ-is-prop Œ≥‚ÇÇ
 where
  R = cal-R (f , Œ±)

  Œ≥‚ÇÅ : Œ£ (Œµ‚ÇÅ‚Çä@(Œµ‚ÇÅ , 0<Œµ‚ÇÅ) , (Œµ‚ÇÇ , _)) Íûâ ‚Ñö‚Çä √ó ‚Ñö‚Çä , f Œµ‚ÇÅ‚Çä < q - Œµ‚ÇÅ - Œµ‚ÇÇ
     ‚Üí Œ£ p Íûâ ‚Ñö , p < q √ó p ‚àà R
  Œ≥‚ÇÅ ((Œµ‚ÇÅ‚Çä@(Œµ‚ÇÅ , 0<Œµ‚ÇÅ) , (Œµ‚ÇÇ , 0<Œµ‚ÇÇ)) , l) = q - Œµ‚ÇÉ , Œ≥ , Œ≥'
   where
    Œµ‚ÇÉ = 1/2 * Œµ‚ÇÇ
    0<Œµ‚ÇÉ = halving-preserves-order' Œµ‚ÇÇ 0<Œµ‚ÇÇ

    Œ≥ : q - Œµ‚ÇÉ < q
    Œ≥ = ‚Ñö<-subtraction-preserves-order q Œµ‚ÇÉ 0<Œµ‚ÇÉ

    I : q - Œµ‚ÇÅ - Œµ‚ÇÇ Ôºù q - Œµ‚ÇÉ - Œµ‚ÇÅ - Œµ‚ÇÉ
    I = q - Œµ‚ÇÅ - Œµ‚ÇÇ            Ôºù‚ü® ‚Ñö+-rearrange q (- Œµ‚ÇÅ) (- Œµ‚ÇÇ)             ‚ü©
        q - Œµ‚ÇÇ - Œµ‚ÇÅ            Ôºù‚ü® ap (Œª Œ± ‚Üí q - Œ± - Œµ‚ÇÅ) (‚Ñö-into-half' Œµ‚ÇÇ)  ‚ü©
        q - (Œµ‚ÇÉ + Œµ‚ÇÉ) - Œµ‚ÇÅ     Ôºù‚ü® ap (Œª Œ± ‚Üí q + Œ± - Œµ‚ÇÅ) i                  ‚ü©
        q + ((- Œµ‚ÇÉ) - Œµ‚ÇÉ) - Œµ‚ÇÅ Ôºù‚ü® ap (_- Œµ‚ÇÅ) (‚Ñö+-assoc q (- Œµ‚ÇÉ) (- Œµ‚ÇÉ) ‚Åª¬π) ‚ü©
        q - Œµ‚ÇÉ - Œµ‚ÇÉ - Œµ‚ÇÅ       Ôºù‚ü® ‚Ñö+-rearrange (q - Œµ‚ÇÉ) (- Œµ‚ÇÅ) (- Œµ‚ÇÉ) ‚Åª¬π   ‚ü©
        q - Œµ‚ÇÉ - Œµ‚ÇÅ - Œµ‚ÇÉ       ‚àé
     where
      i : - (Œµ‚ÇÉ + Œµ‚ÇÉ) Ôºù (- Œµ‚ÇÉ) - Œµ‚ÇÉ
      i = ‚Ñö-minus-dist Œµ‚ÇÉ Œµ‚ÇÉ ‚Åª¬π

    II : f Œµ‚ÇÅ‚Çä < q - Œµ‚ÇÉ - Œµ‚ÇÅ - Œµ‚ÇÉ
    II = transport (f Œµ‚ÇÅ‚Çä <_) I l

    Œ≥' : (q - Œµ‚ÇÉ) ‚àà R
    Œ≥' = ‚à£ (Œµ‚ÇÅ‚Çä , Œµ‚ÇÉ , 0<Œµ‚ÇÉ) , II ‚à£

  Œ≥‚ÇÇ : Œ£ p Íûâ ‚Ñö , p < q √ó p ‚àà R
     ‚Üí ‚àÉ (Œµ‚ÇÅ‚Çä@(Œµ‚ÇÅ , 0<Œµ‚ÇÅ) , (Œµ‚ÇÇ , _)) Íûâ ‚Ñö‚Çä √ó ‚Ñö‚Çä , f Œµ‚ÇÅ‚Çä < q - Œµ‚ÇÅ - Œµ‚ÇÇ
  Œ≥‚ÇÇ (p , p<q , l) = ‚à•‚à•-functor Œ≥ l
   where
    Œ≥ : Œ£ (Œµ‚ÇÅ‚Çä@(Œµ‚ÇÅ , 0<Œµ‚ÇÅ) , (Œµ‚ÇÇ , _)) Íûâ ‚Ñö‚Çä √ó ‚Ñö‚Çä , f Œµ‚ÇÅ‚Çä < p - Œµ‚ÇÅ - Œµ‚ÇÇ
      ‚Üí Œ£ (Œµ‚ÇÅ‚Çä@(Œµ‚ÇÅ , 0<Œµ‚ÇÅ) , (Œµ‚ÇÇ , _)) Íûâ ‚Ñö‚Çä √ó ‚Ñö‚Çä , f Œµ‚ÇÅ‚Çä < q - Œµ‚ÇÅ - Œµ‚ÇÇ
    Œ≥ ((Œµ‚ÇÅ‚Çä@(Œµ‚ÇÅ , 0<Œµ‚ÇÅ) , (Œµ‚ÇÇ , 0<Œµ‚ÇÇ)) , l') = (Œµ‚ÇÅ‚Çä , Œµ‚ÇÑ , 0<Œµ‚ÇÑ) , Œ≥'
     where
      Œµ‚ÇÉ = q - p
      0<Œµ‚ÇÉ = ‚Ñö<-difference-positive p q p<q
      Œµ‚ÇÑ = Œµ‚ÇÉ + Œµ‚ÇÇ
      0<Œµ‚ÇÑ = ‚Ñö<-adding-zero Œµ‚ÇÉ Œµ‚ÇÇ 0<Œµ‚ÇÉ 0<Œµ‚ÇÇ

      I : p - q - Œµ‚ÇÇ Ôºù - Œµ‚ÇÑ
      I = p - q - Œµ‚ÇÇ       Ôºù‚ü® ap (_- Œµ‚ÇÇ) (‚Ñö-minus-dist'' p q) ‚ü©
          (- (q - p)) - Œµ‚ÇÇ Ôºù‚ü® ‚Ñö-minus-dist (q - p) Œµ‚ÇÇ         ‚ü©
          - Œµ‚ÇÑ             ‚àé

      II : p - Œµ‚ÇÅ - Œµ‚ÇÇ Ôºù q - Œµ‚ÇÅ - Œµ‚ÇÑ
      II = p - Œµ‚ÇÅ - Œµ‚ÇÇ           Ôºù‚ü® cale-rl-lemma q p (- Œµ‚ÇÅ) (- Œµ‚ÇÇ) ‚ü©
           q - Œµ‚ÇÅ + (p - q - Œµ‚ÇÇ) Ôºù‚ü® ap (q - Œµ‚ÇÅ +_) I                ‚ü©
           q - Œµ‚ÇÅ - Œµ‚ÇÑ           ‚àé

      Œ≥' : f Œµ‚ÇÅ‚Çä < q - Œµ‚ÇÅ - Œµ‚ÇÑ
      Œ≥' = transport (f Œµ‚ÇÅ‚Çä <_) II l'

cal-lo : (ca : cauchy-approximation) ‚Üí located (cal-L ca) (cal-R ca)
cal-lo (f , Œ±) p q p<q = ‚à•‚à•-functor Œ≥ II
   where
    Œµ‚ÇÅ = q - p
    0<Œµ‚ÇÅ = ‚Ñö<-difference-positive p q p<q

    Œµ‚ÇÇ = 1/5 * Œµ‚ÇÅ
    0<Œµ‚ÇÇ = ‚Ñö<-pos-multiplication-preserves-order 1/5 Œµ‚ÇÅ 0<1/5 0<Œµ‚ÇÅ
    Œµ‚ÇÇ‚Çä = Œµ‚ÇÇ , 0<Œµ‚ÇÇ

    I : p + Œµ‚ÇÇ + Œµ‚ÇÇ < q - Œµ‚ÇÇ - Œµ‚ÇÇ
    I = cale-lo-lemma p q p<q

    II : (p + Œµ‚ÇÇ + Œµ‚ÇÇ < f Œµ‚ÇÇ‚Çä) ‚à® (f Œµ‚ÇÇ‚Çä < q - Œµ‚ÇÇ - Œµ‚ÇÇ)
    II = ‚Ñù-locatedness (f (Œµ‚ÇÇ , 0<Œµ‚ÇÇ)) (p + Œµ‚ÇÇ + Œµ‚ÇÇ) (q - Œµ‚ÇÇ - Œµ‚ÇÇ) I

    Œ≥ : (p + Œµ‚ÇÇ + Œµ‚ÇÇ < f Œµ‚ÇÇ‚Çä) ‚àî (f Œµ‚ÇÇ‚Çä < q - Œµ‚ÇÇ - Œµ‚ÇÇ)
      ‚Üí p ‚àà cal-L (f , Œ±) ‚àî q ‚àà cal-R (f , Œ±)
    Œ≥ (inl l) = inl ‚à£ ((Œµ‚ÇÇ , 0<Œµ‚ÇÇ) , (Œµ‚ÇÇ , 0<Œµ‚ÇÇ)) , l ‚à£
    Œ≥ (inr r) = inr ‚à£ ((Œµ‚ÇÇ , 0<Œµ‚ÇÇ) , (Œµ‚ÇÇ , 0<Œµ‚ÇÇ)) , r ‚à£

cal-di : (ca : cauchy-approximation) ‚Üí disjoint (cal-L ca) (cal-R ca)
cal-di (f , Œ±) = disjoint‚Üítrans L R (cal-lo (f , Œ±)) Œ≥
 where
  L = cal-L (f , Œ±)
  R = cal-R (f , Œ±)

  Œ≥ : (p : ‚Ñö) ‚Üí ¬¨ (p ‚àà L √ó p ‚àà R)
  Œ≥ p (p<y , y<p) = ‚à•‚à•-rec ùüò-is-prop Œ≥' (binary-choice p<y y<p)
   where
    Œ≥' : (Œ£ (Œµ‚ÇÅ‚Çä@(Œµ‚ÇÅ , 0<Œµ‚ÇÅ) , (Œµ‚ÇÇ , _)) Íûâ ‚Ñö‚Çä √ó ‚Ñö‚Çä , (p + Œµ‚ÇÅ + Œµ‚ÇÇ) < f Œµ‚ÇÅ‚Çä)
       √ó (Œ£ (Œµ‚ÇÉ‚Çä@(Œµ‚ÇÉ , 0<Œµ‚ÇÉ) , (Œµ‚ÇÑ , _)) Íûâ ‚Ñö‚Çä √ó ‚Ñö‚Çä , f Œµ‚ÇÉ‚Çä < (p - Œµ‚ÇÉ - Œµ‚ÇÑ))
       ‚Üí ùüò
    Œ≥' ( ((Œµ‚ÇÅ‚Çä@(Œµ‚ÇÅ , 0<Œµ‚ÇÅ) , (Œµ‚ÇÇ , 0<Œµ‚ÇÇ)) , l‚ÇÅ)
       , ((Œµ‚ÇÉ‚Çä@(Œµ‚ÇÉ , 0<Œµ‚ÇÉ) , (Œµ‚ÇÑ , 0<Œµ‚ÇÑ)) , l‚ÇÇ)) = Œ≥‚ÇÇ
     where
      Œ≥‚ÇÅ : Œ£ (a , b) Íûâ ‚Ñö √ó ‚Ñö , (a < f (Œµ‚ÇÅ , 0<Œµ‚ÇÅ) < b)
                             √ó (a < f (Œµ‚ÇÉ , 0<Œµ‚ÇÉ) < b)
                             √ó abs (a - b) < Œµ‚ÇÅ + Œµ‚ÇÉ
         ‚Üí ùüò
      Œ≥‚ÇÅ ((a , b) , (l‚ÇÉ , l‚ÇÑ) , (l‚ÇÖ , l‚ÇÜ) , l‚Çá) = Œ≥''
       where
        Œµ‚ÇÖ = Œµ‚ÇÇ + Œµ‚ÇÑ
        0<Œµ‚ÇÖ = ‚Ñö<-adding-zero Œµ‚ÇÇ Œµ‚ÇÑ 0<Œµ‚ÇÇ 0<Œµ‚ÇÑ

        a<b : a < b
        a<b = disjoint-from-real (f Œµ‚ÇÅ‚Çä) a b (l‚ÇÉ , l‚ÇÑ)

        I : p + Œµ‚ÇÅ + Œµ‚ÇÇ < b
        I = disjoint-from-real (f Œµ‚ÇÅ‚Çä) (p + Œµ‚ÇÅ + Œµ‚ÇÇ) b (l‚ÇÅ , l‚ÇÑ)

        II : a < p - Œµ‚ÇÉ - Œµ‚ÇÑ
        II = disjoint-from-real (f Œµ‚ÇÉ‚Çä) a (p - Œµ‚ÇÉ - Œµ‚ÇÑ) (l‚ÇÖ , l‚ÇÇ)

        III : - (p - Œµ‚ÇÉ - Œµ‚ÇÑ) < - a
        III = ‚Ñö<-swap a (p - Œµ‚ÇÉ - Œµ‚ÇÑ) II

        IV : p + Œµ‚ÇÅ + Œµ‚ÇÇ - (p - Œµ‚ÇÉ - Œµ‚ÇÑ) < b - a
        IV = ‚Ñö<-adding (p + Œµ‚ÇÅ + Œµ‚ÇÇ) b (- (p - Œµ‚ÇÉ - Œµ‚ÇÑ)) (- a) I III

        V : 0‚Ñö < b - a
        V = ‚Ñö<-difference-positive a b a<b

        VI : abs (a - b) Ôºù b - a
        VI = ‚Ñö<-to-abs' a b a<b

        VII : b - a < Œµ‚ÇÅ + Œµ‚ÇÉ
        VII = transport (_< Œµ‚ÇÅ + Œµ‚ÇÉ) VI l‚Çá

        VIII : p + Œµ‚ÇÅ + Œµ‚ÇÇ - (p - Œµ‚ÇÉ - Œµ‚ÇÑ) < Œµ‚ÇÅ + Œµ‚ÇÉ
        VIII = ‚Ñö<-trans (p + Œµ‚ÇÅ + Œµ‚ÇÇ - (p - Œµ‚ÇÉ - Œµ‚ÇÑ)) (b - a) (Œµ‚ÇÅ + Œµ‚ÇÉ) IV VII

        IX : p + Œµ‚ÇÅ + Œµ‚ÇÇ - (p - Œµ‚ÇÉ - Œµ‚ÇÑ) Ôºù Œµ‚ÇÇ + Œµ‚ÇÑ + (Œµ‚ÇÅ + Œµ‚ÇÉ)
        IX = cale-di-lemma‚ÇÅ p Œµ‚ÇÅ Œµ‚ÇÇ Œµ‚ÇÉ Œµ‚ÇÑ

        X : Œµ‚ÇÇ + Œµ‚ÇÑ + (Œµ‚ÇÅ + Œµ‚ÇÉ) < Œµ‚ÇÅ + Œµ‚ÇÉ
        X = transport (_< Œµ‚ÇÅ + Œµ‚ÇÉ) IX VIII

        XI : Œµ‚ÇÇ + Œµ‚ÇÑ < 0‚Ñö
        XI = ‚Ñö<-subtraction-order' (Œµ‚ÇÇ + Œµ‚ÇÑ) (Œµ‚ÇÅ + Œµ‚ÇÉ) X

        XII : 0‚Ñö < 0‚Ñö
        XII = ‚Ñö<-trans 0‚Ñö (Œµ‚ÇÇ + Œµ‚ÇÑ) 0‚Ñö 0<Œµ‚ÇÖ XI

        Œ≥'' : ùüò
        Œ≥'' = ‚Ñö<-irrefl 0‚Ñö XII

      Œ≥‚ÇÇ : ùüò
      Œ≥‚ÇÇ = ‚à•‚à•-rec ùüò-is-prop Œ≥‚ÇÅ (Œ± Œµ‚ÇÅ‚Çä Œµ‚ÇÉ‚Çä)

ca-limit : (ca : cauchy-approximation) ‚Üí ‚Ñù
ca-limit ca = (L , R) , il , ir , rl , rr , di , lo
 where
  L = cal-L ca
  R = cal-R ca

  il : inhabited-left L
  il = cal-il ca

  ir : inhabited-right R
  ir = cal-ir ca

  rl : rounded-left L
  rl = cal-rl ca

  rr : rounded-right R
  rr = cal-rr ca

  lo : located L R
  lo = cal-lo ca

  di : disjoint L R
  di = cal-di ca

ca-limit-is-limit : (ca : cauchy-approximation) ‚Üí cauchy-approximation-limit ca
ca-limit-is-limit (f , Œ±) = y , y-is-limit
 where
  y = ca-limit (f , Œ±)

  y-is-limit : (Œµ‚ÇÅ Œµ‚ÇÇ : ‚Ñö‚Çä) ‚Üí B-‚Ñù (f Œµ‚ÇÅ) y (Œµ‚ÇÅ ‚Ñö‚Çä+ Œµ‚ÇÇ)
  y-is-limit Œµ‚ÇÅ‚Çä@(Œµ‚ÇÅ , 0<Œµ‚ÇÅ) Œµ‚ÇÇ‚Çä@(Œµ‚ÇÇ , 0<Œµ‚ÇÇ) = ‚à•‚à•-rec ‚àÉ-is-prop Œ≥ I
   where
    Œµ‚ÇÉ = 1/2 * Œµ‚ÇÇ
    0<Œµ‚ÇÉ = halving-preserves-order' Œµ‚ÇÇ 0<Œµ‚ÇÇ

    Œµ‚ÇÑ = Œµ‚ÇÅ + Œµ‚ÇÉ
    0<Œµ‚ÇÑ = ‚Ñö<-adding-zero Œµ‚ÇÅ Œµ‚ÇÉ 0<Œµ‚ÇÅ 0<Œµ‚ÇÉ

    I : ‚àÉ (p , q) Íûâ ‚Ñö √ó ‚Ñö , (p < f Œµ‚ÇÅ‚Çä < q)
                          √ó (0‚Ñö < q - p < Œµ‚ÇÉ)
    I = ‚Ñù-arithmetically-located' (f Œµ‚ÇÅ‚Çä) (Œµ‚ÇÉ , 0<Œµ‚ÇÉ)

    Œ≥ : Œ£ (p , q) Íûâ ‚Ñö √ó ‚Ñö , (p < f Œµ‚ÇÅ‚Çä < q)
                          √ó (0‚Ñö < q - p < Œµ‚ÇÉ)
      ‚Üí ‚àÉ (p , r) Íûâ ‚Ñö √ó ‚Ñö , (p < (f Œµ‚ÇÅ‚Çä) < r)
                          √ó (p < y < r)
                          √ó B-‚Ñö p r (Œµ‚ÇÅ‚Çä ‚Ñö‚Çä+ Œµ‚ÇÇ‚Çä)
    Œ≥ ((p , q) , (l‚ÇÅ , l‚ÇÇ) , (l‚ÇÉ , l‚ÇÑ)) = ‚à•‚à•-functor Œ≥‚ÇÅ Œ≥‚ÇÇ
     where
      p<q : p < q
      p<q = disjoint-from-real (f Œµ‚ÇÅ‚Çä) p q (l‚ÇÅ , l‚ÇÇ)

      II : q < q + Œµ‚ÇÅ + Œµ‚ÇÉ
      II = ‚Ñö-addition-order q Œµ‚ÇÅ Œµ‚ÇÉ 0<Œµ‚ÇÑ

      III : f Œµ‚ÇÅ‚Çä < q + Œµ‚ÇÅ + Œµ‚ÇÉ - Œµ‚ÇÅ - Œµ‚ÇÉ
      III = transport (f Œµ‚ÇÅ‚Çä <_) (‚Ñö-add-zero-twice'' q Œµ‚ÇÅ Œµ‚ÇÉ) l‚ÇÇ

      IV : p - Œµ‚ÇÅ - Œµ‚ÇÉ + Œµ‚ÇÅ + Œµ‚ÇÉ < f Œµ‚ÇÅ‚Çä
      IV = transport (_< f Œµ‚ÇÅ‚Çä) (‚Ñö-add-zero-twice''' p Œµ‚ÇÅ Œµ‚ÇÉ) l‚ÇÅ

      V : (p - Œµ‚ÇÅ - Œµ‚ÇÉ) <‚Ñö p
      V = ‚Ñö-subtraction-order p Œµ‚ÇÅ Œµ‚ÇÉ 0<Œµ‚ÇÑ

      l‚ÇÖ : f Œµ‚ÇÅ‚Çä < q + Œµ‚ÇÅ + Œµ‚ÇÉ
      l‚ÇÖ = use-rounded-real-R (f Œµ‚ÇÅ‚Çä) q (q + Œµ‚ÇÅ + Œµ‚ÇÉ) II l‚ÇÇ

      l‚ÇÜ : y < q + Œµ‚ÇÅ + Œµ‚ÇÉ
      l‚ÇÜ = ‚à£ (Œµ‚ÇÅ‚Çä , Œµ‚ÇÉ , 0<Œµ‚ÇÉ) , III ‚à£

      l‚Çá : p - Œµ‚ÇÅ - Œµ‚ÇÉ < f Œµ‚ÇÅ‚Çä
      l‚Çá = use-rounded-real-L (f Œµ‚ÇÅ‚Çä) (p - Œµ‚ÇÅ - Œµ‚ÇÉ) p V l‚ÇÅ

      l‚Çà : p - Œµ‚ÇÅ - Œµ‚ÇÉ < y
      l‚Çà = ‚à£ (Œµ‚ÇÅ‚Çä , Œµ‚ÇÉ , 0<Œµ‚ÇÉ) , IV ‚à£

      VI : Œµ‚ÇÅ + Œµ‚ÇÉ < Œµ‚ÇÅ + Œµ‚ÇÇ
      VI = cal-lim-lemma‚ÇÅ Œµ‚ÇÅ Œµ‚ÇÇ 0<Œµ‚ÇÇ

      Œ≥' : abs (p - Œµ‚ÇÅ - Œµ‚ÇÉ - q) < Œµ‚ÇÅ + Œµ‚ÇÇ
      Œ≥' = cal-lim-lemma‚ÇÇ p q Œµ‚ÇÅ Œµ‚ÇÇ p<q l‚ÇÑ 0<Œµ‚ÇÅ 0<Œµ‚ÇÇ

      Œ≥'' : abs (p - (q + Œµ‚ÇÅ + Œµ‚ÇÉ)) < Œµ‚ÇÅ + Œµ‚ÇÇ
      Œ≥'' = cal-lim-lemma‚ÇÉ p q Œµ‚ÇÅ Œµ‚ÇÇ p<q l‚ÇÑ 0<Œµ‚ÇÅ 0<Œµ‚ÇÇ

      Œ≥‚ÇÅ : (p < y) ‚àî (y < q)
         ‚Üí Œ£ (p , r) Íûâ ‚Ñö √ó ‚Ñö , (p < f Œµ‚ÇÅ‚Çä < r)
                             √ó (p < y < r)
                             √ó B-‚Ñö p r (Œµ‚ÇÅ‚Çä ‚Ñö‚Çä+ Œµ‚ÇÇ‚Çä)
      Œ≥‚ÇÅ (inl p<y) = (p , q + Œµ‚ÇÅ + Œµ‚ÇÉ) , (l‚ÇÅ , l‚ÇÖ) , (p<y , l‚ÇÜ) , Œ≥''
      Œ≥‚ÇÅ (inr y<q) = (p - Œµ‚ÇÅ - Œµ‚ÇÉ , q) , (l‚Çá , l‚ÇÇ) , (l‚Çà , y<q) , Œ≥'

      Œ≥‚ÇÇ : (p < y) ‚à® (y < q)
      Œ≥‚ÇÇ = ‚Ñù-locatedness y p q p<q

‚Ñù-CauchySequence : (S : ‚Ñï ‚Üí ‚Ñù) ‚Üí ùì§‚ÇÄ Ãá
‚Ñù-CauchySequence = cauchy-sequence ‚Ñù ‚Ñù-metric-space

Œ¥c‚¶Ö‚¶Ü : (S : ‚Ñï ‚Üí ‚Ñù)
     ‚Üí (RCS : ‚Ñù-CauchySequence S)
     ‚Üí ‚Ñö‚Çä ‚Üí ‚Ñï
Œ¥c‚¶Ö‚¶Ü S RCS Œµ = pr‚ÇÅ (RCS Œµ)

Œ¥c‚¶Ö‚¶Ü-ic : (S : ‚Ñï ‚Üí ‚Ñù)
        ‚Üí (RCS : ‚Ñù-CauchySequence S)
        ‚Üí (Œµ : ‚Ñö‚Çä) ‚Üí (m n : ‚Ñï)
        ‚Üí let Œ¥ = Œ¥c‚¶Ö‚¶Ü S RCS Œµ
          in Œ¥ ‚â§ m ‚Üí Œ¥ ‚â§ n ‚Üí B-‚Ñù (S m) (S n) Œµ
Œ¥c‚¶Ö‚¶Ü-ic S RCS Œµ = pr‚ÇÇ (RCS Œµ)

modulus-convergent-property : (S : ‚Ñï ‚Üí ‚Ñù)
 ‚Üí (RCS : ‚Ñù-CauchySequence S)
 ‚Üí (Œµ‚ÇÅ Œµ‚ÇÇ : ‚Ñö‚Çä)
 ‚Üí let f = Œ¥c‚¶Ö‚¶Ü S RCS
   in B-‚Ñù (S (f (1/2* Œµ‚ÇÅ))) (S (f (1/2* Œµ‚ÇÇ))) (1/2* (Œµ‚ÇÅ ‚Ñö‚Çä+ Œµ‚ÇÇ))
modulus-convergent-property S RCS Œµ‚ÇÅ‚Çä@(Œµ‚ÇÅ , _) Œµ‚ÇÇ‚Çä@(Œµ‚ÇÇ , _) = Œ≥
 where
  M = Œ¥c‚¶Ö‚¶Ü S RCS (1/2* Œµ‚ÇÅ‚Çä)
  N = Œ¥c‚¶Ö‚¶Ü S RCS (1/2* Œµ‚ÇÇ‚Çä)

  L = ‚Ñïmax M N

  M‚â§M = ‚â§-refl M
  N‚â§N = ‚â§-refl N
  M‚â§L = max-‚â§-upper-bound M N
  N‚â§L = max-‚â§-upper-bound' N M

  I : B-‚Ñù (S M) (S L) (1/2* Œµ‚ÇÅ‚Çä)
  I = Œ¥c‚¶Ö‚¶Ü-ic S RCS (1/2* Œµ‚ÇÅ‚Çä) M L M‚â§M M‚â§L

  II : B-‚Ñù (S L) (S N) (1/2* Œµ‚ÇÇ‚Çä)
  II = Œ¥c‚¶Ö‚¶Ü-ic S RCS (1/2* Œµ‚ÇÇ‚Çä) L N N‚â§L N‚â§N

  III : B-‚Ñù (S M) (S N) ((1/2* Œµ‚ÇÅ‚Çä) ‚Ñö‚Çä+ (1/2* Œµ‚ÇÇ‚Çä))
  III = ‚Ñù-m4 (S M) (S L) (S N) (1/2* Œµ‚ÇÅ‚Çä) (1/2* Œµ‚ÇÇ‚Çä) I II

  IV : 1/2 * Œµ‚ÇÅ + 1/2 * Œµ‚ÇÇ Ôºù 1/2 * (Œµ‚ÇÅ + Œµ‚ÇÇ)
  IV = ‚Ñö-distributivity 1/2 Œµ‚ÇÅ Œµ‚ÇÇ ‚Åª¬π

  V : (1/2* Œµ‚ÇÅ‚Çä) ‚Ñö‚Çä+ (1/2* Œµ‚ÇÇ‚Çä) Ôºù 1/2* (Œµ‚ÇÅ‚Çä ‚Ñö‚Çä+ Œµ‚ÇÇ‚Çä)
  V = to-subtype-Ôºù (‚Ñö<-is-prop 0‚Ñö) IV

  Œ≥ : B-‚Ñù (S M) (S N) (1/2* (Œµ‚ÇÅ‚Çä ‚Ñö‚Çä+ Œµ‚ÇÇ‚Çä))
  Œ≥ = transport (B-‚Ñù (S M) (S N)) V III

‚Ñù-CauchySequenceConvergent : (S : ‚Ñï ‚Üí ‚Ñù) ‚Üí cauchy‚Üíconvergent ‚Ñù ‚Ñù-metric-space S
‚Ñù-CauchySequenceConvergent S RCS = Œ≥
 where
  Œ¥ = Œ¥c‚¶Ö‚¶Ü S RCS

  I : (Œµ‚ÇÅ Œµ‚ÇÇ : ‚Ñö‚Çä) ‚Üí B-‚Ñù (S (Œ¥ (1/2* Œµ‚ÇÅ))) (S (Œ¥ (1/2* Œµ‚ÇÇ))) (1/2* (Œµ‚ÇÅ ‚Ñö‚Çä+ Œµ‚ÇÇ))
  I = modulus-convergent-property S RCS

  II : (Œµ : ‚Ñö‚Çä) (m n : ‚Ñï) ‚Üí Œ¥ Œµ ‚â§ m ‚Üí Œ¥ Œµ ‚â§ n ‚Üí B-‚Ñù (S m) (S n) Œµ
  II = Œ¥c‚¶Ö‚¶Ü-ic S RCS

  S' : ‚Ñö‚Çä ‚Üí ‚Ñù
  S' Œµ = S (Œ¥ (1/2* Œµ))

  S'-is-ca : (Œµ‚ÇÅ Œµ‚ÇÇ : ‚Ñö‚Çä) ‚Üí B-‚Ñù (S' Œµ‚ÇÅ) (S' Œµ‚ÇÇ) (Œµ‚ÇÅ ‚Ñö‚Çä+ Œµ‚ÇÇ)
  S'-is-ca Œµ‚ÇÅ‚Çä@(Œµ‚ÇÅ , 0<Œµ‚ÇÅ) Œµ‚ÇÇ‚Çä@(Œµ‚ÇÇ , 0<Œµ‚ÇÇ) = Œ≥
   where
    l‚ÇÅ : 0‚Ñö < Œµ‚ÇÅ + Œµ‚ÇÇ
    l‚ÇÅ = ‚Ñö<-adding-zero Œµ‚ÇÅ Œµ‚ÇÇ 0<Œµ‚ÇÅ 0<Œµ‚ÇÇ

    l‚ÇÇ : 1/2 * (Œµ‚ÇÅ + Œµ‚ÇÇ) < (Œµ‚ÇÅ + Œµ‚ÇÇ)
    l‚ÇÇ = half-of-pos-is-less (Œµ‚ÇÅ + Œµ‚ÇÇ) l‚ÇÅ

    Œ≥ : B-‚Ñù (S' Œµ‚ÇÅ‚Çä) (S' Œµ‚ÇÇ‚Çä) (Œµ‚ÇÅ‚Çä ‚Ñö‚Çä+ Œµ‚ÇÇ‚Çä)
    Œ≥ = ‚Ñù-m3 (S' Œµ‚ÇÅ‚Çä) (S' Œµ‚ÇÇ‚Çä) (1/2* (Œµ‚ÇÅ‚Çä ‚Ñö‚Çä+ Œµ‚ÇÇ‚Çä)) (Œµ‚ÇÅ‚Çä ‚Ñö‚Çä+ Œµ‚ÇÇ‚Çä) l‚ÇÇ (I Œµ‚ÇÅ‚Çä Œµ‚ÇÇ‚Çä)

  ca : cauchy-approximation
  ca = S' , S'-is-ca

  y : ‚Ñù
  y = ca-limit ca

  f : (Œµ‚ÇÅ Œµ‚ÇÇ : ‚Ñö‚Çä) ‚Üí B-‚Ñù (S' Œµ‚ÇÅ) y (Œµ‚ÇÅ ‚Ñö‚Çä+ Œµ‚ÇÇ)
  f = pr‚ÇÇ (ca-limit-is-limit ca)

  y-is-limit : (Œµ : ‚Ñö‚Çä) ‚Üí Œ£ M Íûâ ‚Ñï , ((n : ‚Ñï) ‚Üí M < n ‚Üí B-‚Ñù y (S n) Œµ)
  y-is-limit Œµ@(Œµ' , 0<Œµ') = N , Œ≥'
   where
    N = Œ¥ (1/4* Œµ)

    Œ≥' : (n : ‚Ñï) ‚Üí N < n ‚Üí B-‚Ñù y (S n) Œµ
    Œ≥' n N<n = Œ≥''
     where
      e‚ÇÅ : 1/2 * (1/2 * Œµ') Ôºù 1/4 * Œµ'
      e‚ÇÅ = ‚Ñö*-assoc 1/2 1/2 Œµ' ‚Åª¬π

      e‚ÇÇ : 1/2* (1/2* Œµ) Ôºù 1/4 * Œµ' , _
      e‚ÇÇ = to-subtype-Ôºù (‚Ñö<-is-prop 0‚Ñö) e‚ÇÅ

      III : B-‚Ñù (S (Œ¥ (1/2* (1/2* Œµ)))) y ((1/2* Œµ) ‚Ñö‚Çä+ (1/4* Œµ))
      III = f (1/2* Œµ) (1/4* Œµ)

      IV : B-‚Ñù (S N) y ((1/2* Œµ) ‚Ñö‚Çä+ (1/4* Œµ))
      IV = transport (Œª ‚ñ† ‚Üí B-‚Ñù (S (Œ¥ ‚ñ†)) y ((1/2* Œµ) ‚Ñö‚Çä+ (1/4* Œµ))) e‚ÇÇ III

      V : B-‚Ñù y (S N) ((1/2* Œµ) ‚Ñö‚Çä+ (1/4* Œµ))
      V = ‚Ñù-m2 (S N) y ((1/2* Œµ) ‚Ñö‚Çä+ (1/4* Œµ)) IV

      N‚â§N = ‚â§-refl N
      N‚â§n = <-coarser-than-‚â§ N n N<n

      VI : B-‚Ñù (S N) (S n) (1/4* Œµ)
      VI = II (1/4* Œµ) N n N‚â§N N‚â§n

      VII : B-‚Ñù y (S n) (((1/2* Œµ) ‚Ñö‚Çä+ (1/4* Œµ)) ‚Ñö‚Çä+ (1/4* Œµ))
      VII = ‚Ñù-m4 y (S N) (S n) ((1/2* Œµ) ‚Ñö‚Çä+ (1/4* Œµ)) (1/4* Œµ) V VI

      VIII : 1/2 * Œµ' + 1/4 * Œµ' + 1/4 * Œµ' Ôºù Œµ'
      VIII = 1/2 * Œµ' + 1/4 * Œµ' + 1/4 * Œµ' Ôºù‚ü® i   ‚ü©
             3/4 * Œµ' + 1/4 * Œµ'            Ôºù‚ü® ii  ‚ü©
             1‚Ñö * Œµ'                        Ôºù‚ü® iii ‚ü©
             Œµ'                             ‚àé
       where
        i   = ap (_+ 1/4 * Œµ') (‚Ñö-distributivity' Œµ' 1/2 1/4 ‚Åª¬π)
        ii  = ‚Ñö-distributivity' Œµ' 3/4 1/4 ‚Åª¬π
        iii = ‚Ñö-mult-left-id Œµ'

      IX : (((1/2* Œµ) ‚Ñö‚Çä+ (1/4* Œµ)) ‚Ñö‚Çä+ (1/4* Œµ)) Ôºù Œµ
      IX = to-subtype-Ôºù (‚Ñö<-is-prop 0‚Ñö) VIII

      Œ≥'' : B-‚Ñù y (S n) (Œµ' , 0<Œµ')
      Œ≥'' = transport (B-‚Ñù y (S n)) IX VII

  Œ≥ : ‚àÉ y Íûâ ‚Ñù , ((Œµ : ‚Ñö‚Çä) ‚Üí Œ£ N Íûâ ‚Ñï , ((n : ‚Ñï) ‚Üí N < n ‚Üí B-‚Ñù y (S n) Œµ))
  Œ≥ = ‚à£ y , y-is-limit ‚à£

‚Ñù-complete-metric-space : complete-metric-space ‚Ñù
‚Ñù-complete-metric-space = ‚Ñù-metric-space , ‚Ñù-CauchySequenceConvergent

\end{code}
