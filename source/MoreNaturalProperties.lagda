Andrew Sneap - 27th April 2021

In this file I prove some common properties of Naturals Numbers and addition of Natural Numbers

\begin{code}

{-# OPTIONS --without-K --exact-split --safe #-}

open import SpartanMLTT renaming (_+_ to _‚àî_) --TypeTopology

open import NaturalsAddition --TypeTopology
open import NaturalNumbers-Properties --TypeTopology

module MoreNaturalProperties where

open NaturalsAddition

addition-right-succ : (x y : ‚Ñï) ‚Üí x + succ y ‚â° succ (x + y)
addition-right-succ x y = refl

succ-left : (x y : ‚Ñï) ‚Üí succ x + y ‚â° succ (x + y)
succ-left x = induction base step 
  where
    base : succ x + 0 ‚â° succ (x + 0)
    base = succ x + 0   ‚â°‚ü® refl         ‚ü©
           succ x       ‚â°‚ü® ap succ refl ‚ü© 
           succ (x + 0) ‚àé

    step : (k : ‚Ñï) ‚Üí succ x + k ‚â° succ (x + k) ‚Üí succ x + succ k ‚â° succ (x + succ k)
    step k IH = succ x + succ k     ‚â°‚ü® refl ‚ü©
                succ (succ x + k)   ‚â°‚ü® ap succ IH ‚ü©
                succ (succ (x + k)) ‚â°‚ü® refl ‚ü©
                succ (x + succ k)   ‚àé

+-comm : (x n : ‚Ñï) ‚Üí x + n ‚â° n + x
+-comm x = induction base step
  where
    base : x + 0 ‚â° 0 + x
    base = zero-left-neutral x ‚Åª¬π

    step : (k : ‚Ñï) ‚Üí x + k ‚â° k + x ‚Üí x + succ k ‚â° succ k + x
    step k IH = x + succ k    ‚â°‚ü® refl ‚ü©
                succ (x + k)  ‚â°‚ü® ap succ IH ‚ü©
                succ (k + x)  ‚â°‚ü® succ-left k x ‚Åª¬π ‚ü©
                succ k + x ‚àé

addition-left-cancellable : (x y z : ‚Ñï) ‚Üí z + x ‚â° z + y ‚Üí x ‚â° y
addition-left-cancellable x y = induction base step
 where
  base : 0 + x ‚â° 0 + y ‚Üí x ‚â° y
  base h = x      ‚â°‚ü® zero-left-neutral x ‚Åª¬π ‚ü©
           0 + x  ‚â°‚ü® h                      ‚ü©
           0 + y  ‚â°‚ü® zero-left-neutral y    ‚ü©
           y ‚àé

  step : (k : ‚Ñï)
       ‚Üí (k + x      ‚â° k + y      ‚Üí x ‚â° y)
       ‚Üí (succ k + x ‚â° succ k + y ‚Üí x ‚â° y)
  step k IH r = IH (succ-lc (lemma‚ÇÅ r))
   where
    lemma‚ÇÅ : succ k + x ‚â° succ k + y ‚Üí succ (k + x) ‚â° succ (k + y)
    lemma‚ÇÅ r = succ (k + x)           ‚â°‚ü® succ-left k x ‚Åª¬π ‚ü©
               succ k + x             ‚â°‚ü® r                         ‚ü©
               succ k + y             ‚â°‚ü® succ-left k y    ‚ü©
               succ (k + y) ‚àé        


addition-right-cancellable : (x y z : ‚Ñï) ‚Üí x + z ‚â° y + z ‚Üí x ‚â° y
addition-right-cancellable x y z r = addition-left-cancellable x y z lemma‚ÇÄ
 where
  lemma‚ÇÄ : z + x ‚â° z + y
  lemma‚ÇÄ = z + x      ‚â°‚ü® addition-commutativity z x ‚ü©
           x + z      ‚â°‚ü® r                          ‚ü©
           y + z      ‚â°‚ü® addition-commutativity y z ‚ü© 
           z + y ‚àé

sum-to-zero-gives-zero : (x y : ‚Ñï) ‚Üí x + y ‚â° 0 ‚Üí y ‚â° 0
sum-to-zero-gives-zero x 0        e = refl
sum-to-zero-gives-zero x (succ y) e = have positive-not-zero (x + y) which-contradicts e

succ-pred : (x : ‚Ñï) ‚Üí succ (pred (succ x)) ‚â° succ x
succ-pred x = refl

succ-pred' : (x : ‚Ñï) ‚Üí ¬¨ (x ‚â° 0) ‚Üí succ (pred x) ‚â° x
succ-pred' zero     nz = ùüò-elim (nz refl)
succ-pred' (succ n) _ = refl

pred-succ : (x : ‚Ñï) ‚Üí pred (succ (succ x)) ‚â° succ x
pred-succ x = refl

\end{code}
