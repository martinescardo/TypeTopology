Andrew Sneap - 27th April 2021

In this file I define Integers, along with an induction principle for integers

\begin{code}

{-# OPTIONS --without-K --exact-split --safe #-}

open import SpartanMLTT renaming (_+_ to _‚àî_) --TypeTopology

open import NaturalsAddition renaming (_+_ to _‚Ñï+_)  --TypeTopology
open import NaturalsMultiplication renaming (_*_ to _‚Ñï*_)

module IntegersB where

data ‚Ñ§ : ùì§‚ÇÄ Ãá where 
 pos     : ‚Ñï ‚Üí ‚Ñ§
 negsucc : ‚Ñï ‚Üí ‚Ñ§

pred‚Ñ§ : ‚Ñ§ ‚Üí ‚Ñ§
pred‚Ñ§ (pos 0)        = negsucc 0
pred‚Ñ§ (pos (succ x)) = pos x
pred‚Ñ§ (negsucc x)    = negsucc (succ x)

succ‚Ñ§ : ‚Ñ§ ‚Üí ‚Ñ§
succ‚Ñ§ (pos x)            = pos (succ x)
succ‚Ñ§ (negsucc 0)        = pos 0
succ‚Ñ§ (negsucc (succ x)) = negsucc x

‚Ñ§-induction : {A : ‚Ñ§ ‚Üí ùì§ Ãá} ‚Üí A (pos 0)
                             ‚Üí ((k : ‚Ñ§) ‚Üí A k ‚Üí A (succ‚Ñ§ k))
                             ‚Üí ((k : ‚Ñ§) ‚Üí A (succ‚Ñ§ k) ‚Üí A k)
                             ‚Üí (x : ‚Ñ§)
                             ‚Üí A x 
‚Ñ§-induction base step‚ÇÄ step‚ÇÅ (pos 0)            = base
‚Ñ§-induction base step‚ÇÄ step‚ÇÅ (pos (succ x))     = step‚ÇÄ (pos x) (‚Ñ§-induction base step‚ÇÄ step‚ÇÅ (pos x))
‚Ñ§-induction base step‚ÇÄ step‚ÇÅ (negsucc 0)        = step‚ÇÅ (negsucc 0) base
‚Ñ§-induction base step‚ÇÄ step‚ÇÅ (negsucc (succ x)) = step‚ÇÅ (negsucc (succ x)) (‚Ñ§-induction base step‚ÇÄ step‚ÇÅ (negsucc x))

succpred‚Ñ§ : (x : ‚Ñ§) ‚Üí succ‚Ñ§ (pred‚Ñ§ x) ‚â° x 
succpred‚Ñ§ (pos 0)        = refl
succpred‚Ñ§ (pos (succ x)) = refl
succpred‚Ñ§ (negsucc x)    = refl

predsucc‚Ñ§ : (x : ‚Ñ§) ‚Üí pred‚Ñ§ (succ‚Ñ§ x) ‚â° x 
predsucc‚Ñ§ (pos x)            = refl
predsucc‚Ñ§ (negsucc 0)        = refl
predsucc‚Ñ§ (negsucc (succ x)) = refl



{-

_-_ : ‚Ñ§ ‚Üí ‚Ñ§ ‚Üí ‚Ñ§ 
x - pos 0        = x + (- pos 0)
x - pos (succ y) = x + (- pos (succ y))
x - negsucc y    = x + (- negsucc y)



-}

\end{code}
