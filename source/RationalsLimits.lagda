Andrew Sneap

\begin{code}

{-# OPTIONS --without-K --exact-split --safe #-}

open import SpartanMLTT renaming (_+_ to _‚àî_)  -- TypeTopology

open import OrderNotation --TypeTopology
open import UF-Base --TypeTopology
open import UF-Equiv --TypeTopology
open import UF-FunExt --TypeTopology
open import UF-Subsingletons -- TypeTopology
open import UF-PropTrunc -- TypeTopology

open import NaturalsOrderExtended
open import Rationals
open import RationalsAddition
open import RationalsAbs
open import RationalsMinMax
open import RationalsMultiplication
open import RationalsNegation
open import RationalsOrder

open import NaturalsOrder renaming (max to ‚Ñï-max ; max-comm to ‚Ñï-max-comm)

module RationalsLimits
        (fe : Fun-Ext)
        (pt : propositional-truncations-exist)
        (pe : Prop-Ext)
 where

open import MetricSpaceRationals fe pt pe
open import MetricSpaceAltDef pt fe pe

_limit-of_ : (L : ‚Ñö) ‚Üí (f : ‚Ñï ‚Üí ‚Ñö) ‚Üí ùì§‚ÇÄ Ãá
L limit-of f = ‚àÄ (Œµ : ‚Ñö) ‚Üí 0‚Ñö < Œµ ‚Üí Œ£ N Íûâ ‚Ñï , ((n : ‚Ñï) ‚Üí N ‚â§ n ‚Üí ‚Ñö-metric  (f n) L < Œµ)

sandwich-theorem : (L : ‚Ñö) ‚Üí (f g h : ‚Ñï ‚Üí ‚Ñö) ‚Üí (Œ£ k Íûâ ‚Ñï , ((k' : ‚Ñï) ‚Üí k ‚â§ k' ‚Üí f k' ‚â§ g k' √ó g k' ‚â§ h k')) ‚Üí  L limit-of f ‚Üí L limit-of h ‚Üí L limit-of g
sandwich-theorem L f g h (k , k-greater) lim-f lim-h = lim-g
 where
  lim-g : L limit-of g
  lim-g Œµ l = getN's (lim-f Œµ l) (lim-h Œµ l)
   where
    getN's : Œ£ N‚ÇÅ Íûâ ‚Ñï , ((n : ‚Ñï) ‚Üí N‚ÇÅ ‚â§ n ‚Üí ‚Ñö-metric (f n) L < Œµ)
           ‚Üí Œ£ N‚ÇÇ Íûâ ‚Ñï , ((n : ‚Ñï) ‚Üí N‚ÇÇ ‚â§ n ‚Üí ‚Ñö-metric (h n) L < Œµ)
           ‚Üí Œ£ N Íûâ ‚Ñï  , ((n : ‚Ñï) ‚Üí N  ‚â§ n ‚Üí ‚Ñö-metric (g n) L < Œµ)
    getN's (N‚ÇÅ , f-close) (N‚ÇÇ , h-close) = N , g-close
     where
      N : ‚Ñï
      N = ‚Ñï-max (‚Ñï-max N‚ÇÅ N‚ÇÇ) k
      
      N‚ÇÅ-small : N‚ÇÅ ‚â§ ‚Ñï-max N‚ÇÅ N‚ÇÇ
      N‚ÇÅ-small = max-‚â§-upper-bound N‚ÇÅ N‚ÇÇ
      
      N‚ÇÇ-small : N‚ÇÇ ‚â§ ‚Ñï-max N‚ÇÅ N‚ÇÇ
      N‚ÇÇ-small = transport (N‚ÇÇ ‚â§_) (‚Ñï-max-comm N‚ÇÇ N‚ÇÅ) (max-‚â§-upper-bound N‚ÇÇ N‚ÇÅ)
      
      N‚ÇÅN‚ÇÇ-small : ‚Ñï-max N‚ÇÅ N‚ÇÇ ‚â§ ‚Ñï-max (‚Ñï-max N‚ÇÅ N‚ÇÇ) k
      N‚ÇÅN‚ÇÇ-small = max-‚â§-upper-bound (‚Ñï-max N‚ÇÅ N‚ÇÇ) k
      
      k-small : k ‚â§ ‚Ñï-max (‚Ñï-max N‚ÇÅ N‚ÇÇ) k
      k-small = transport (k ‚â§_) (‚Ñï-max-comm k (‚Ñï-max N‚ÇÅ N‚ÇÇ)) (max-‚â§-upper-bound k (‚Ñï-max N‚ÇÅ N‚ÇÇ))

      Œ± : (f N ‚â§ g N) √ó (g N ‚â§ h N)
      Œ± = k-greater N k-small
     
      g-close : (n : ‚Ñï) ‚Üí ‚Ñï-max (‚Ñï-max N‚ÇÅ N‚ÇÇ) k ‚â§ n ‚Üí ‚Ñö-metric (g n) L < Œµ
      g-close n less = obtain-inequalities (‚Ñö-abs-<-unpack fe (f n - L) Œµ f-close') (‚Ñö-abs-<-unpack fe (h n - L) Œµ h-close')
       where
        f-close' : ‚Ñö-metric (f n) L < Œµ
        f-close' = f-close n (‚â§-trans N‚ÇÅ N n (‚â§-trans N‚ÇÅ (‚Ñï-max N‚ÇÅ N‚ÇÇ) N N‚ÇÅ-small N‚ÇÅN‚ÇÇ-small) less)
        h-close' : ‚Ñö-metric (h n) L < Œµ
        h-close' = h-close n (‚â§-trans N‚ÇÇ N n (‚â§-trans N‚ÇÇ (‚Ñï-max N‚ÇÅ N‚ÇÇ) N N‚ÇÇ-small N‚ÇÅN‚ÇÇ-small) less)

        obtain-inequalities : ((- Œµ) < (f n - L)) √ó ((f n - L) < Œµ)
                            ‚Üí ((- Œµ) < (h n - L)) √ó ((h n - L) < Œµ)
                            ‚Üí ‚Ñö-metric (g n) L < Œµ
        obtain-inequalities (l‚ÇÅ , l‚ÇÇ) (l‚ÇÉ , l‚ÇÑ) = ‚Ñö<-to-abs fe (g n - L) Œµ (I , II)
         where
          k-greater' : (f n ‚â§ g n) √ó (g n ‚â§ h n)
          k-greater' = k-greater n (‚â§-trans k N n k-small less)
          
          I : (- Œµ) < (g n - L)
          I = ‚Ñö<-‚â§-trans fe (-  Œµ) (f n - L) (g n - L) l‚ÇÅ (‚Ñö‚â§-addition-preserves-order fe (f n) (g n) (- L) (pr‚ÇÅ k-greater'))
          II : (g n - L) < Œµ
          II = ‚Ñö‚â§-<-trans fe (g n - L) (h n - L) Œµ (‚Ñö‚â§-addition-preserves-order fe (g n) (h n) (- L) (pr‚ÇÇ k-greater')) l‚ÇÑ

0f : ‚Ñï ‚Üí ‚Ñö
0f _ = 0‚Ñö

0f-converges : 0‚Ñö limit-of 0f
0f-converges Œµ l = 0 , f-conv
 where
  f-conv : (n : ‚Ñï) ‚Üí 0 ‚â§ n ‚Üí ‚Ñö-metric (0f n) 0‚Ñö < Œµ
  f-conv n less = transport (_< Œµ) I l
   where
    I : ‚Ñö-metric (0f n) 0‚Ñö ‚â° 0‚Ñö
    I = ‚Ñö-metric (0f n) 0‚Ñö ‚â°‚ü® by-definition ‚ü©
        abs (0‚Ñö - 0‚Ñö)         ‚â°‚ü® by-definition ‚ü©
        abs 0‚Ñö                ‚â°‚ü® by-definition ‚ü©
        0‚Ñö ‚àé

constant-sequence : (q : ‚Ñö) ‚Üí (n : ‚Ñï) ‚Üí ‚Ñö
constant-sequence q n = q 

constant-sequence-converges : (q : ‚Ñö) ‚Üí q limit-of (constant-sequence q)
constant-sequence-converges q Œµ l = 0 , (Œª n l‚ÇÇ ‚Üí transport (_< Œµ) I l)
 where
  I : 0‚Ñö ‚â° ‚Ñö-metric q q
  I = ‚Ñö-self-dist fe q ‚Åª¬π

open import IntegersB
open import ncRationalsOrder
open import ncRationalsOperations renaming (_*_ to _‚Ñö‚Çô*_ ; _+_ to _‚Ñö‚Çô+_ ; -_ to ‚Ñö‚Çô-_ ; abs to ‚Ñö‚Çô-abs) 

embedding-‚Ñï-to-‚Ñö : ‚Ñï ‚Üí ‚Ñö
embedding-‚Ñï-to-‚Ñö n = to‚Ñö (pos n , 0)

embedding-1/‚Ñï-to-‚Ñö : ‚Ñï ‚Üí ‚Ñö
embedding-1/‚Ñï-to-‚Ñö n = to‚Ñö (pos 1 , n)

open import NaturalsDivision
open import NaturalsAddition renaming (_+_ to _‚Ñï+_)
open import NaturalsMultiplication renaming (_*_ to _‚Ñï*_)
open import NaturalNumbers-Properties -- TypeTopology
open import IntegersMultiplication renaming (_*_ to _‚Ñ§*_)
open import IntegersAddition renaming (_+_ to _‚Ñ§+_)
open import IntegersOrder

positive-order-flip : (m n a b : ‚Ñï) ‚Üí ((pos (succ m)) , a) ‚Ñö‚Çô< ((pos (succ n)) , b) ‚Üí ((pos (succ a)) , m) ‚Ñö‚Çô> ((pos (succ b)) , n)
positive-order-flip m n a b l = transport‚ÇÇ _<_ (‚Ñ§*-comm (pos (succ m)) (pos (succ b))) (‚Ñ§*-comm (pos (succ n)) (pos (succ a))) l

open import ncRationals

‚ü®1/sn‚ü©-converges : 0‚Ñö limit-of ‚ü®1/sn‚ü©
‚ü®1/sn‚ü©-converges ((pos 0 , a) , Œµ)        l = ùüò-elim (‚Ñö<-not-itself 0‚Ñö (transport (0‚Ñö <_) (numerator-zero-is-zero fe ((pos 0 , a) , Œµ) refl) l))
‚ü®1/sn‚ü©-converges ((negsucc x , a) , Œµ)    l = ùüò-elim (negative-not-greater-than-zero x a l)
‚ü®1/sn‚ü©-converges ((pos (succ x) , a) , Œµ) l = q ‚Ñï+ 1 , conclusion 
 where
  rough-N : Œ£ q Íûâ ‚Ñï , Œ£ r Íûâ ‚Ñï , (succ a ‚â° q ‚Ñï* succ x ‚Ñï+ r) √ó (r < succ x)
  rough-N = division (succ a) x
  q = pr‚ÇÅ rough-N
  r = pr‚ÇÅ (pr‚ÇÇ rough-N)
  
  Œ≥ : succ a < (succ x ‚Ñï* (q ‚Ñï+ 1))
  Œ≥ = transport‚ÇÇ _<_ ii iii i
   where
    i : (q ‚Ñï* succ x ‚Ñï+ r) < (q ‚Ñï* succ x ‚Ñï+ succ x)
    i = <-n-monotone-left r (succ x) (q ‚Ñï* succ x) (pr‚ÇÇ (pr‚ÇÇ (pr‚ÇÇ rough-N)))

    ii : q ‚Ñï* succ x ‚Ñï+ r ‚â° succ a 
    ii = pr‚ÇÅ (pr‚ÇÇ (pr‚ÇÇ rough-N)) ‚Åª¬π

    iii : q ‚Ñï* succ x ‚Ñï+ succ x ‚â° succ x ‚Ñï* (q ‚Ñï+ 1)
    iii = q ‚Ñï* succ x ‚Ñï+ succ x      ‚â°‚ü® ap‚ÇÇ _‚Ñï+_ (mult-commutativity q (succ x)) (mult-right-id (succ x) ‚Åª¬π) ‚ü©
          succ x ‚Ñï* q ‚Ñï+ succ x ‚Ñï* 1 ‚â°‚ü® distributivity-mult-over-nat (succ x) q 1 ‚Åª¬π ‚ü©
          succ x ‚Ñï* (q ‚Ñï+ 1) ‚àé
  Œ∂ : pos (succ a) < pos (succ x ‚Ñï* (q ‚Ñï+ 1))
  Œ∂ = ‚Ñï-order-respects-‚Ñ§-order (succ a) (succ x ‚Ñï* (q ‚Ñï+ 1)) Œ≥

  conclusion : (n : ‚Ñï) ‚Üí (q ‚Ñï+ 1) ‚â§ n ‚Üí ‚Ñö-metric (‚ü®1/sn‚ü© n) 0‚Ñö < ((pos (succ x) , a) , Œµ)
  conclusion 0 l' = ùüò-elim l'
  conclusion (succ n) l' = IV
   where
     I : pos (succ q) ‚â§ pos (succ n)
     I = ‚Ñï‚â§-to-‚Ñ§‚â§ (succ q) (succ n) l'
     
     II : (pos (succ a) , x) ‚Ñö‚Çô< (pos (succ n) , 0)
     II = Œ≤ (‚Ñ§‚â§-split (pos (succ q)) (pos (succ n)) I)
      where
       œÑ : pos (succ x ‚Ñï* (q ‚Ñï+ 1)) ‚â° pos (succ q) ‚Ñ§* pos (succ x)
       œÑ = pos (succ x ‚Ñï* (q ‚Ñï+ 1))     ‚â°‚ü® pos-multiplication-equiv-to-‚Ñï (succ x) (q ‚Ñï+ 1) ‚Åª¬π ‚ü©
           pos (succ x) ‚Ñ§* pos (q ‚Ñï+ 1) ‚â°‚ü® by-definition ‚ü©
           pos (succ x) ‚Ñ§* pos (succ q) ‚â°‚ü® ‚Ñ§*-comm (pos (succ x)) (pos (succ q)) ‚ü©
           pos (succ q) ‚Ñ§* pos (succ x) ‚àé
       Œ± : (pos (succ a) ‚Ñ§* pos 1) < (pos (succ q) ‚Ñ§* pos (succ x))  
       Œ± = transport‚ÇÇ _<_ (‚Ñ§-mult-right-id (pos (succ a))) œÑ Œ∂
       Œ≤ : (pos (succ q) < pos (succ n)) ‚àî (pos (succ q) ‚â° pos (succ n)) ‚Üí (pos (succ a) , x) ‚Ñö‚Çô< (pos (succ n) , 0)
       Œ≤ (inl less) = ‚Ñö‚Çô<-trans (pos (succ a) , x) (pos (succ q) , 0) (pos (succ n) , 0) Œ± less
       Œ≤ (inr equal) = transport (Œª - ‚Üí (pos (succ a) , x) ‚Ñö‚Çô< (- , 0)) equal Œ±
     
     III : (pos (succ x) , a) ‚Ñö‚Çô> (pos 1 , n)
     III = positive-order-flip a n x 0 II

     IV : abs (to‚Ñö ((pos 1) , n) - 0‚Ñö) < ((pos (succ x) , a) , Œµ)
     IV = transport (_< ((pos (succ x) , a) , Œµ)) i iv
      where
       i : to‚Ñö (pos 1 , n) ‚â° abs (to‚Ñö ((pos 1) , n) - 0‚Ñö)
       i = to‚Ñö (pos 1 , n)                               ‚â°‚ü® by-definition ‚ü©
           to‚Ñö (‚Ñö‚Çô-abs (pos 1 , n))                      ‚â°‚ü® to‚Ñö-abs fe (pos 1 , n) ‚Åª¬π ‚ü©
           abs (to‚Ñö (pos 1 , n))                         ‚â°‚ü® ap (Œª - ‚Üí abs (to‚Ñö -)) (‚Ñö‚Çô-zero-right-neutral (pos 1 , n) ‚Åª¬π) ‚ü©
           abs (to‚Ñö ((pos 1 , n) ‚Ñö‚Çô+ (pos 0 , 0)))       ‚â°‚ü® by-definition ‚ü©
           abs (to‚Ñö ((pos 1 , n) ‚Ñö‚Çô+ (‚Ñö‚Çô- (pos 0 , 0)))) ‚â°‚ü® ap abs (to‚Ñö-subtraction fe (pos 1 , n) (pos 0 , 0) ‚Åª¬π) ‚ü©
           abs (to‚Ñö (pos 1 , n) - 0‚Ñö) ‚àé

       ii : to‚Ñö (pos 1 , n) < to‚Ñö (pos (succ x) , a)
       ii = to‚Ñö-< (pos 1 , n) (pos (succ x) , a) III

       iii : (pos (succ x) , a) , Œµ ‚â° to‚Ñö (pos (succ x) , a)
       iii = to‚Ñö-to‚Ñö‚Çô fe ((pos (succ x) , a) , Œµ)

       iv : to‚Ñö (pos 1 , n) < ((pos (succ x) , a) , Œµ)
       iv = transport (to‚Ñö (pos 1 , n) <_) (iii ‚Åª¬π) ii
    
limits-lemma : (k : ‚Ñï) ‚Üí ((pos 1 , succ k) ‚Ñö‚Çô* (pos 2 , 2)) ‚Ñö‚Çô‚â§ (pos 1 , succ (succ k))
limits-lemma k = k , I
 where
  I : pos 2 ‚Ñ§* pos (succ (succ (succ k))) ‚Ñ§+ pos k ‚â° pos 1 ‚Ñ§* pos (succ (pred (succ (succ k) ‚Ñï* 3)))
  I = pos 2 ‚Ñ§* pos (succ (succ (succ k))) ‚Ñ§+ pos k ‚â°‚ü® by-definition ‚ü©
      pos 2 ‚Ñ§* pos (k ‚Ñï+ 3) ‚Ñ§+ pos k               ‚â°‚ü® ‚Ñ§+-comm (pos 2 ‚Ñ§* pos (k ‚Ñï+ 3)) (pos k) ‚ü©
      pos k ‚Ñ§+ pos 2 ‚Ñ§* pos (k ‚Ñï+ 3)               ‚â°‚ü® ap (Œª z ‚Üí pos k ‚Ñ§+ pos 2 ‚Ñ§* z) (pos-addition-equiv-to-‚Ñï k 3 ‚Åª¬π) ‚ü©
      pos k ‚Ñ§+ pos 2 ‚Ñ§* (pos k ‚Ñ§+ pos 3)           ‚â°‚ü® ap (pos k ‚Ñ§+_) (distributivity-mult-over-‚Ñ§' (pos k) (pos 3) (pos 2) ) ‚ü©
      pos k ‚Ñ§+ (pos 2 ‚Ñ§* pos k ‚Ñ§+ pos 6)           ‚â°‚ü® ‚Ñ§+-assoc (pos k) (pos 2 ‚Ñ§* pos k) (pos 6) ‚Åª¬π ‚ü©
      pos k ‚Ñ§+ pos 2 ‚Ñ§* pos k ‚Ñ§+ pos 6             ‚â°‚ü® ap (Œª z ‚Üí z ‚Ñ§+ pos 2 ‚Ñ§* pos k ‚Ñ§+ pos 6) (‚Ñ§-mult-left-id (pos k) ‚Åª¬π) ‚ü©
      pos 1 ‚Ñ§* pos k ‚Ñ§+ pos 2 ‚Ñ§* pos k ‚Ñ§+ pos 6    ‚â°‚ü® ap (_‚Ñ§+ pos 6) (distributivity-mult-over-‚Ñ§ (pos 1) (pos 2) (pos k) ‚Åª¬π) ‚ü©
      (pos 3) ‚Ñ§* pos k ‚Ñ§+ pos 6                    ‚â°‚ü® ap (_‚Ñ§+ pos 6) (‚Ñ§*-comm (pos 3) (pos k)) ‚ü©
      pos k ‚Ñ§* pos 3 ‚Ñ§+ pos 6                      ‚â°‚ü® distributivity-mult-over-‚Ñ§ (pos k) (pos 2) (pos 3) ‚Åª¬π ‚ü©
      (pos k ‚Ñ§+ pos 2) ‚Ñ§* pos 3                    ‚â°‚ü® ap (_‚Ñ§* pos 3) (pos-addition-equiv-to-‚Ñï k 2) ‚ü©
      pos (k ‚Ñï+ 2) ‚Ñ§* pos 3                        ‚â°‚ü® by-definition ‚ü©
      pos (succ (succ k)) ‚Ñ§* pos 3                 ‚â°‚ü® denom-setup (succ k) 2 ‚Åª¬π ‚ü©
      pos (succ (pred (succ (succ k) ‚Ñï* 3)))       ‚â°‚ü® ‚Ñ§-mult-left-id (pos (succ (pred (succ (succ k) ‚Ñï* 3)))) ‚Åª¬π ‚ü©
      pos 1 ‚Ñ§* pos (succ (pred (succ (succ k) ‚Ñï* 3))) ‚àé


‚ü®2/3‚ü©^n-squeezed : Œ£ N Íûâ ‚Ñï  , ((n : ‚Ñï) ‚Üí N ‚â§ n ‚Üí (0f n ‚â§ (‚ü®2/3‚ü©^ n)) √ó ((‚ü®2/3‚ü©^ n) ‚â§ ‚ü®1/sn‚ü© n))
‚ü®2/3‚ü©^n-squeezed = 1 , I
 where
  Œ≥ : 0‚Ñö ‚â§ 2/3
  Œ≥ = to‚Ñö-‚â§ (pos 0 , 0) (pos 2 , 2) (2 , by-definition)
  I : (n : ‚Ñï) ‚Üí 1 ‚â§ n ‚Üí (0f n ‚â§ (‚ü®2/3‚ü©^ n)) √ó ((‚ü®2/3‚ü©^ n) ‚â§ ‚ü®1/sn‚ü© n)
  I 0 l = ùüò-elim l
  I (succ n) l = II , III
   where
    II : 0‚Ñö ‚â§ (‚ü®2/3‚ü©^ succ n)
    II = induction base step n
     where
      base : 0‚Ñö ‚â§ (‚ü®2/3‚ü©^ succ 0)
      base = to‚Ñö-‚â§ (pos 0 , 0) (pos 2 , 2) (2 , refl)
      step : (k : ‚Ñï) ‚Üí 0‚Ñö ‚â§ (‚ü®2/3‚ü©^ succ k) ‚Üí 0‚Ñö ‚â§ (‚ü®2/3‚ü©^ succ (succ k))
      step k IH = i
       where
        i : (0‚Ñö * 2/3) ‚â§ ((‚ü®2/3‚ü©^ succ k) * 2/3)
        i = ‚Ñö‚â§-pos-multiplication-preserves-order' fe 0‚Ñö (‚ü®2/3‚ü©^ (succ k)) 2/3 IH Œ≥

    III : (‚ü®2/3‚ü©^ succ n) ‚â§ ‚ü®1/sn‚ü© (succ n)
    III = induction base step n
     where
      base : (‚ü®2/3‚ü©^ succ 0) ‚â§ ‚ü®1/sn‚ü© (succ 0)
      base = to‚Ñö-‚â§ (pos 2 , 2) (pos 1 , 0) (1 , refl)
      step : (k : ‚Ñï)
           ‚Üí (‚ü®2/3‚ü©^ succ k) ‚â§ ‚ü®1/sn‚ü© (succ k)
           ‚Üí (‚ü®2/3‚ü©^ succ (succ k)) ‚â§ ‚ü®1/sn‚ü© (succ (succ k))
      step 0 IH = ii
       where
        abstract
         i : to‚Ñö (pos 4 , 8) ‚â§‚Ñö to‚Ñö (pos 1 , 1)
         i = to‚Ñö-‚â§ (pos 4 , 8) (pos 1 , 1) (1 , refl)
         ii : (‚ü®2/3‚ü©^ succ (succ 0)) ‚â§‚Ñö ‚ü®1/sn‚ü© (succ (succ 0))
         ii = transport (_‚â§‚Ñö to‚Ñö (pos 1 , 1)) (to‚Ñö-* fe (pos 2 , 2) (pos 2 , 2)) i
      step (succ k) IH = ‚Ñö‚â§-trans fe (((‚ü®2/3‚ü©^ succ (succ k)) * 2/3)) ((‚ü®1/n‚ü© (succ k) * 2/3)) (‚ü®1/n‚ü© (succ (succ k))) i ii
       where
        i : ((‚ü®2/3‚ü©^ succ (succ k)) * 2/3) ‚â§ (‚ü®1/n‚ü© (succ k) * 2/3)
        i = ‚Ñö‚â§-pos-multiplication-preserves-order' fe (‚ü®2/3‚ü©^ (succ (succ k))) (‚ü®1/n‚ü© (succ k)) 2/3 IH Œ≥
        ii : (‚ü®1/n‚ü© (succ k) * 2/3) ‚â§ ‚ü®1/n‚ü© (succ (succ k))
        ii = transport (_‚â§ ‚ü®1/n‚ü© (succ (succ k))) (iii ‚Åª¬π) iv
         where
          abstract
           iii : (‚ü®1/n‚ü© (succ k)) * 2/3 ‚â° to‚Ñö ((pos 1 , succ k) ‚Ñö‚Çô* (pos 2 , 2))
           iii = to‚Ñö-* fe (pos 1 , succ k) (pos 2 , 2) ‚Åª¬π
           iv : to‚Ñö ((pos 1 , succ k) ‚Ñö‚Çô* (pos 2 , 2)) ‚â§‚Ñö ‚ü®1/n‚ü© (succ (succ k))
           iv = to‚Ñö-‚â§ ((pos 1 , succ k) ‚Ñö‚Çô* (pos 2 , 2)) (pos 1 , succ (succ k)) (limits-lemma k)

‚ü®2/3‚ü©^n-converges : 0‚Ñö limit-of ‚ü®2/3‚ü©^_
‚ü®2/3‚ü©^n-converges = sandwich-theorem 0‚Ñö 0f ‚ü®2/3‚ü©^_ ‚ü®1/sn‚ü© ‚ü®2/3‚ü©^n-squeezed 0f-converges ‚ü®1/sn‚ü©-converges

‚ü®2/3‚ü©^n-positive : (n : ‚Ñï) ‚Üí 0‚Ñö < (‚ü®2/3‚ü©^ n)
‚ü®2/3‚ü©^n-positive 0 = 0 , refl
‚ü®2/3‚ü©^n-positive (succ n) = transport (0‚Ñö <_) III II
 where
  I : 0‚Ñö < (‚ü®2/3‚ü©^ n)
  I = ‚ü®2/3‚ü©^n-positive n
  II : 0‚Ñö < ((‚ü®2/3‚ü©^ n) * 2/3)
  II = ‚Ñö<-pos-multiplication-preserves-order (‚ü®2/3‚ü©^ n) 2/3 I (1 , refl)
  III : (‚ü®2/3‚ü©^ n) * 2/3 ‚â° ((‚ü®2/3‚ü©^ (succ n)))
  III = ‚ü®2/3‚ü©-to-mult fe n ‚Åª¬π

\end{code}

We want to have a universal property for dependent types

\begin{code}

dependent-type-universal-property : {X : ùì§ Ãá} ‚Üí (A B : X ‚Üí ùì§ Ãá) ‚Üí ((x : X) ‚Üí A x √ó B x) ‚Üí ((x : X) ‚Üí A x) √ó ((x : X) ‚Üí B x)
dependent-type-universal-property A B f = (Œª x ‚Üí pr‚ÇÅ (f x)) , (Œª x ‚Üí pr‚ÇÇ (f x))

open import UF-Subsingletons-FunExt

dependent-type-universal-property-equivalence : {X : ùì§ Ãá} ‚Üí (A B : X ‚Üí ùì§ Ãá) ‚Üí ((x : X) ‚Üí A x √ó B x) ‚âÉ ((x : X) ‚Üí A x) √ó ((x : X) ‚Üí B x)
dependent-type-universal-property-equivalence A B = dependent-type-universal-property A B , ((I , II) , III , IV)
 where
  I : (‚àÄ x ‚Üí A x) √ó (‚àÄ x ‚Üí B x) ‚Üí ‚àÄ x ‚Üí A x √ó B x
  I (f , g) x = f x , g x
  II : dependent-type-universal-property A B ‚àò I ‚àº id
  II _ = refl
  III : (‚àÄ x ‚Üí A x) √ó (‚àÄ x ‚Üí B x) ‚Üí ‚àÄ x ‚Üí A x √ó B x
  III (f , g) x = f x , g x
  IV : III ‚àò dependent-type-universal-property A B ‚àº id
  IV _ = refl

generalised-dependent-type-universal-property : {X : ùì§ Ãá} ‚Üí (A : X ‚Üí ùì§ Ãá) ‚Üí (P : (x : X) ‚Üí A x ‚Üí ùì§ Ãá)
                                                          ‚Üí (‚àÄ x ‚Üí Œ£ a Íûâ A x , P x a)
                                                          ‚Üí Œ£ g Íûâ ((x : X) ‚Üí A x) , ((x : X) ‚Üí P x (g x))
generalised-dependent-type-universal-property A P f = (Œª x ‚Üí pr‚ÇÅ (f x)) , Œª x ‚Üí pr‚ÇÇ (f x)

RationalsCauchySequence : (S : ‚Ñï ‚Üí ‚Ñö) ‚Üí ùì§‚ÇÄ Ãá
RationalsCauchySequence = cauchy-sequence ‚Ñö ‚Ñö-metric-space

open import RationalsAddition

every-point-in-‚Ñö-is-limit-point : (q : ‚Ñö) ‚Üí Œ£ S Íûâ (‚Ñï ‚Üí ‚Ñö) , (q limit-of S)
every-point-in-‚Ñö-is-limit-point q = (constant-sequence q) , (constant-sequence-converges q)

\end{code}
