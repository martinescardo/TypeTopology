
 \begin{code}

{-# OPTIONS --without-K --exact-split  --allow-unsolved-metas #-}

open import SpartanMLTT renaming (_+_ to _‚àî_) -- TypeTopology

open import CanonicalMapNotation
open import NaturalsMultiplication
open import NaturalNumbers
open import NaturalsAddition
open import ncRationals
open import Rationals
open import IntegersB
open import IntegersAddition renaming (_+_ to _+‚Ñ§_)
open import IntegersDivision
open import UF-FunExt

module Todd.RationalsDyadic
  (fe : FunExt)
 where

_‚Ñï^_ : ‚Ñï ‚Üí ‚Ñï ‚Üí ‚Ñï
a ‚Ñï^ b = ((a *_) ^ b) 1

zero-base : (a : ‚Ñï) ‚Üí a ‚Ñï^ 0 ‚â° 1
zero-base a = refl

infixl 33 _‚Ñï^_ 

2^ : ‚Ñï ‚Üí ‚Ñï
2^ = 2 ‚Ñï^_

prod-of-powers : (n a b : ‚Ñï) ‚Üí n ‚Ñï^ a * n ‚Ñï^ b ‚â° n ‚Ñï^ (a + b)
prod-of-powers n a zero     = refl
prod-of-powers n a (succ b) = I
 where
  I : n ‚Ñï^ a * n ‚Ñï^ succ b ‚â° n ‚Ñï^ (a + succ b)
  I = n ‚Ñï^ a * n ‚Ñï^ succ b  ‚â°‚ü® refl ‚ü©
      n ‚Ñï^ a * (n * n ‚Ñï^ b) ‚â°‚ü® mult-associativity (n ‚Ñï^ a) n (n ‚Ñï^ b) ‚Åª¬π ‚ü©
      n ‚Ñï^ a * n * n ‚Ñï^ b   ‚â°‚ü® ap (_* n ‚Ñï^ b) (mult-commutativity (n ‚Ñï^ a) n) ‚ü©
      n * n ‚Ñï^ a * n ‚Ñï^ b   ‚â°‚ü® mult-associativity n (n ‚Ñï^ a) (n ‚Ñï^ b) ‚ü©
      n * (n ‚Ñï^ a * n ‚Ñï^ b) ‚â°‚ü® ap (n *_) (prod-of-powers n a b) ‚ü©
      n * n ‚Ñï^ (a + b)      ‚â°‚ü® refl ‚ü©
      n ‚Ñï^ succ (a + b)     ‚â°‚ü® refl ‚ü©
      n ‚Ñï^ (a + succ b) ‚àé

raise-again : (n a b : ‚Ñï) ‚Üí (n ‚Ñï^ a) ‚Ñï^ b ‚â° n ‚Ñï^ (a * b)
raise-again n a zero     = refl
raise-again n a (succ b) = I
 where
  IH : n ‚Ñï^ a ‚Ñï^ b ‚â° n ‚Ñï^ (a * b)
  IH = raise-again n a b
  
  I : n ‚Ñï^ a ‚Ñï^ succ b ‚â° n ‚Ñï^ (a * succ b)
  I = n ‚Ñï^ a ‚Ñï^ succ b       ‚â°‚ü® refl ‚ü©
      n ‚Ñï^ a * (n ‚Ñï^ a) ‚Ñï^ b ‚â°‚ü® ap (n ‚Ñï^ a *_) IH ‚ü©
      n ‚Ñï^ a * n ‚Ñï^ (a * b)  ‚â°‚ü® prod-of-powers n a (a * b) ‚ü©
      n ‚Ñï^ (a + a * b)       ‚â°‚ü® refl ‚ü©
      n ‚Ñï^ (a * succ b)      ‚àé

open import NaturalNumbers-Properties

odd even : ‚Ñ§ ‚Üí ùì§‚ÇÄ Ãá
odd (pos                   0) = ùüò
odd (pos                   1) = ùüô
odd (pos (succ (succ x)))     = odd (pos x)
odd (negsucc               0) = ùüô
odd (negsucc               1) = ùüò
odd (negsucc (succ (succ x))) = odd (negsucc x)
even x = ¬¨ odd x

even-or-odd? : (x : ‚Ñ§) ‚Üí even x ‚àî odd x
even-or-odd? (pos                   0) = inl (Œª x ‚Üí x)
even-or-odd? (pos                   1) = inr ‚ãÜ
even-or-odd? (pos (succ (succ x)))     = even-or-odd? (pos x)
even-or-odd? (negsucc               0) = inr ‚ãÜ
even-or-odd? (negsucc               1) = inl (Œª x ‚Üí x)
even-or-odd? (negsucc (succ (succ x))) = even-or-odd? (negsucc x)

‚Ñ§[1/2] : ùì§‚ÇÄ Ãá
‚Ñ§[1/2] = Œ£ (z , n) Íûâ ‚Ñ§ √ó ‚Ñï , {!!} -- is-in-lowest-terms-dyadic (z , pred (2^ n))

open import Todd.TernaryBoehmDef
open import IntegersAbs
open import IntegersMultiplication renaming (_*_ to _‚Ñ§*_)

normalise-pos : ‚Ñ§ ‚Üí ‚Ñï ‚Üí ‚Ñ§[1/2]
normalise-pos k zero     = (k , 0) , {!!} 
normalise-pos k (succ n) with even-or-odd? k
... | inl even = normalise-pos {!k /2!} n
... | inr odd  = (k , succ n) , {!!}

normalise-neg : ‚Ñ§ ‚Üí ‚Ñï ‚Üí ‚Ñ§[1/2]
normalise-neg k 0        = (k +‚Ñ§ k , 0) , {!!}
normalise-neg k (succ n) = normalise-neg (k +‚Ñ§ k) n

-- normalise (k , n)  = k/2^n
normalise : ‚Ñ§ √ó ‚Ñ§ ‚Üí ‚Ñ§[1/2]
normalise (k , pos     n) = normalise-pos k n
normalise (k , negsucc n) = normalise-neg k n

‚Ñ§[1/2]-to-‚Ñö : ‚Ñ§[1/2] ‚Üí ‚Ñö
‚Ñ§[1/2]-to-‚Ñö ((z , n) , lt) = (z , (pred (2^ n))) , lt

0‚Ñ§[1/2] : ‚Ñ§[1/2]
0‚Ñ§[1/2] = (pos 0 , 0) , ((zero , refl) , 1 , refl) , Œª f ‚Üí pr‚ÇÇ

1‚Ñ§[1/2] : ‚Ñ§[1/2]
1‚Ñ§[1/2] = (pos 1 , 0) , ((1 , refl) , 1 , refl) , Œª f ‚Üí pr‚ÇÇ

instance
 canonical-map-‚Ñ§[1/2]-to-‚Ñö : Canonical-Map ‚Ñ§[1/2] ‚Ñö
 Œπ {{canonical-map-‚Ñ§[1/2]-to-‚Ñö}} = ‚Ñ§[1/2]-to-‚Ñö

\end{code}


