
 \begin{code}

{-# OPTIONS --without-K --exact-split  --allow-unsolved-metas #-}

open import SpartanMLTT renaming (_+_ to _‚àî_) -- TypeTopology

open import CanonicalMapNotation
open import IntegersB
open import IntegersAbs
open import IntegersAddition renaming (_+_ to _+‚Ñ§_)
open import IntegersDivision
open import IntegersMultiplication renaming (_*_ to _‚Ñ§*_)
open import NaturalsAddition
open import NaturalsDivision
open import NaturalsMultiplication
open import NaturalNumbers
open import NaturalNumbers-Properties
open import ncRationals
open import Rationals
open import UF-FunExt

module Todd.RationalsDyadic
  (fe : FunExt)
 where
 
open import Todd.TernaryBoehmRealsPrelude fe

_‚Ñï^_ : ‚Ñï ‚Üí ‚Ñï ‚Üí ‚Ñï
a ‚Ñï^ b = ((a *_) ^ b) 1

zero-base : (a : ‚Ñï) ‚Üí a ‚Ñï^ 0 ‚â° 1
zero-base a = refl

infixl 33 _‚Ñï^_ 

2^ : ‚Ñï ‚Üí ‚Ñï
2^ = 2 ‚Ñï^_

prod-of-powers : (n a b : ‚Ñï) ‚Üí n ‚Ñï^ a * n ‚Ñï^ b ‚â° n ‚Ñï^ (a + b)
prod-of-powers n a zero     = refl
prod-of-powers n a (succ b) = I
 where
  I : n ‚Ñï^ a * n ‚Ñï^ succ b ‚â° n ‚Ñï^ (a + succ b)
  I = n ‚Ñï^ a * n ‚Ñï^ succ b  ‚â°‚ü® refl ‚ü©
      n ‚Ñï^ a * (n * n ‚Ñï^ b) ‚â°‚ü® mult-associativity (n ‚Ñï^ a) n (n ‚Ñï^ b) ‚Åª¬π ‚ü©
      n ‚Ñï^ a * n * n ‚Ñï^ b   ‚â°‚ü® ap (_* n ‚Ñï^ b) (mult-commutativity (n ‚Ñï^ a) n) ‚ü©
      n * n ‚Ñï^ a * n ‚Ñï^ b   ‚â°‚ü® mult-associativity n (n ‚Ñï^ a) (n ‚Ñï^ b) ‚ü©
      n * (n ‚Ñï^ a * n ‚Ñï^ b) ‚â°‚ü® ap (n *_) (prod-of-powers n a b) ‚ü©
      n * n ‚Ñï^ (a + b)      ‚â°‚ü® refl ‚ü©
      n ‚Ñï^ succ (a + b)     ‚â°‚ü® refl ‚ü©
      n ‚Ñï^ (a + succ b) ‚àé

raise-again : (n a b : ‚Ñï) ‚Üí (n ‚Ñï^ a) ‚Ñï^ b ‚â° n ‚Ñï^ (a * b)
raise-again n a zero     = refl
raise-again n a (succ b) = I
 where
  IH : n ‚Ñï^ a ‚Ñï^ b ‚â° n ‚Ñï^ (a * b)
  IH = raise-again n a b
  
  I : n ‚Ñï^ a ‚Ñï^ succ b ‚â° n ‚Ñï^ (a * succ b)
  I = n ‚Ñï^ a ‚Ñï^ succ b       ‚â°‚ü® refl ‚ü©
      n ‚Ñï^ a * (n ‚Ñï^ a) ‚Ñï^ b ‚â°‚ü® ap (n ‚Ñï^ a *_) IH ‚ü©
      n ‚Ñï^ a * n ‚Ñï^ (a * b)  ‚â°‚ü® prod-of-powers n a (a * b) ‚ü©
      n ‚Ñï^ (a + a * b)       ‚â°‚ü® refl ‚ü©
      n ‚Ñï^ (a * succ b)      ‚àé

open import NaturalNumbers-Properties

‚Ñ§[1/2] : ùì§‚ÇÄ Ãá
‚Ñ§[1/2] = Œ£ (z , n) Íûâ ‚Ñ§ √ó ‚Ñï , (n ‚â° 0) ‚àî ((n ‚â¢ 0) √ó odd z)

_/2' : ‚Ñ§ ‚Üí ‚Ñ§
pos x     /2' = pos (x /2)
negsucc x /2' = succ‚Ñ§ (negsucc (succ x /2))

normalise-pos normalise-neg : ‚Ñ§ ‚Üí ‚Ñï ‚Üí ‚Ñ§[1/2]
normalise-pos z 0        = (z , 0) , inl refl
normalise-pos z (succ n) with even-or-odd? z
... | inl e = normalise-pos (z /2') n
... | inr o = (z , succ n) , inr (positive-not-zero n , o)
normalise-neg z 0        = (z +‚Ñ§ z , 0) , inl refl
normalise-neg z (succ n) = normalise-neg (z +‚Ñ§ z) n

normalise : ‚Ñ§ √ó ‚Ñ§ ‚Üí ‚Ñ§[1/2]
normalise (k , pos     n) = normalise-pos k n
normalise (k , negsucc n) = normalise-neg k n

-- open import Todd.TernaryBoehmDe

0‚Ñ§[1/2] : ‚Ñ§[1/2]
0‚Ñ§[1/2] = (pos 0 , 0) , inl refl

1‚Ñ§[1/2] : ‚Ñ§[1/2]
1‚Ñ§[1/2] = (pos 1 , 0) , inl refl

open import HCF

‚Ñï-even ‚Ñï-odd : ‚Ñï ‚Üí ùì§‚ÇÄ Ãá
‚Ñï-odd 0 = ùüò
‚Ñï-odd 1 = ùüô
‚Ñï-odd (succ (succ n)) = ‚Ñï-odd n
‚Ñï-even n = ¬¨ ‚Ñï-odd n

odd‚Üí‚Ñï-odd : (z : ‚Ñ§) ‚Üí odd z ‚Üí ‚Ñï-odd (abs z)
odd‚Üí‚Ñï-odd (pos (succ 0))            o = ‚ãÜ
odd‚Üí‚Ñï-odd (pos (succ (succ x)))     o = odd‚Üí‚Ñï-odd (pos x) o
odd‚Üí‚Ñï-odd (negsucc 0)               o = ‚ãÜ
odd‚Üí‚Ñï-odd (negsucc (succ (succ x))) o = odd‚Üí‚Ñï-odd (negsucc x) o

odd-even-gives-hcf-1 : (a b : ‚Ñï) ‚Üí ‚Ñï-odd a ‚Üí ‚Ñï-even b ‚Üí coprime a b
odd-even-gives-hcf-1 a b even-a odd-b = {!!}

positive-powers-of-two-not-zero : (n : ‚Ñï) ‚Üí ¬¨ (2^ (succ n) ‚â° 0)
positive-powers-of-two-not-zero (succ n) e = positive-powers-of-two-not-zero n (mult-left-cancellable (2^ (succ n)) 0 1 e)

succ-succ-even : (n : ‚Ñï) ‚Üí ‚Ñï-even n ‚Üí ‚Ñï-even (2 + n)
succ-succ-even zero even-n ()
succ-succ-even (succ zero) even-n = Œª _ ‚Üí even-n ‚ãÜ
succ-succ-even (succ (succ n)) even-n = succ-succ-even n even-n

times-two-even : (n : ‚Ñï) ‚Üí ‚Ñï-even (2 * n)
times-two-even 0 ()
times-two-even (succ n) = succ-succ-even (2 * n) (times-two-even n)

zero-denom-lt : (x : ‚Ñ§) ‚Üí is-in-lowest-terms (x , 0)
zero-denom-lt x = (1-divides-all (abs x) , 1 , refl) , Œª f ‚Üí pr‚ÇÇ

‚Ñ§[1/2]-to-‚Ñö : ‚Ñ§[1/2] ‚Üí ‚Ñö
‚Ñ§[1/2]-to-‚Ñö ((a , 0)      , p)                = (a , 0) , zero-denom-lt a
‚Ñ§[1/2]-to-‚Ñö ((a , succ n) , inr (nz , odd-a)) = (a , (pred (2^ (succ n)))) , odd-even-gives-hcf-1 (abs a) (succ (pred (2^ (succ n)))) (odd‚Üí‚Ñï-odd a odd-a) even-denom
 where
  even-denom : ‚Ñï-even (succ (pred (2^ (succ n))))
  even-denom = transport (Œª - ‚Üí ‚Ñï-even -) (succ-pred' (2^ (succ n)) (positive-powers-of-two-not-zero n) ‚Åª¬π) (times-two-even (2^ n))

instance
 canonical-map-‚Ñ§[1/2]-to-‚Ñö : Canonical-Map ‚Ñ§[1/2] ‚Ñö
 Œπ {{canonical-map-‚Ñ§[1/2]-to-‚Ñö}} = ‚Ñ§[1/2]-to-‚Ñö

\end{code}


