
\begin{code}

{-# OPTIONS --allow-unsolved-metas #-}

open import SpartanMLTT renaming (_+_ to _‚àî_)
open import OrderNotation
open import IntegersB
open import IntegersAddition
open import IntegersOrder
open import IntegersMultiplication
open import Todd.TernaryBoehmDef
open import UF-FunExt
open import UF-Powerset
open import UF-PropTrunc
open import UF-Subsingletons

module Todd.TernaryBoehmDyadicReals
  (pt : propositional-truncations-exist)
  (fe : FunExt) 
 where

open import Todd.RationalsDyadic fe

\end{code}

First, we define the properties of the dyadic rationals which we may wish to use.

\begin{code}

record DyadicProperties : ùì§‚ÇÅ Ãá where
 field
  _‚Ñ§[1/2]+_     : ‚Ñ§[1/2] ‚Üí ‚Ñ§[1/2] ‚Üí ‚Ñ§[1/2]
  ‚Ñ§[1/2]+-comm  : commutative _‚Ñ§[1/2]+_
  ‚Ñ§[1/2]+-assoc : associative _‚Ñ§[1/2]+_
  ‚Ñ§[1/2]-       : ‚Ñ§[1/2] ‚Üí ‚Ñ§[1/2]
  ‚Ñ§[1/2]+-inv   : (x : ‚Ñ§[1/2]) ‚Üí Œ£ y Íûâ ‚Ñ§[1/2] , (x ‚Ñ§[1/2]+ y) ‚â° 0‚Ñ§[1/2]
  _‚Ñ§[1/2]*_     : ‚Ñ§[1/2] ‚Üí ‚Ñ§[1/2] ‚Üí ‚Ñ§[1/2]
  ‚Ñ§[1/2]-comm   : commutative _‚Ñ§[1/2]*_
  ‚Ñ§[1/2]-assoc  : associative _‚Ñ§[1/2]*_


  -- Could use alternative definition here, but since (a < b) ‚áî (2·µÉ < 2·µá), we can be simple
  
_‚â§‚Ñ§[1/2]_ _<‚Ñ§[1/2]_ : ‚Ñ§[1/2] ‚Üí ‚Ñ§[1/2] ‚Üí ùì§‚ÇÄ Ãá 
((x , n) , _) ‚â§‚Ñ§[1/2] ((y , m) , _) = (x * pos m) ‚â§‚Ñ§ (y * pos n)
((x , n) , _) <‚Ñ§[1/2] ((y , m) , _) = (x * pos m) <‚Ñ§ (y * pos n)

instance
 Order-‚Ñ§[1/2]-‚Ñ§[1/2] : Order ‚Ñ§[1/2] ‚Ñ§[1/2]
 _‚â§_ {{Order-‚Ñ§[1/2]-‚Ñ§[1/2]}} = _‚â§‚Ñ§[1/2]_

instance
 Strict-Order-‚Ñ§[1/2]-‚Ñ§[1/2] : Strict-Order ‚Ñ§[1/2] ‚Ñ§[1/2]
 _<_ {{Strict-Order-‚Ñ§[1/2]-‚Ñ§[1/2]}} = _<‚Ñ§[1/2]_

‚â§‚Ñ§[1/2]-is-prop : (x y : ‚Ñ§[1/2]) ‚Üí is-prop (x ‚â§‚Ñ§[1/2] y)
‚â§‚Ñ§[1/2]-is-prop ((x , a) , _) ((y , b) , _) = ‚Ñ§‚â§-is-prop (x * pos b) (y * pos a)

<‚Ñ§[1/2]-is-prop : (x y : ‚Ñ§[1/2]) ‚Üí is-prop (x <‚Ñ§[1/2] y)
<‚Ñ§[1/2]-is-prop ((x , a) , _) ((y , b) , _) = ‚Ñ§<-is-prop (x * pos b) (y * pos a)

record OrderProperties : ùì§‚ÇÄ Ãá where
 field
  no-min : (x : ‚Ñ§[1/2]) ‚Üí Œ£ y Íûâ ‚Ñ§[1/2] , (x < y)
  no-max : (x : ‚Ñ§[1/2]) ‚Üí Œ£ y Íûâ ‚Ñ§[1/2] , (y < x)
  dense  : (x y : ‚Ñ§[1/2]) ‚Üí Œ£ k Íûâ ‚Ñ§[1/2] , x < k √ó (k < y)

open PropositionalTruncation pt
module _
  (DyPr : DyadicProperties)
  (DyOrPr : OrderProperties)
 where

 open DyadicProperties DyPr
 open OrderProperties DyOrPr

\end{code}

Now, we introduce the reals defined using dyadic rationals. Dyadic
rationals are dense, so should be a good foundation for the reals, and
correlate well with the ternary Boehm reals.

\begin{code}

 inhabited-left : (L : ùìü ‚Ñ§[1/2]) ‚Üí ùì§‚ÇÄ Ãá
 inhabited-left L = ‚àÉ p Íûâ ‚Ñ§[1/2] , p ‚àà L

 inhabited-right : (R : ùìü ‚Ñ§[1/2]) ‚Üí ùì§‚ÇÄ Ãá
 inhabited-right R = ‚àÉ q Íûâ ‚Ñ§[1/2] , q ‚àà R

 rounded-left : (L : ùìü ‚Ñ§[1/2]) ‚Üí ùì§‚ÇÄ Ãá
 rounded-left L = (x : ‚Ñ§[1/2]) ‚Üí (x ‚àà L ‚áî (‚àÉ p Íûâ ‚Ñ§[1/2] , (x < p) √ó p ‚àà L))

 rounded-right : (R : ùìü ‚Ñ§[1/2]) ‚Üí ùì§‚ÇÄ Ãá
 rounded-right R = (x : ‚Ñ§[1/2]) ‚Üí x ‚àà R ‚áî (‚àÉ q Íûâ ‚Ñ§[1/2] , (q < x) √ó q ‚àà R)

 disjoint : (L R : ùìü ‚Ñ§[1/2]) ‚Üí ùì§‚ÇÄ Ãá
 disjoint L R = (p q : ‚Ñ§[1/2]) ‚Üí p ‚àà L √ó q ‚àà R ‚Üí p < q

 located : (L R : ùìü ‚Ñ§[1/2]) ‚Üí ùì§‚ÇÄ Ãá
 located L R = (p q : ‚Ñ§[1/2]) ‚Üí p < q ‚Üí p ‚àà L ‚à® q ‚àà R

 isCut : (L R : ùìü ‚Ñ§[1/2]) ‚Üí ùì§‚ÇÄ Ãá
 isCut L R = inhabited-left L
           √ó inhabited-right R
           √ó rounded-left L
           √ó rounded-right R
           √ó disjoint L R
           √ó located L R

 ‚Ñù-d : ùì§‚ÇÅ  Ãá
 ‚Ñù-d = Œ£ (L , R) Íûâ ùìü ‚Ñ§[1/2] √ó ùìü ‚Ñ§[1/2] , isCut L R
 
 brick_on-level_ : ‚Ñ§ ‚Üí ‚Ñ§ ‚Üí ‚Ñ§[1/2] √ó ‚Ñ§[1/2]
 brick k on-level n = (normalise (k , pred‚Ñ§ n)) , (normalise (k + pos 2 , pred‚Ñ§ n))

 encoding_at-level_ : ùïÇ ‚Üí ‚Ñ§ ‚Üí ‚Ñ§[1/2] √ó ‚Ñ§[1/2]
 encoding (x , _) at-level n = brick (x n) on-level n

 _‚äÇ_ : ‚Ñ§[1/2] √ó ‚Ñ§[1/2] ‚Üí ‚Ñ§[1/2] √ó ‚Ñ§[1/2] ‚Üí ùì§‚ÇÄ Ãá 
 (a , b) ‚äÇ (c , d) = ((c ‚â§ a) √ó (d < b))
                   ‚àî ((c < a) √ó (d ‚â§ b))

-- encoding-structural : (x : ùïÇ) ‚Üí (n : ‚Ñ§)
--                     ‚Üí (encoding x at-level (succ‚Ñ§ n)) ‚äÇ (encoding x at-level n)
-- encoding-structural (x , b) n = {!!}
 
 ‚ü¶_‚üß : ùïÇ ‚Üí ‚Ñù-d
 ‚ü¶ x , b ‚üß = (L , R) , inhabited-L , {!!}
  where
   L R : ùìü ‚Ñ§[1/2]
   L ((k , n) , lt) = let (l , r) = encoding (x , b) at-level pos (succ n)
                      in (((k , n) , lt) < l) , <‚Ñ§[1/2]-is-prop ((k , n) , lt) l
   R ((k , n) , lt) = let (l , r) = encoding (x , b) at-level pos (succ n)
                      in (r < ((k , n) , lt)) , <‚Ñ§[1/2]-is-prop r (((k , n) , lt))
   inhabited-L : inhabited-left L
   inhabited-L = let (l , r) = encoding (x , b) at-level pos (succ 0)
                 in let (y , y<l) = no-min l
                    in ‚à£ y , {!!} ‚à£ 
   inhabited-R : inhabited-right R
   inhabited-R = {!!}
 
\end{code}

