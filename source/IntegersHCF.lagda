Andrew Sneap - 27th April 2021

I link to this module within the Integers section of my report.

\begin{code}

{-# OPTIONS --without-K --exact-split --safe #-}

open import SpartanMLTT hiding (_+_) --TypeTopology

open import NaturalsAddition renaming (_+_ to _‚Ñï+_) --TypeTopology
open import NaturalsOrder --TypeTopology
open import OrderNotation --TypeTopology
open import UF-Base --TypeTopology
open import UF-Subsingletons --TypeTopology

open import IntegersB
open import IntegersAddition
open import IntegersNegation

open import IntegersDivision
open import IntegersMultiplication
open import IntegersAbs
open import NaturalsDivision renaming (_‚à£_ to _‚Ñï‚à£_)
open import NaturalsMultiplication renaming (_*_ to _‚Ñï*_) 
open import HCF

module IntegersHCF where

‚Ñ§-is-common-divisor : (d x y : ‚Ñ§) ‚Üí ùì§‚ÇÄ Ãá
‚Ñ§-is-common-divisor d x y = (d ‚à£ x) √ó (d ‚à£ y)

‚Ñ§-is-common-divisor-is-prop : (d x y : ‚Ñ§) ‚Üí not-zero d ‚Üí is-prop (‚Ñ§-is-common-divisor d x y)
‚Ñ§-is-common-divisor-is-prop d x y nz p q = √ó-is-prop ((d ‚Ñ§‚à£ x -is-prop) nz) ((d ‚Ñ§‚à£ y -is-prop) nz) p q

‚Ñ§-is-hcf : (d : ‚Ñï) ‚Üí (x y : ‚Ñ§) ‚Üí ùì§‚ÇÄ Ãá
‚Ñ§-is-hcf d x y = ‚Ñ§-is-common-divisor (pos d) x y √ó ((f : ‚Ñï) ‚Üí ‚Ñ§-is-common-divisor (pos f) x y ‚Üí pos f ‚à£ pos d)

‚Ñ§-HCF : (a b : ‚Ñï) ‚Üí Œ£ h Íûâ ‚Ñï , (is-hcf h a b) √ó (Œ£ (x , y) Íûâ ‚Ñ§ √ó ‚Ñ§ , (pos h ‚â° ((pos a) * x) + ((pos b) * y)))
‚Ñ§-HCF = course-of-values-induction (Œª a ‚Üí (b : ‚Ñï) ‚Üí Œ£ h Íûâ ‚Ñï , is-hcf h a b √ó (Œ£ (x , y) Íûâ ‚Ñ§ √ó ‚Ñ§ , pos h ‚â° pos a * x + pos b * y)) step 
 where
  step : (n : ‚Ñï)
       ‚Üí (((a : ‚Ñï) ‚Üí a < n ‚Üí (b : ‚Ñï) ‚Üí Œ£ h Íûâ ‚Ñï , is-hcf h a b √ó (Œ£ (x , y) Íûâ ‚Ñ§ √ó ‚Ñ§ , pos h ‚â° pos a * x + pos b * y)))
       ‚Üí (b : ‚Ñï)
       ‚Üí Œ£ h Íûâ ‚Ñï , is-hcf h n b √ó (Œ£ (x , y) Íûâ ‚Ñ§ √ó ‚Ñ§ , pos h ‚â° pos n * x + pos b * y)
  step 0 IH b = b , (((0 , refl) , 1 , refl) , (Œª x ‚Üí pr‚ÇÇ)) , ((pos 0) , pos 1) , ‚Ñ§+-comm (pos b) (pos 0)
  step (succ n) IH b = I (division b n)
   where
    I : (Œ£ q Íûâ ‚Ñï , Œ£ r Íûâ ‚Ñï , (b ‚â° q ‚Ñï* succ n ‚Ñï+ r) √ó (r < succ n))
      ‚Üí Œ£ h Íûâ ‚Ñï , is-hcf h (succ n) b √ó (Œ£ (x , y) Íûâ ‚Ñ§ √ó ‚Ñ§ , pos h ‚â° pos (succ n) * x + pos b * y)
    I (q , r , e‚ÇÄ , l) = II (IH r l (succ n)) 
     where
      II : Œ£ h Íûâ ‚Ñï , is-hcf h r (succ n) √ó (Œ£ (x , y) Íûâ ‚Ñ§ √ó ‚Ñ§ , pos h ‚â° pos r * x + pos (succ n) * y)
         ‚Üí Œ£ h Íûâ ‚Ñï , is-hcf h (succ n) b √ó (Œ£ (x , y) Íûâ ‚Ñ§ √ó ‚Ñ§ , pos h ‚â° pos (succ n) * x + pos b * y)
      II (h , (((Œ± , Œ±‚Çö) , Œ≤ , Œ≤‚Çö) , Œ≥) , (x , y) , e‚ÇÅ) = h , ((((Œ≤ , Œ≤‚Çö) , i) , ii) , iii)
       where
        i : h ‚Ñï‚à£ b
        i = (q ‚Ñï* Œ≤ ‚Ñï+ Œ±) , e‚ÇÇ
         where
          e‚ÇÇ : h ‚Ñï* (q ‚Ñï* Œ≤ ‚Ñï+ Œ±) ‚â° b
          e‚ÇÇ = h ‚Ñï* (q ‚Ñï* Œ≤ ‚Ñï+ Œ±)       ‚â°‚ü® distributivity-mult-over-nat h (q ‚Ñï* Œ≤) Œ±      ‚ü© 
               h ‚Ñï* (q ‚Ñï* Œ≤) ‚Ñï+ h ‚Ñï* Œ± ‚â°‚ü® ap (Œª z ‚Üí h ‚Ñï* (q ‚Ñï* Œ≤) ‚Ñï+ z) Œ±‚Çö                 ‚ü©
               h ‚Ñï* (q ‚Ñï* Œ≤) ‚Ñï+ r      ‚â°‚ü® ap (_‚Ñï+ r) (mult-associativity h q Œ≤) ‚Åª¬π       ‚ü©
               h ‚Ñï* q ‚Ñï* Œ≤ ‚Ñï+ r        ‚â°‚ü® ap (Œª z ‚Üí z ‚Ñï* Œ≤ ‚Ñï+ r) (mult-commutativity h q) ‚ü©
               q ‚Ñï* h ‚Ñï* Œ≤ ‚Ñï+ r        ‚â°‚ü® ap (_‚Ñï+ r) (mult-associativity q h Œ≤)          ‚ü©
               q ‚Ñï* (h ‚Ñï* Œ≤) ‚Ñï+ r      ‚â°‚ü® ap (Œª z ‚Üí q ‚Ñï* z ‚Ñï+ r) Œ≤‚Çö                       ‚ü©
               q ‚Ñï* succ n ‚Ñï+ r        ‚â°‚ü® e‚ÇÄ ‚Åª¬π ‚ü©
               b                        ‚àé

        ii : (f : ‚Ñï) ‚Üí is-common-divisor f (succ n) b ‚Üí f ‚Ñï‚à£ h
        ii f ((Œº , Œº‚Çö) , ŒΩ , ŒΩ‚Çö) = Œ≥ f ((hcflemma f ŒΩ (q ‚Ñï* Œº) r e‚ÇÉ) , Œº , Œº‚Çö)
         where
          e‚ÇÉ : f ‚Ñï* ŒΩ ‚â° f ‚Ñï* (q ‚Ñï* Œº) ‚Ñï+ r
          e‚ÇÉ = f ‚Ñï* ŒΩ              ‚â°‚ü® ŒΩ‚Çö                                             ‚ü©
               b                   ‚â°‚ü® e‚ÇÄ                                             ‚ü©
               q ‚Ñï* succ n ‚Ñï+ r   ‚â°‚ü® ap (Œª z ‚Üí q ‚Ñï* z ‚Ñï+ r) (Œº‚Çö ‚Åª¬π)                  ‚ü©
               q ‚Ñï* (f ‚Ñï* Œº) ‚Ñï+ r ‚â°‚ü® ap (_‚Ñï+ r) (mult-associativity q f Œº ‚Åª¬π)       ‚ü©
               q ‚Ñï* f ‚Ñï* Œº ‚Ñï+ r   ‚â°‚ü® ap (Œª z ‚Üí z ‚Ñï* Œº ‚Ñï+ r) (mult-commutativity q f) ‚ü©
               f ‚Ñï* q ‚Ñï* Œº ‚Ñï+ r   ‚â°‚ü® ap (_‚Ñï+ r ) (mult-associativity f q Œº)         ‚ü©
               f ‚Ñï* (q ‚Ñï* Œº) ‚Ñï+ r ‚àé

        iii : Œ£ (x' , y') Íûâ ‚Ñ§ √ó ‚Ñ§ , pos h ‚â° pos (succ n) * x' + pos b * y'
        iii = (y + (- pos q * x) , x) , e‚ÇÑ
         where
          e‚ÇÖ : pos b ‚â° pos q * pos (succ n) + (pos r)
          e‚ÇÖ = pos b ‚â°‚ü® ap pos e‚ÇÄ ‚ü©
               pos (q ‚Ñï* succ n ‚Ñï+ r)     ‚â°‚ü® pos-addition-equiv-to-‚Ñï (q ‚Ñï* (succ n)) r ‚Åª¬π ‚ü©
               pos (q ‚Ñï* succ n) + pos r  ‚â°‚ü® ap (_+ pos r) (pos-multiplication-equiv-to-‚Ñï q (succ n)) ‚Åª¬π ‚ü©
               pos q * pos (succ n) + pos r ‚àé
               
          e‚ÇÑ : pos h ‚â° pos (succ n) * (y + (- pos q * x)) + pos b * x
          e‚ÇÑ = pos h                                                                          ‚â°‚ü® e‚ÇÅ ‚ü©
               pos r * x + pos (succ n) * y                                                   ‚â°‚ü® ‚Ñ§+-comm (pos r * x) (pos (succ n) * y) ‚ü©
               pos (succ n) * y + pos r * x                                                   ‚â°‚ü® refl ‚ü©
               pos (succ n) * (y + pos 0) + pos r * x                                         ‚â°‚ü® ap (Œª z ‚Üí pos (succ n) * (y + z) + pos r * x) (‚Ñ§-sum-of-inverse-is-zero (pos q * x) ‚Åª¬π) ‚ü©
               pos (succ n) * (y + (pos q * x + (- pos q * x))) + pos r * x                   ‚â°‚ü® ap (Œª z ‚Üí pos (succ n) * (y + z) + pos r * x) (‚Ñ§+-comm (pos q * x) (- pos q * x)) ‚ü©
               pos (succ n) * (y + ((- pos q * x) + pos q * x)) + pos r * x                   ‚â°‚ü® ap (Œª z ‚Üí pos (succ n) * z + pos r * x) (‚Ñ§+-assoc y (- pos q * x) (pos q * x) ‚Åª¬π) ‚ü©
               pos (succ n) * (y + (- pos q * x) + (pos q) * x) + pos r * x                   ‚â°‚ü® ap (Œª z ‚Üí pos (succ n) * (y + (- pos q * x) + z) + pos r * x) (‚Ñ§*-comm (pos q) x) ‚ü©
               pos (succ n) * (y + (- pos q * x) + x * pos q) + pos r * x                     ‚â°‚ü® ap (_+ pos r * x) (distributivity-mult-over-‚Ñ§' (y + (- pos q * x)) (x * pos q) (pos (succ n))) ‚ü©
               pos (succ n) * (y + (- pos q * x)) + pos (succ n) * (x * pos q) + pos r * x    ‚â°‚ü® ap (Œª z ‚Üí pos (succ n) * (y + (- pos q * x)) + z + pos r * x ) (‚Ñ§*-comm (pos (succ n)) (x * pos q)) ‚ü©
               pos (succ n) * (y + (- pos q * x)) + (x * pos q) * pos (succ n) + pos r * x    ‚â°‚ü® ap (Œª z ‚Üí pos (succ n) * (y + (- pos q * x)) + z + pos r * x ) (‚Ñ§*-assoc x (pos q) (pos (succ n))) ‚ü© 
               pos (succ n) * (y + (- pos q * x)) + x * (pos q * pos (succ n)) + pos r * x    ‚â°‚ü® ap (Œª z ‚Üí pos (succ n) * (y + (- pos q * x)) + z + pos r * x ) (‚Ñ§*-comm x (pos q * pos (succ n))) ‚ü©
               pos (succ n) * (y + (- pos q * x)) + (pos q * pos (succ n)) * x + pos r * x    ‚â°‚ü® ‚Ñ§+-assoc (pos (succ n) * (y + (- pos q * x))) ((pos q + pos q * pos n) * x) (pos r * x) ‚ü©
               pos (succ n) * (y + (- pos q * x)) + ((pos q * pos (succ n)) * x + pos r * x)  ‚â°‚ü® ap (Œª z ‚Üí pos (succ n) * (y + (- pos q * x)) + z) (distributivity-mult-over-‚Ñ§ (pos q * pos (succ n)) (pos r) x ‚Åª¬π) ‚ü©
               pos (succ n) * (y + (- pos q * x)) + (pos q * pos (succ n) + pos r) * x        ‚â°‚ü® ap (Œª z ‚Üí pos (succ n) * (y + (- pos q * x)) + z * x) (e‚ÇÖ ‚Åª¬π) ‚ü©
               pos (succ n) * (y + (- pos q * x)) + pos b * x ‚àé

‚Ñ§-HCF' : (a b : ‚Ñï) ‚Üí Œ£ h Íûâ ‚Ñï , is-hcf h a b
‚Ñ§-HCF' a b = I (‚Ñ§-HCF a b)
 where
  I : (Œ£ h Íûâ ‚Ñï , (is-hcf h a b) √ó (Œ£ (x , y) Íûâ ‚Ñ§ √ó ‚Ñ§ , pos h ‚â° ((pos a) * x) + ((pos b) * y))) ‚Üí Œ£ h Íûâ ‚Ñï , is-hcf h a b
  I (h , is-hcf , bezout) = h , is-hcf


coprime-bezout : (a b : ‚Ñï) ‚Üí coprime a b ‚Üí Œ£ (x , y) Íûâ ‚Ñ§ √ó ‚Ñ§ , pos 1 ‚â° pos a * x + pos b * y
coprime-bezout a b = I (‚Ñ§-HCF a b)
 where
  I : Œ£ h Íûâ ‚Ñï , (is-hcf h a b) √ó (Œ£ (x , y) Íûâ ‚Ñ§ √ó ‚Ñ§ , pos h ‚â° ((pos a) * x) + ((pos b) * y)) ‚Üí coprime a b ‚Üí Œ£ (x , y) Íûâ ‚Ñ§ √ó ‚Ñ§ , pos 1 ‚â° pos a * x + pos b * y
  I (h , is-hcf , (x , y) , bezout) h' = (x , y) , (III ‚Åª¬π ‚àô bezout)
   where
    II : h ‚â° 1
    II = hcf-unique a b (h , is-hcf) (1 , h')
    
    III : pos h ‚â° pos 1
    III = ap pos II

coprime-with-division : (a b c : ‚Ñï) ‚Üí coprime a b ‚Üí a ‚Ñï‚à£ b ‚Ñï* c ‚Üí a ‚Ñï‚à£ c
coprime-with-division a b c coprime (Œ± , Œ±‚Çö) = I (coprime-bezout a b coprime)
 where
  I : Œ£ (x , y) Íûâ ‚Ñ§ √ó ‚Ñ§ , pos 1 ‚â° pos a * x + pos b * y ‚Üí a ‚Ñï‚à£ c
  I ((x , y) , e‚ÇÅ) = pos-div-to-nat-div a c IV
   where 
    II : pos a * (x * pos c) + (pos b * pos c) * y ‚â° pos c
    II = pos a * (x * pos c) + (pos b * pos c) * y ‚â°‚ü® ap‚ÇÇ _+_ (‚Ñ§*-assoc (pos a) x (pos c) ‚Åª¬π) (‚Ñ§*-comm (pos b * pos c) y) ‚ü©
         pos a * x * pos c + y * (pos b * pos c)   ‚â°‚ü® ap (Œª - ‚Üí pos a * x * pos c + -) (‚Ñ§*-assoc y (pos b) (pos c) ‚Åª¬π) ‚ü©
         pos a * x * pos c + y * pos b * pos c     ‚â°‚ü® distributivity-mult-over-‚Ñ§ (pos a * x) (y * pos b) (pos c) ‚Åª¬π ‚ü©
         (pos a * x + y * pos b) * pos c           ‚â°‚ü® ap (Œª - ‚Üí (pos a * x + -) * pos c) (‚Ñ§*-comm y (pos b)) ‚ü©
         (pos a * x + pos b * y) * pos c           ‚â°‚ü® ap (_* pos c) (e‚ÇÅ ‚Åª¬π) ‚ü©
         pos 1 * pos c                             ‚â°‚ü® ‚Ñ§-mult-left-id (pos c) ‚ü©
         pos c                                     ‚àé

    III : pos a ‚à£ pos a * (x * pos c) + (pos b * pos c) * y
    III = ‚Ñ§-‚à£-respects-addition-of-multiples (pos a) (pos a) (pos b * pos c) (x * pos c) y i ii
     where
      i : pos a ‚à£ pos a
      i = pos 1 , refl

      ii : pos a ‚à£ (pos b * pos c)
      ii = pos Œ± , Œ¥
       where
        Œ¥ : pos a * pos Œ± ‚â° pos b * pos c
        Œ¥ = pos a * pos Œ± ‚â°‚ü® pos-multiplication-equiv-to-‚Ñï a Œ± ‚ü©
            pos (a ‚Ñï* Œ±)  ‚â°‚ü® ap pos Œ±‚Çö ‚ü©
            pos (b ‚Ñï* c)  ‚â°‚ü® pos-multiplication-equiv-to-‚Ñï b c ‚Åª¬π ‚ü©
            pos b * pos c ‚àé

    IV : pos a ‚à£ pos c
    IV = transport (pos a ‚à£_) II III

\end{code}
