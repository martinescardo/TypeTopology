--------------------------------------------------------------------------------
Ettore Aldrovandi ealdrovandi@fsu.edu
Keri D'Angelo kd349@cornell.edu

Aug 18, 2021
--------------------------------------------------------------------------------


\begin{code}

{-# OPTIONS --safe --without-K #-}

open import Groups.Type
open import MLTT.Spartan
open import UF.Base
open import UF.Embeddings
open import UF.PropTrunc
open import UF.Sets
open import UF.Sets-Properties
open import UF.Subsingletons-Properties

\end{code}

The image of a group homomorphism has an underlying type which is the
\emph{image} of the underlying function as defined in
UF-ImageAndSurjection.

\begin{code}

module Groups.Image (pt : propositional-truncations-exist) where

open import UF.ImageAndSurjection pt
open PropositionalTruncation pt

private
     fact : (X : Group ùì§) ‚Üí (x y z w : ‚ü® X ‚ü©) ‚Üí (p : x Ôºù y) (q : z Ôºù w) ‚Üí (x ¬∑‚ü® X ‚ü© z Ôºù y ¬∑‚ü® X ‚ü© w)
     fact X x y z w p q = (ap (Œª v ‚Üí v ¬∑‚ü® X ‚ü© z) p) ‚àô (ap (Œª v ‚Üí y ¬∑‚ü® X ‚ü© v) q)

module _ (X : Group ùì§) (Y : Group ùì•) (f : ‚ü® X ‚ü© ‚Üí ‚ü® Y ‚ü©) (isf : is-hom X Y f) where

     group-image : Group (ùì§ ‚äî ùì•)
     group-image = Im , group-structure-im ,
                        is-set-im ,
                        assoc-im ,
                        unit-im ,
                        left-neutral-im ,
                        right-neutral-im ,
                        Œª x ‚Üí inv-im x , inv-left-im x , inv-right-im x
       where
         Im : ùì§ ‚äî ùì• Ãá
         Im = image f

         group-structure-im : group-structure Im
         pr‚ÇÅ (group-structure-im (y‚ÇÅ , p‚ÇÅ) (y‚ÇÇ , p‚ÇÇ)) = y‚ÇÅ ¬∑‚ü® Y ‚ü© y‚ÇÇ
         pr‚ÇÇ (group-structure-im (y‚ÇÅ , p‚ÇÅ) (y‚ÇÇ , p‚ÇÇ)) = do
           x‚ÇÅ , u‚ÇÅ ‚Üê p‚ÇÅ
           x‚ÇÇ , u‚ÇÇ ‚Üê p‚ÇÇ
           ‚à£ ((x‚ÇÅ ¬∑‚ü® X ‚ü© x‚ÇÇ) , ((isf {x‚ÇÅ} {x‚ÇÇ} ‚àô fact Y (f x‚ÇÅ) y‚ÇÅ (f x‚ÇÇ) y‚ÇÇ u‚ÇÅ u‚ÇÇ ) ) )‚à£

         is-set-im : is-set Im
         is-set-im = Œ£-is-set (groups-are-sets Y) (Œª _ ‚Üí props-are-sets ‚à•‚à•-is-prop)

         assoc-im : associative group-structure-im
         assoc-im (y‚ÇÄ , p‚ÇÄ) (y‚ÇÅ , p‚ÇÅ) (y‚ÇÇ , p‚ÇÇ) = to-Œ£-Ôºù ( (assoc Y y‚ÇÄ y‚ÇÅ y‚ÇÇ) , ‚à•‚à•-is-prop _ _ )

         unit-im : Im
         unit-im = (e‚ü® Y ‚ü©) , ‚à£ ((e‚ü® X ‚ü©) , homs-preserve-unit X Y f isf) ‚à£

         left-neutral-im : left-neutral unit-im group-structure-im
         left-neutral-im (y , p) = to-Œ£-Ôºù ((unit-left Y y) , ‚à•‚à•-is-prop _ _)

         right-neutral-im : right-neutral unit-im group-structure-im
         right-neutral-im (y , p) = to-Œ£-Ôºù ((unit-right Y y) , (‚à•‚à•-is-prop _ _))

         inv-im : Im ‚Üí Im
         pr‚ÇÅ (inv-im (y , p)) = inv Y y
         pr‚ÇÇ (inv-im (y , p)) = do
                   x , u ‚Üê p
                   ‚à£ (inv X x) , ((homs-preserve-invs X Y f isf x) ‚àô (ap (Œª v ‚Üí inv Y v) u)) ‚à£

         inv-left-im : (u : Im) ‚Üí group-structure-im (inv-im u) u Ôºù unit-im
         inv-left-im (y , p) = to-Œ£-Ôºù ((inv-left Y y) , (‚à•‚à•-is-prop _ _))

         inv-right-im : (u : Im) ‚Üí group-structure-im u (inv-im u) Ôºù unit-im
         inv-right-im (y , p) = to-Œ£-Ôºù ((inv-right Y y) , (‚à•‚à•-is-prop _ _))

\end{code}


The group image comes with two canonical maps. One is the "injection"
into the target. We prove that it is left-cancellable, hence an
embedding. The other is the obvious map from the source, and we prove
it is a surjection.


\begin{code}

     -- Canonical map from the image to the target
     group-image-inj : ‚ü® group-image ‚ü© ‚Üí ‚ü® Y ‚ü©
     group-image-inj = Œª { (y , p) ‚Üí y}

     group-image-inj-is-hom : is-hom group-image Y group-image-inj
     group-image-inj-is-hom = refl

     -- Canonical map is left cancellable
     group-image-inj-is-lc : left-cancellable group-image-inj
     group-image-inj-is-lc u = to-Œ£-Ôºù (u , ‚à•‚à•-is-prop _ _)

     -- Canonical map is an embedding
     group-image-inj-is-embedding : is-embedding group-image-inj
     group-image-inj-is-embedding = lc-maps-into-sets-are-embeddings
                                    group-image-inj
                                    group-image-inj-is-lc
                                    (groups-are-sets Y)

     group-image-inj-is-embedding‚ÇÅ : is-embedding group-image-inj
     group-image-inj-is-embedding‚ÇÅ = pr‚ÇÅ-is-embedding (Œª y ‚Üí ‚àÉ-is-prop)

     -- Canonical map from the source to the image
     group-image-srj : ‚ü® X ‚ü© ‚Üí ‚ü® group-image ‚ü©
     group-image-srj = Œª {x ‚Üí (f x) , ‚à£ (x , refl) ‚à£}

     group-image-srj-is-hom : is-hom X group-image group-image-srj
     group-image-srj-is-hom {x‚ÇÅ} {x‚ÇÇ} = to-Œ£-Ôºù (isf , ‚à•‚à•-is-prop _ _)

     group-image-srj-is-surjection : is-surjection group-image-srj
     group-image-srj-is-surjection (y , p) = do
       x , u ‚Üê p
       ‚à£ x , to-Œ£-Ôºù (u , (‚à•‚à•-is-prop _ _)) ‚à£

\end{code}
