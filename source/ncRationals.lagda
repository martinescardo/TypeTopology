Andrew Sneap - 26th November 2021

In this file I define the free rationals. They are rationals they may not be in the lowest terms, with (a , b) : ‚Ñ§ √ó ‚Ñï were ‚Ñ§ is the numerator, and b represents a denominator of b+1, ruling out the possibility of a zero-denominator.

\begin{code}

{-# OPTIONS --without-K --exact-split --safe #-}

open import SpartanMLTT renaming (_+_ to _‚àî_) --TypeTopology

open import DiscreteAndSeparated --TypeTopology
open import NaturalNumbers-Properties --TypeToplogy
open import UF-Base hiding (_‚âà_)  --TypeTopology
open import UF-FunExt --TypeTopology
open import UF-Miscelanea --TypeTopology
open import UF-Subsingletons --TypeTopology

open import IntegersAbs
open import IntegersB
open import IntegersHCF
open import IntegersMultiplication
open import IntegersOrder
open import HCF
open import NaturalsDivision
open import NaturalsMultiplication renaming (_*_ to _‚Ñï*_)

module ncRationals where

‚Ñö‚Çô : ùì§‚ÇÄ Ãá
‚Ñö‚Çô = ‚Ñ§ √ó ‚Ñï

is-in-lowest-terms : ‚Ñö‚Çô ‚Üí ùì§‚ÇÄ Ãá
is-in-lowest-terms (x , y) = coprime (abs x) (succ y)

is-in-lowest-terms-is-prop : Fun-Ext ‚Üí (q : ‚Ñö‚Çô) ‚Üí is-prop (is-in-lowest-terms q)
is-in-lowest-terms-is-prop fe (x , y) = coprime-is-prop fe (abs x) (succ y)

‚Ñö‚Çô-is-discrete : is-discrete ‚Ñö‚Çô
‚Ñö‚Çô-is-discrete = Œ£-is-discrete ‚Ñ§-is-discrete Œª _ ‚Üí ‚Ñï-is-discrete

‚Ñö‚Çô-is-set : is-set ‚Ñö‚Çô
‚Ñö‚Çô-is-set = discrete-types-are-sets ‚Ñö‚Çô-is-discrete

_‚âà_ : (p q : ‚Ñö‚Çô) ‚Üí ùì§‚ÇÄ Ãá
(x , a) ‚âà (y , b) = x * pos (succ b) ‚â° y * pos (succ a)

‚âà-refl : (q : ‚Ñö‚Çô) ‚Üí q ‚âà q
‚âà-refl q = refl

‚âà-sym : (p q : ‚Ñö‚Çô) ‚Üí p ‚âà q ‚Üí q ‚âà p
‚âà-sym p q e = e ‚Åª¬π

‚âà-trans : (p q r : ‚Ñö‚Çô) ‚Üí p ‚âà q ‚Üí q ‚âà r ‚Üí p ‚âà r
‚âà-trans (x , a) (y , b) (z , c) e‚ÇÅ e‚ÇÇ = conclusion
 where
  a' = pos (succ a)
  b' = pos (succ b)
  c' = pos (succ c)
  
  I : x * b' * c' ‚â° y * a' * c'
  I = ap (_* c') e‚ÇÅ

  II : a' * (y * c') ‚â° a' * (z * b')
  II = ap (a' *_) e‚ÇÇ

  III : b' * (x * c') ‚â° b' * (z * a')
  III = b' * (x * c') ‚â°‚ü® ‚Ñ§*-assoc b' x c' ‚Åª¬π ‚ü©
        b' * x * c'   ‚â°‚ü® ap (_* c') (‚Ñ§*-comm b' x) ‚ü©
        x * b' * c'   ‚â°‚ü® I ‚ü©
        y * a' * c'   ‚â°‚ü® ap (_* c') (‚Ñ§*-comm y a') ‚ü©
        a' * y * c'   ‚â°‚ü® ‚Ñ§*-assoc a' y c'   ‚ü©
        a' * (y * c') ‚â°‚ü® II ‚ü©
        a' * (z * b') ‚â°‚ü® ‚Ñ§-mult-rearrangement' z b' a' ‚ü©
        b' * (z * a') ‚àé
        
  conclusion : (x , a) ‚âà (z , c)
  conclusion = ‚Ñ§-mult-left-cancellable (x * c') (z * a') (b') (Œª z ‚Üí z) III

equiv-with-lowest-terms-is-equal : (a b : ‚Ñö‚Çô)
                                 ‚Üí a ‚âà b
                                 ‚Üí is-in-lowest-terms a
                                 ‚Üí is-in-lowest-terms b
                                 ‚Üí a ‚â° b
equiv-with-lowest-terms-is-equal (x , a) (y , b) e ((m‚ÇÅ , m‚ÇÇ) , n) ((m‚ÇÅ' , m‚ÇÇ') , n') = to-√ó-‚â° xyequal abequal
 where
  e' : (x * pos (succ b)) ‚â° (y * pos (succ a))
  e' = e

  Œ≥ : abs (x * pos (succ b)) ‚â° abs (y * pos (succ a))
  Œ≥ = ap abs e'

  Œ¥ : abs x ‚Ñï* succ b ‚â° abs y ‚Ñï* succ a
  Œ¥ = abs x ‚Ñï* abs (pos (succ b)) ‚â°‚ü® abs-over-mult x (pos (succ b))  ‚Åª¬π ‚ü©
      abs (x * pos (succ b))     ‚â°‚ü® Œ≥ ‚ü©
      abs (y * pos (succ a))     ‚â°‚ü® abs-over-mult y (pos (succ a)) ‚ü©
      abs y ‚Ñï* abs (pos (succ a)) ‚àé
 
  s : (succ a) ‚à£ ((abs x) ‚Ñï* (succ b))
  s = (abs y) , I
   where
    I : succ a ‚Ñï* abs y ‚â° abs x ‚Ñï* succ b
    I = succ a ‚Ñï* abs y ‚â°‚ü® mult-commutativity (succ a) (abs y) ‚ü©
        abs y ‚Ñï* succ a ‚â°‚ü® Œ¥ ‚Åª¬π ‚ü©
        abs x ‚Ñï* succ b ‚àé

  s' : (succ b) ‚à£ (abs y) ‚Ñï* (succ a)
  s' = (abs x) , I
   where
    I : succ b ‚Ñï* abs x ‚â° abs y ‚Ñï* succ a
    I = succ b ‚Ñï* abs x ‚â°‚ü® mult-commutativity (succ b) (abs x) ‚ü©
        abs x ‚Ñï* succ b ‚â°‚ü® Œ¥ ‚ü©
        abs y ‚Ñï* succ a ‚àé

  a-divides-b : (succ a) ‚à£ (succ b)
  a-divides-b = coprime-with-division (succ a) (abs x) (succ b) ((m‚ÇÇ , m‚ÇÅ) , Œª f' (h‚ÇÅ , h‚ÇÇ) ‚Üí n f' (h‚ÇÇ , h‚ÇÅ)) s

  b-divides-a : (succ b) ‚à£ (succ a)
  b-divides-a = coprime-with-division (succ b) (abs y) (succ a) ((m‚ÇÇ' , m‚ÇÅ') , Œª f (h‚ÇÅ , h‚ÇÇ) ‚Üí n' f (h‚ÇÇ , h‚ÇÅ)) s'

  abequal : a ‚â° b
  abequal = succ-lc (‚à£-anti (succ a) (succ b) a-divides-b b-divides-a)

  e'' : x * pos (succ a) ‚â° y * pos (succ a)
  e'' = ap (x *_) (ap pos (ap succ abequal)) ‚àô e

  xyequal : x ‚â° y
  xyequal = ‚Ñ§-mult-right-cancellable x y (pos (succ a)) (Œª z ‚Üí z) e''


\end{code}
