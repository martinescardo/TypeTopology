
Andrew Sneap - 11th November 2021

\begin{code}

{-# OPTIONS --without-K --exact-split --safe #-}

open import SpartanMLTT renaming (_+_ to _‚àî_) --TypeTopology

open import NaturalNumbers-Properties
open import MoreNaturalProperties
open import OrderNotation
open import NaturalsAddition renaming (_+_ to _‚Ñï+_)
open import Plus-Properties
open import UF-Base hiding (_‚âà_) --TypeTopology
open import UF-FunExt --TypeTopology
open import UF-Subsingletons --TypeTopology

open import IntegersAbs
open import IntegersAddition renaming (_+_ to _‚Ñ§+_)
open import IntegersB
open import IntegersMultiplication renaming (_*_ to _‚Ñ§*_)
open import IntegersOrder
open import NaturalsMultiplication renaming (_*_ to _‚Ñï*_)
open import ncRationals
open import ncRationalsOperations renaming (_+_ to _‚Ñö‚Çô+_ ; _*_ to _‚Ñö‚Çô*_) hiding (-_)
open import ncRationalsOrder 
open import Rationals
open import RationalsAddition
open import RationalsMultiplication
open import RationalsNegation

_‚â§‚Ñö_ : (p q : ‚Ñö) ‚Üí ùì§‚ÇÄ Ãá
(p , _) ‚â§‚Ñö (q , _) = p ‚Ñö‚Çô‚â§ q

instance
 Order-‚Ñö-‚Ñö : Order ‚Ñö ‚Ñö
 _‚â§_ {{Order-‚Ñö-‚Ñö}} = _‚â§‚Ñö_

‚Ñö‚â§-is-prop : (p q : ‚Ñö) ‚Üí is-prop (p ‚â§ q)
‚Ñö‚â§-is-prop (p , _) (q , _) = ‚Ñö‚Çô‚â§-is-prop p q

_<‚Ñö_ : (p q : ‚Ñö) ‚Üí ùì§‚ÇÄ Ãá
(p , _) <‚Ñö (q , _) = p ‚Ñö‚Çô< q

instance
 Strict-Order-‚Ñö-‚Ñö : Strict-Order ‚Ñö ‚Ñö
 _<_ {{Strict-Order-‚Ñö-‚Ñö}} = _<‚Ñö_

‚Ñö<-is-prop : (p q : ‚Ñö) ‚Üí is-prop (p < q)
‚Ñö<-is-prop (p , _) (q , _) = ‚Ñö‚Çô<-is-prop p q

‚Ñö<-trans : (p q r : ‚Ñö) ‚Üí p < q ‚Üí q < r ‚Üí p < r
‚Ñö<-trans (p , _) (q , _) (r , _) Œ± Œ≤ = ‚Ñö‚Çô<-trans p q r Œ± Œ≤

‚Ñö‚â§-refl : (q : ‚Ñö) ‚Üí q ‚â§ q
‚Ñö‚â§-refl q = 0 , by-definition

‚Ñö<-coarser-than-‚â§ : (p q : ‚Ñö) ‚Üí p < q ‚Üí p ‚â§ q
‚Ñö<-coarser-than-‚â§ (p , _) (q , _) l = ‚Ñö‚Çô<-coarser-than-‚â§ p q l

to‚Ñö-< : (p q : ‚Ñö‚Çô) ‚Üí p ‚Ñö‚Çô< q ‚Üí to‚Ñö p < to‚Ñö q
to‚Ñö-< (x , a) (y , b) l = ordering-right-cancellable (x' ‚Ñ§* pos (succ b')) (y' ‚Ñ§* (pos (succ a'))) (pos (succ h ‚Ñï* succ h')) IV V
 where
  I : Œ£ ((x' , a') , p) Íûâ ‚Ñö , (Œ£ h Íûâ ‚Ñï , (x ‚â° (pos (succ h)) ‚Ñ§* x') √ó (succ a ‚â° (succ h) ‚Ñï* succ a'))
  I = to‚Ñölemma (x , a)

  II : Œ£ ((y' , b') , p) Íûâ ‚Ñö , (Œ£ h' Íûâ ‚Ñï , (y ‚â° (pos (succ h')) ‚Ñ§* y') √ó (succ b ‚â° (succ h') ‚Ñï* succ b'))
  II = to‚Ñölemma (y , b)

  x' y' : ‚Ñ§
  x' = pr‚ÇÅ (pr‚ÇÅ (pr‚ÇÅ I))
  y' = pr‚ÇÅ (pr‚ÇÅ (pr‚ÇÅ II))

  a' b' : ‚Ñï
  a' = pr‚ÇÇ (pr‚ÇÅ (pr‚ÇÅ I))
  b' = pr‚ÇÇ (pr‚ÇÅ (pr‚ÇÅ II))

  h h' : ‚Ñï
  h = pr‚ÇÅ (pr‚ÇÇ I)
  h' = pr‚ÇÅ (pr‚ÇÇ II)

  Œ± : x ‚â° (pos (succ h)) ‚Ñ§* x'
  Œ± = pr‚ÇÅ (pr‚ÇÇ (pr‚ÇÇ I))

  Œ≤ : succ a ‚â° (succ h) ‚Ñï* succ a'
  Œ≤ = pr‚ÇÇ (pr‚ÇÇ (pr‚ÇÇ I))

  Œ±' : y ‚â° (pos (succ h')) ‚Ñ§* y'
  Œ±' = pr‚ÇÅ (pr‚ÇÇ (pr‚ÇÇ II))

  Œ≤' : succ b ‚â° (succ h') ‚Ñï* succ b'
  Œ≤' = pr‚ÇÇ (pr‚ÇÇ (pr‚ÇÇ II))

  III : greater-than-zero (pos (succ h) ‚Ñ§* pos (succ h'))
  III = greater-than-zero-mult-trans (pos (succ h)) (pos (succ h')) ‚ãÜ ‚ãÜ

  IV : greater-than-zero (pos (succ h ‚Ñï* succ h'))
  IV = transport (Œª z ‚Üí greater-than-zero z) (pos-multiplication-equiv-to-‚Ñï (succ h) (succ h')) III

  V : ((x' ‚Ñ§* pos (succ b')) ‚Ñ§* pos (succ h ‚Ñï* succ h')) < ((y' ‚Ñ§* pos (succ a')) ‚Ñ§* pos (succ h ‚Ñï* succ h'))
  V = transport‚ÇÇ (Œª z z' ‚Üí z < z') VI VII l
   where
    VI : x ‚Ñ§* pos (succ b) ‚â° x' ‚Ñ§* pos (succ b') ‚Ñ§* pos (succ h ‚Ñï* succ h')
    VI = x ‚Ñ§* pos (succ b)                                         ‚â°‚ü® ap‚ÇÇ (Œª z z' ‚Üí z ‚Ñ§* z') Œ± (ap pos Œ≤') ‚ü©
          pos (succ h) ‚Ñ§* x' ‚Ñ§* pos (succ h' ‚Ñï* succ b')            ‚â°‚ü® ap (pos (succ h) ‚Ñ§* x' ‚Ñ§*_) (pos-multiplication-equiv-to-‚Ñï (succ h') (succ b') ‚Åª¬π) ‚ü©
          pos (succ h) ‚Ñ§* x' ‚Ñ§* (pos (succ h') ‚Ñ§* (pos (succ b')))  ‚â°‚ü® ap‚ÇÇ (Œª z z' ‚Üí z ‚Ñ§* z') (‚Ñ§*-comm (pos (succ h)) x') (‚Ñ§*-comm (pos (succ h')) (pos (succ b'))) ‚ü©
          x' ‚Ñ§* pos (succ h) ‚Ñ§* (pos (succ b') ‚Ñ§* pos (succ h'))    ‚â°‚ü® ‚Ñ§*-assoc x' (pos (succ h)) (pos (succ b') ‚Ñ§* pos (succ h')) ‚ü©
          x' ‚Ñ§* (pos (succ h) ‚Ñ§* (pos (succ b') ‚Ñ§* pos (succ h')))  ‚â°‚ü® ap (x' ‚Ñ§*_) (‚Ñ§-mult-rearrangement''' (pos (succ h)) (pos (succ b')) (pos (succ h'))) ‚ü©
          x' ‚Ñ§* (pos (succ b') ‚Ñ§* (pos (succ h) ‚Ñ§* pos (succ h')))  ‚â°‚ü® ‚Ñ§*-assoc x' (pos (succ b')) (pos (succ h) ‚Ñ§* pos (succ h')) ‚Åª¬π ‚ü©
          x' ‚Ñ§* pos (succ b') ‚Ñ§* (pos (succ h) ‚Ñ§* pos (succ h'))    ‚â°‚ü® ap ( x' ‚Ñ§* pos (succ b') ‚Ñ§*_) (pos-multiplication-equiv-to-‚Ñï (succ h) (succ h')) ‚ü©
          x' ‚Ñ§* pos (succ b') ‚Ñ§* pos (succ h ‚Ñï* succ h') ‚àé

    VII : y ‚Ñ§* pos (succ a) ‚â° y' ‚Ñ§* pos (succ a') ‚Ñ§* pos (succ h ‚Ñï* succ h')
    VII = y ‚Ñ§* pos (succ a)                                         ‚â°‚ü® ap‚ÇÇ (Œª z z' ‚Üí z ‚Ñ§* z') Œ±' (ap pos Œ≤) ‚ü©
           pos (succ h') ‚Ñ§* y' ‚Ñ§* pos (succ h ‚Ñï* succ a')            ‚â°‚ü® ap (pos (succ h') ‚Ñ§* y' ‚Ñ§*_) (pos-multiplication-equiv-to-‚Ñï (succ h) (succ a') ‚Åª¬π) ‚ü©
           pos (succ h') ‚Ñ§* y' ‚Ñ§* (pos (succ h) ‚Ñ§* pos (succ a'))    ‚â°‚ü® ap‚ÇÇ (Œª z z' ‚Üí z ‚Ñ§* z') (‚Ñ§*-comm (pos (succ h')) y') (‚Ñ§*-comm (pos (succ h)) (pos (succ a'))) ‚ü©
           y' ‚Ñ§* pos (succ h') ‚Ñ§* (pos (succ a') ‚Ñ§* pos (succ h))    ‚â°‚ü® ‚Ñ§*-assoc y' (pos (succ h')) (pos (succ a') ‚Ñ§* pos (succ h)) ‚ü©
           y' ‚Ñ§* (pos (succ h') ‚Ñ§* (pos (succ a') ‚Ñ§* pos (succ h)))  ‚â°‚ü® ap (y' ‚Ñ§*_) (‚Ñ§-mult-rearrangement''' (pos (succ h')) (pos (succ a')) (pos (succ h))) ‚ü©
           y' ‚Ñ§* (pos (succ a') ‚Ñ§* (pos (succ h') ‚Ñ§* pos (succ h)))  ‚â°‚ü® ‚Ñ§*-assoc y' (pos (succ a')) (pos (succ h') ‚Ñ§* pos (succ h)) ‚Åª¬π ‚ü©
           y' ‚Ñ§* pos (succ a') ‚Ñ§* (pos (succ h') ‚Ñ§* pos (succ h))    ‚â°‚ü® ap (y' ‚Ñ§* pos (succ a') ‚Ñ§*_) (pos-multiplication-equiv-to-‚Ñï (succ h') (succ h)) ‚ü©
           y' ‚Ñ§* pos (succ a') ‚Ñ§* pos (succ h' ‚Ñï* succ h)            ‚â°‚ü® ap (Œª z ‚Üí y' ‚Ñ§* pos (succ a') ‚Ñ§* pos z) (mult-commutativity (succ h') (succ h)) ‚ü©
           y' ‚Ñ§* pos (succ a') ‚Ñ§* pos (succ h ‚Ñï* succ h') ‚àé

to‚Ñö-‚â§ : (p q : ‚Ñö‚Çô) ‚Üí p ‚Ñö‚Çô‚â§ q ‚Üí to‚Ñö p ‚â§ to‚Ñö q
to‚Ñö-‚â§ (x , a) (y , b) l = ‚Ñ§‚â§-ordering-right-cancellable (x' ‚Ñ§* pos (succ b')) (y' ‚Ñ§* (pos (succ a'))) (pos (succ h ‚Ñï* succ h')) III IV
 where
  I : Œ£ ((x' , a') , p) Íûâ ‚Ñö , (Œ£ h Íûâ ‚Ñï , (x ‚â° (pos (succ h)) ‚Ñ§* x') √ó (succ a ‚â° (succ h) ‚Ñï* succ a'))
  I = to‚Ñölemma (x , a)

  II : Œ£ ((y' , b') , p) Íûâ ‚Ñö , (Œ£ h' Íûâ ‚Ñï , (y ‚â° (pos (succ h')) ‚Ñ§* y') √ó (succ b ‚â° (succ h') ‚Ñï* succ b'))
  II = to‚Ñölemma (y , b)

  x' y' : ‚Ñ§
  x' = pr‚ÇÅ (pr‚ÇÅ (pr‚ÇÅ I))
  y' = pr‚ÇÅ (pr‚ÇÅ (pr‚ÇÅ II))

  a' b' : ‚Ñï
  a' = pr‚ÇÇ (pr‚ÇÅ (pr‚ÇÅ I))
  b' = pr‚ÇÇ (pr‚ÇÅ (pr‚ÇÅ II))

  h h' : ‚Ñï
  h = pr‚ÇÅ (pr‚ÇÇ I)
  h' = pr‚ÇÅ (pr‚ÇÇ II)

  Œ± : x ‚â° (pos (succ h)) ‚Ñ§* x'
  Œ± = pr‚ÇÅ (pr‚ÇÇ (pr‚ÇÇ I))

  Œ≤ : succ a ‚â° (succ h) ‚Ñï* succ a'
  Œ≤ = pr‚ÇÇ (pr‚ÇÇ (pr‚ÇÇ I))

  Œ±' : y ‚â° (pos (succ h')) ‚Ñ§* y'
  Œ±' = pr‚ÇÅ (pr‚ÇÇ (pr‚ÇÇ II))

  Œ≤' : succ b ‚â° (succ h') ‚Ñï* succ b'
  Œ≤' = pr‚ÇÇ (pr‚ÇÇ (pr‚ÇÇ II))

  III : greater-than-zero (pos (succ h ‚Ñï* succ h'))
  III = transport (Œª - ‚Üí greater-than-zero -) (pos-multiplication-equiv-to-‚Ñï (succ h) (succ h')) (greater-than-zero-mult-trans (pos (succ h)) (pos (succ h')) ‚ãÜ ‚ãÜ)

  IV : (x' ‚Ñ§* pos (succ b') ‚Ñ§* pos (succ h ‚Ñï* succ h')) ‚â§ (y' ‚Ñ§* pos (succ a') ‚Ñ§* pos (succ h ‚Ñï* succ h'))
  IV = transport‚ÇÇ (Œª z z' ‚Üí z ‚â§ z') VI VII l
   where
    VI : x ‚Ñ§* pos (succ b) ‚â° x' ‚Ñ§* pos (succ b') ‚Ñ§* pos (succ h ‚Ñï* succ h')
    VI = x ‚Ñ§* pos (succ b)                                         ‚â°‚ü® ap‚ÇÇ (Œª z z' ‚Üí z ‚Ñ§* z') Œ± (ap pos Œ≤') ‚ü©
          pos (succ h) ‚Ñ§* x' ‚Ñ§* pos (succ h' ‚Ñï* succ b')            ‚â°‚ü® ap (pos (succ h) ‚Ñ§* x' ‚Ñ§*_) (pos-multiplication-equiv-to-‚Ñï (succ h') (succ b') ‚Åª¬π) ‚ü©
          pos (succ h) ‚Ñ§* x' ‚Ñ§* (pos (succ h') ‚Ñ§* (pos (succ b')))  ‚â°‚ü® ap‚ÇÇ (Œª z z' ‚Üí z ‚Ñ§* z') (‚Ñ§*-comm (pos (succ h)) x') (‚Ñ§*-comm (pos (succ h')) (pos (succ b'))) ‚ü©
          x' ‚Ñ§* pos (succ h) ‚Ñ§* (pos (succ b') ‚Ñ§* pos (succ h'))    ‚â°‚ü® ‚Ñ§*-assoc x' (pos (succ h)) (pos (succ b') ‚Ñ§* pos (succ h')) ‚ü©
          x' ‚Ñ§* (pos (succ h) ‚Ñ§* (pos (succ b') ‚Ñ§* pos (succ h')))  ‚â°‚ü® ap (x' ‚Ñ§*_) (‚Ñ§-mult-rearrangement''' (pos (succ h)) (pos (succ b')) (pos (succ h'))) ‚ü©
          x' ‚Ñ§* (pos (succ b') ‚Ñ§* (pos (succ h) ‚Ñ§* pos (succ h')))  ‚â°‚ü® ‚Ñ§*-assoc x' (pos (succ b')) (pos (succ h) ‚Ñ§* pos (succ h')) ‚Åª¬π ‚ü©
          x' ‚Ñ§* pos (succ b') ‚Ñ§* (pos (succ h) ‚Ñ§* pos (succ h'))    ‚â°‚ü® ap ( x' ‚Ñ§* pos (succ b') ‚Ñ§*_) (pos-multiplication-equiv-to-‚Ñï (succ h) (succ h')) ‚ü©
          x' ‚Ñ§* pos (succ b') ‚Ñ§* pos (succ h ‚Ñï* succ h') ‚àé

    VII : y ‚Ñ§* pos (succ a) ‚â° y' ‚Ñ§* pos (succ a') ‚Ñ§* pos (succ h ‚Ñï* succ h')
    VII = y ‚Ñ§* pos (succ a)                                         ‚â°‚ü® ap‚ÇÇ (Œª z z' ‚Üí z ‚Ñ§* z') Œ±' (ap pos Œ≤) ‚ü©
           pos (succ h') ‚Ñ§* y' ‚Ñ§* pos (succ h ‚Ñï* succ a')            ‚â°‚ü® ap (pos (succ h') ‚Ñ§* y' ‚Ñ§*_) (pos-multiplication-equiv-to-‚Ñï (succ h) (succ a') ‚Åª¬π) ‚ü©
           pos (succ h') ‚Ñ§* y' ‚Ñ§* (pos (succ h) ‚Ñ§* pos (succ a'))    ‚â°‚ü® ap‚ÇÇ (Œª z z' ‚Üí z ‚Ñ§* z') (‚Ñ§*-comm (pos (succ h')) y') (‚Ñ§*-comm (pos (succ h)) (pos (succ a'))) ‚ü©
           y' ‚Ñ§* pos (succ h') ‚Ñ§* (pos (succ a') ‚Ñ§* pos (succ h))    ‚â°‚ü® ‚Ñ§*-assoc y' (pos (succ h')) (pos (succ a') ‚Ñ§* pos (succ h)) ‚ü©
           y' ‚Ñ§* (pos (succ h') ‚Ñ§* (pos (succ a') ‚Ñ§* pos (succ h)))  ‚â°‚ü® ap (y' ‚Ñ§*_) (‚Ñ§-mult-rearrangement''' (pos (succ h')) (pos (succ a')) (pos (succ h))) ‚ü©
           y' ‚Ñ§* (pos (succ a') ‚Ñ§* (pos (succ h') ‚Ñ§* pos (succ h)))  ‚â°‚ü® ‚Ñ§*-assoc y' (pos (succ a')) (pos (succ h') ‚Ñ§* pos (succ h)) ‚Åª¬π ‚ü©
           y' ‚Ñ§* pos (succ a') ‚Ñ§* (pos (succ h') ‚Ñ§* pos (succ h))    ‚â°‚ü® ap (y' ‚Ñ§* pos (succ a') ‚Ñ§*_) (pos-multiplication-equiv-to-‚Ñï (succ h') (succ h)) ‚ü©
           y' ‚Ñ§* pos (succ a') ‚Ñ§* pos (succ h' ‚Ñï* succ h)            ‚â°‚ü® ap (Œª z ‚Üí y' ‚Ñ§* pos (succ a') ‚Ñ§* pos z) (mult-commutativity (succ h') (succ h)) ‚ü©
           y' ‚Ñ§* pos (succ a') ‚Ñ§* pos (succ h ‚Ñï* succ h') ‚àé


‚Ñö-no-max-element : (p : ‚Ñö) ‚Üí Œ£ q Íûâ ‚Ñö , (p < q)
‚Ñö-no-max-element ((x , a) , Œ±) = q , III
 where
  q : ‚Ñö 
  q = to‚Ñö ((succ‚Ñ§ x) , a)

  x' : ‚Ñ§
  x' = pr‚ÇÅ (pr‚ÇÅ q)
  a' : ‚Ñï
  a' = pr‚ÇÇ (pr‚ÇÅ q)

  I : succ‚Ñ§ x ‚Ñ§* pos (succ a') ‚â° x' ‚Ñ§* pos (succ a)
  I = ‚âà-to‚Ñö ((succ‚Ñ§ x) , a)

  II : (x ‚Ñ§* pos (succ a')) < (succ‚Ñ§ x ‚Ñ§* pos (succ a'))
  II = positive-multiplication-preserves-order x (succ‚Ñ§ x) (pos (succ a')) ‚ãÜ (<-incr‚Ñ§ x)

  III : x ‚Ñ§* pos (succ a') < (x' ‚Ñ§* pos (succ a))
  III = transport (x ‚Ñ§* pos (succ a') <_) I II

‚Ñö-no-least-element : (q : ‚Ñö) ‚Üí Œ£ p Íûâ ‚Ñö , p < q
‚Ñö-no-least-element ((x , a) , Œ±) = p , III
 where
  p : ‚Ñö
  p = to‚Ñö ((pred‚Ñ§ x) , a)

  x' : ‚Ñ§
  x' = pr‚ÇÅ (pr‚ÇÅ p)
  a' : ‚Ñï
  a' = pr‚ÇÇ (pr‚ÇÅ p)

  I : pred‚Ñ§ x ‚Ñ§* pos (succ a') ‚â° x' ‚Ñ§* pos (succ a)
  I = ‚âà-to‚Ñö ((pred‚Ñ§ x) , a)

  II : (pred‚Ñ§ x ‚Ñ§* pos (succ a')) < (x ‚Ñ§* pos (succ a'))
  II = positive-multiplication-preserves-order (pred‚Ñ§ x) x (pos (succ a')) ‚ãÜ (<-pred‚Ñ§ x)

  III : x' ‚Ñ§* pos (succ a) < (x ‚Ñ§* pos (succ a'))
  III = transport (_< x ‚Ñ§* pos (succ a')) I II

‚Ñö-trichotomous-lemma : Fun-Ext ‚Üí ((p , Œ±) (q , Œ≤) : ‚Ñö) ‚Üí p ‚âà q ‚Üí p , Œ± ‚â° q , Œ≤
‚Ñö-trichotomous-lemma fe (p , Œ±) (q , Œ≤) e = to-subtype-‚â° (Œª - ‚Üí is-in-lowest-terms-is-prop fe -) (equiv-with-lowest-terms-is-equal p q e Œ± Œ≤)

‚Ñö-trichotomous : Fun-Ext ‚Üí (p q : ‚Ñö) ‚Üí (p < q) ‚àî (p ‚â° q) ‚àî (q < p)
‚Ñö-trichotomous fe ((x , a) , Œ±) ((y , b) , Œ≤) = f (‚Ñ§-trichotomous (x ‚Ñ§* pos (succ b)) (y ‚Ñ§* pos (succ a)))
 where
  f : (x ‚Ñ§* pos (succ b)) < (y ‚Ñ§* pos (succ a))
     ‚àî (x ‚Ñ§* pos (succ b) ‚â° y ‚Ñ§* pos (succ a))
     ‚àî (y ‚Ñ§* pos (succ a)) < (x ‚Ñ§* pos (succ b))
    ‚Üí  ((x , a) , Œ±) < ((y , b) , Œ≤)
     ‚àî ((x , a) , Œ± ‚â° (y , b) , Œ≤)
     ‚àî ((y , b) , Œ≤) < ((x , a) , Œ±)
  f (inl z)       = inl z
  f (inr (inl z)) = inr (inl (‚Ñö-trichotomous-lemma fe ((x , a) , Œ±) ((y , b) , Œ≤) z))
  f (inr (inr z)) = inr (inr z)

‚Ñö-dichotomous : (p q : ‚Ñö) ‚Üí p ‚â§ q ‚àî q ‚â§ p
‚Ñö-dichotomous ((x , a) , Œ±) ((y , b) , Œ≤) = ‚Ñ§-dichotomous (x ‚Ñ§* pos (succ b)) (y ‚Ñ§* pos (succ a))

located-property : Fun-Ext ‚Üí (p q x : ‚Ñö) ‚Üí p < q ‚Üí (p < x) ‚àî (x < q) 
located-property fe p q x l = f (‚Ñö-trichotomous fe x q)
 where
  f : (x < q) ‚àî (x ‚â° q) ‚àî (q < x) ‚Üí (p < x) ‚àî (x < q) 
  f (inl z)       = inr z
  f (inr (inl z)) = inl (transport (p <_) (z ‚Åª¬π) l)
  f (inr (inr z)) = inl (‚Ñö<-trans p q x l z)

half-‚Ñö‚Çô : ‚Ñö‚Çô ‚Üí ‚Ñö‚Çô
half-‚Ñö‚Çô (x , a) = x , (succ (2 ‚Ñï* a))

rounded-lemma‚ÇÄ : (a : ‚Ñï) ‚Üí succ (2 ‚Ñï* pred (succ a)) ‚â° pred (2 ‚Ñï* (succ a))
rounded-lemma‚ÇÄ zero = refl
rounded-lemma‚ÇÄ (succ a) = succ (2 ‚Ñï* pred (succ (succ a))) ‚â°‚ü® ap (Œª - ‚Üí succ (2 ‚Ñï* -)) (pred-succ a) ‚ü©
                   succ (2 ‚Ñï* succ a)                ‚â°‚ü® pred-succ (2 ‚Ñï* succ a) ‚Åª¬π ‚ü©
                   pred (succ (succ (2 ‚Ñï* succ a)))  ‚â°‚ü® refl ‚ü©
                   pred (2 ‚Ñï* succ a ‚Ñï+ 2)           ‚â°‚ü® refl ‚ü©
                   pred (2 ‚Ñï* (succ a) ‚Ñï+ 2 ‚Ñï* 1)    ‚â°‚ü® ap pred (distributivity-mult-over-nat 2 (succ a) 1 ‚Åª¬π) ‚ü©
                   pred (2 ‚Ñï+ (2 ‚Ñï* (succ a)))       ‚â°‚ü® refl ‚ü©
                   pred (2 ‚Ñï* succ (succ a)) ‚àé
                   
‚Ñö-zero-less-than-positive : (x y : ‚Ñï) ‚Üí 0‚Ñö < to‚Ñö ((pos (succ x)) , y)
‚Ñö-zero-less-than-positive x y = to‚Ñö-< (pos 0 , 0) (pos (succ x) , y) (x , I)
 where
  I : succ‚Ñ§ (pos 0 ‚Ñ§* pos (succ y)) ‚Ñ§+ pos x ‚â° pos (succ x) ‚Ñ§* pos 1
  I = succ‚Ñ§ (pos 0 ‚Ñ§* pos (succ y)) ‚Ñ§+ pos x ‚â°‚ü® ap (Œª Œ± ‚Üí succ‚Ñ§ Œ± ‚Ñ§+ pos x) (‚Ñ§-zero-left-is-zero (pos (succ y))) ‚ü©
      succ‚Ñ§ (pos 0) ‚Ñ§+ pos x                 ‚â°‚ü® ‚Ñ§-left-succ (pos 0) (pos x) ‚ü©
      succ‚Ñ§ (pos 0 ‚Ñ§+ pos x)                 ‚â°‚ü® ap succ‚Ñ§ (‚Ñ§+-comm (pos 0) (pos x)) ‚ü©
      succ‚Ñ§ (pos x)                          ‚â°‚ü® by-definition ‚ü©
      pos (succ x)                           ‚â°‚ü® by-definition ‚ü©
      pos (succ x) ‚Ñ§* pos 1                  ‚àé

‚Ñö<-addition-preserves-order : (p q r : ‚Ñö) ‚Üí p < q ‚Üí (p + r) < (q + r)
‚Ñö<-addition-preserves-order (p , _) (q , _) (r , _) l =
 to‚Ñö-< (p ‚Ñö‚Çô+ r) (q ‚Ñö‚Çô+ r) (‚Ñö‚Çô<-addition-preserves-order p q r l)

‚Ñö<-adding : (p q r s : ‚Ñö) ‚Üí p < q ‚Üí r < s ‚Üí p + r < q + s
‚Ñö<-adding (p , _) (q , _) (r , _) (s , _) l‚ÇÅ l‚ÇÇ = to‚Ñö-< (p ‚Ñö‚Çô+ r) (q ‚Ñö‚Çô+ s) I
 where
  I : p ‚Ñö‚Çô+ r ‚Ñö‚Çô< q ‚Ñö‚Çô+ s
  I = ‚Ñö‚Çô<-adding p q r s l‚ÇÅ l‚ÇÇ

‚Ñö<-addition-preserves-order' : Fun-Ext ‚Üí (p q r : ‚Ñö) ‚Üí p < q ‚Üí 0‚Ñö < r ‚Üí p < q + r
‚Ñö<-addition-preserves-order' fe p q r l m = transport (_< q + r) (‚Ñö-zero-right-neutral fe p) (‚Ñö<-adding p q 0‚Ñö r l m)

‚Ñö<-pos-multiplication-preserves-order : (p q : ‚Ñö) ‚Üí 0‚Ñö < p ‚Üí 0‚Ñö < q ‚Üí 0‚Ñö < p * q
‚Ñö<-pos-multiplication-preserves-order (p , _) (q , _) l‚ÇÅ l‚ÇÇ = to‚Ñö-< (pos 0 , 0) (p ‚Ñö‚Çô* q) (‚Ñö‚Çô-pos-multiplication-preserves-order p q l‚ÇÅ l‚ÇÇ)

‚Ñö‚â§-pos-multiplication-preserves-order : (p q : ‚Ñö) ‚Üí 0‚Ñö ‚â§ p ‚Üí 0‚Ñö ‚â§ q ‚Üí 0‚Ñö ‚â§ (p * q)
‚Ñö‚â§-pos-multiplication-preserves-order (p , _) (q , _) l‚ÇÅ l‚ÇÇ = to‚Ñö-‚â§ (pos 0 , 0) (p ‚Ñö‚Çô* q) (‚Ñö‚Çô‚â§-pos-multiplication-preserves-order p q l‚ÇÅ l‚ÇÇ)

‚Ñö<-addition-preserves-order'' : Fun-Ext ‚Üí (p q : ‚Ñö) ‚Üí 0‚Ñö < q ‚Üí p < p + q
‚Ñö<-addition-preserves-order'' fe p q l = transport‚ÇÇ _<_ (‚Ñö-zero-left-neutral fe p) (‚Ñö+-comm q p) (‚Ñö<-addition-preserves-order 0‚Ñö q p l)

‚Ñö<-subtraction-preserves-order : Fun-Ext ‚Üí (p q : ‚Ñö) ‚Üí 0‚Ñö < q ‚Üí p - q < p
‚Ñö<-subtraction-preserves-order fe p q l = transport ((p - q) <_) III II
 where
  I : p < p + q
  I = ‚Ñö<-addition-preserves-order'' fe p q l
  II : p - q < p + q - q
  II = ‚Ñö<-addition-preserves-order p (p + q) (- q) I
  III : p + q - q ‚â° p
  III = ‚Ñö+-assoc fe p q (- q) ‚àô (ap (p +_) (‚Ñö-inverse-sum-to-zero fe q) ‚àô ‚Ñö-zero-right-neutral fe p)

 

‚Ñö<-adding-zero : (p q : ‚Ñö) ‚Üí 0‚Ñö < p ‚Üí 0‚Ñö < q ‚Üí 0‚Ñö < p + q
‚Ñö<-adding-zero p q l‚ÇÅ l‚ÇÇ = ‚Ñö<-adding 0‚Ñö p 0‚Ñö q l‚ÇÅ l‚ÇÇ

‚Ñö<-not-itself : (p : ‚Ñö) ‚Üí ¬¨ (p < p)
‚Ñö<-not-itself ((x , a) , _) (n , e) = positive-not-zero n (pos-lc (‚Ñ§+-lc (pos (succ n)) (pos 0) (x ‚Ñ§* pos (succ a)) I))
 where
  I : x ‚Ñ§* pos (succ a) ‚Ñ§+ pos (succ n) ‚â° x ‚Ñ§* pos (succ a) ‚Ñ§+ pos 0
  I = x ‚Ñ§* pos (succ a) ‚Ñ§+ pos (succ n)  ‚â°‚ü® by-definition ‚ü©
      x ‚Ñ§* pos (succ a) ‚Ñ§+ succ‚Ñ§ (pos n) ‚â°‚ü® ‚Ñ§-right-succ (x ‚Ñ§* pos (succ a)) (pos n) ‚ü©
      succ‚Ñ§ (x ‚Ñ§* pos (succ a) ‚Ñ§+ pos n) ‚â°‚ü® ‚Ñ§-left-succ (x ‚Ñ§* pos (succ a)) (pos n) ‚Åª¬π ‚ü©
      succ‚Ñ§ (x ‚Ñ§* pos (succ a)) ‚Ñ§+ pos n ‚â°‚ü® e ‚ü©
      x ‚Ñ§* pos (succ a)                  ‚â°‚ü® by-definition ‚ü©
      x ‚Ñ§* pos (succ a) ‚Ñ§+ pos 0 ‚àé

‚Ñö‚â§-split : Fun-Ext ‚Üí (p q : ‚Ñö) ‚Üí p ‚â§ q ‚Üí (p < q) ‚àî (p ‚â° q)
‚Ñö‚â§-split fe (p , Œ±) (q , Œ≤) (0 , e) = inr (to-subtype-‚â° (is-in-lowest-terms-is-prop fe) I)
 where
  I : p ‚â° q
  I = equiv-with-lowest-terms-is-equal p q e Œ± Œ≤
‚Ñö‚â§-split fe ((x , a) , _) ((y , b) , _) (succ n , e) = inl (n , (‚Ñ§-left-succ (x ‚Ñ§* pos (succ b)) (pos n) ‚àô e))

‚Ñö‚â§-addition-preserves-order : Fun-Ext ‚Üí (p q r : ‚Ñö) ‚Üí p ‚â§ q ‚Üí (p + r) ‚â§ (q + r)
‚Ñö‚â§-addition-preserves-order fe p q r l = I (‚Ñö‚â§-split fe p q l)
 where
  I : (p < q) ‚àî (p ‚â° q) ‚Üí (p + r) ‚â§ (q + r)
  I (inl l) = ‚Ñö<-coarser-than-‚â§ (p + r) (q + r) (‚Ñö<-addition-preserves-order p q r l)
  I (inr e) = transport (p + r ‚â§_) II (‚Ñö‚â§-refl (p + r))
   where
    II : p + r ‚â° q + r
    II = ap (_+ r) e

‚Ñö‚â§-addition-preserves-order'' : Fun-Ext ‚Üí (p q : ‚Ñö) ‚Üí 0‚Ñö ‚â§ q ‚Üí p ‚â§ p + q
‚Ñö‚â§-addition-preserves-order'' fe p q l = transport‚ÇÇ _‚â§_ (‚Ñö-zero-left-neutral fe p) (‚Ñö+-comm q p) (‚Ñö‚â§-addition-preserves-order fe 0‚Ñö q p l)

‚Ñö‚â§-difference-positive : (fe : Fun-Ext) ‚Üí (p q : ‚Ñö) ‚Üí p ‚â§ q ‚Üí 0‚Ñö ‚â§ q - p
‚Ñö‚â§-difference-positive fe p q l = transport (_‚â§ q - p) (‚Ñö-inverse-sum-to-zero fe p) I
 where
  I : p - p ‚â§ q - p
  I = ‚Ñö‚â§-addition-preserves-order fe p q (- p) l

‚Ñö‚â§-pos-multiplication-preserves-order' : Fun-Ext ‚Üí (p q r : ‚Ñö) ‚Üí (p ‚â§ q) ‚Üí 0‚Ñö ‚â§ r ‚Üí p * r ‚â§ q * r
‚Ñö‚â§-pos-multiplication-preserves-order' fe p q r l‚ÇÅ l‚ÇÇ = transport‚ÇÇ _‚â§_ III IV II
 where
  I : 0‚Ñö ‚â§ ((q - p) * r)
  I = ‚Ñö‚â§-pos-multiplication-preserves-order (q - p) r (‚Ñö‚â§-difference-positive fe p q l‚ÇÅ) l‚ÇÇ
  
  II : (0‚Ñö + p * r) ‚â§ ((q - p) * r + p * r)
  II = ‚Ñö‚â§-addition-preserves-order fe 0‚Ñö ((q - p) * r) (p * r) I

  III : 0‚Ñö + p * r ‚â° p * r
  III = ‚Ñö-zero-left-neutral fe (p * r)

  IV : ((q - p) * r) + p * r ‚â° q * r
  IV = (q - p) * r + p * r         ‚â°‚ü® ap (_+ p * r) (‚Ñö-distributivity' fe r q (- p)) ‚ü©
       q * r + (- p) * r + p * r   ‚â°‚ü® ‚Ñö+-assoc fe (q * r) ((- p) * r) (p * r) ‚ü©
       q * r + ((- p) * r + p * r) ‚â°‚ü® ap (Œª z ‚Üí (q * r) + (z + p * r)) (‚Ñö-subtraction-dist-over-mult fe p r) ‚ü©
       q * r + ((- p * r) + p * r) ‚â°‚ü® ap (q * r +_) (‚Ñö-inverse-sum-to-zero' fe (p * r)) ‚ü©
       q * r + 0‚Ñö                  ‚â°‚ü® ‚Ñö-zero-right-neutral fe (q * r) ‚ü©
       q * r ‚àé

‚Ñö<-difference-positive : (fe : Fun-Ext) ‚Üí (p q : ‚Ñö) ‚Üí p < q ‚Üí 0‚Ñö < q - p
‚Ñö<-difference-positive fe p q l = transport (_< q - p) (‚Ñö-inverse-sum-to-zero fe p) I
 where
  I : p - p < q - p
  I = ‚Ñö<-addition-preserves-order p q (- p) l

‚Ñö<-pos-multiplication-preserves-order' : Fun-Ext ‚Üí (p q r : ‚Ñö) ‚Üí p < q ‚Üí 0‚Ñö < r ‚Üí p * r < q * r
‚Ñö<-pos-multiplication-preserves-order' fe p q r l‚ÇÅ l‚ÇÇ = transport‚ÇÇ _<_ III IV II
 where
  I : 0‚Ñö < ((q - p) * r)
  I = ‚Ñö<-pos-multiplication-preserves-order (q - p) r (‚Ñö<-difference-positive fe p q l‚ÇÅ) l‚ÇÇ
  
  II : (0‚Ñö + p * r) < ((q - p) * r + p * r)
  II = ‚Ñö<-addition-preserves-order 0‚Ñö ((q - p) * r) (p * r) I

  III : 0‚Ñö + p * r ‚â° p * r
  III = ‚Ñö-zero-left-neutral fe (p * r)

  IV : ((q - p) * r) + p * r ‚â° q * r
  IV = (q - p) * r + p * r         ‚â°‚ü® ap (_+ p * r) (‚Ñö-distributivity' fe r q (- p)) ‚ü©
       q * r + (- p) * r + p * r   ‚â°‚ü® ‚Ñö+-assoc fe (q * r) ((- p) * r) (p * r) ‚ü©
       q * r + ((- p) * r + p * r) ‚â°‚ü® ap (Œª z ‚Üí (q * r) + (z + p * r)) (‚Ñö-subtraction-dist-over-mult fe p r) ‚ü©
       q * r + ((- p * r) + p * r) ‚â°‚ü® ap (q * r +_) (‚Ñö-inverse-sum-to-zero' fe (p * r)) ‚ü©
       q * r + 0‚Ñö                  ‚â°‚ü® ‚Ñö-zero-right-neutral fe (q * r) ‚ü©
       q * r ‚àé
 
‚Ñö‚â§-trans : Fun-Ext ‚Üí (p q r : ‚Ñö) ‚Üí p ‚â§ q ‚Üí q ‚â§ r ‚Üí p ‚â§ r
‚Ñö‚â§-trans fe p q r l‚ÇÅ l‚ÇÇ = I (‚Ñö‚â§-split fe p q l‚ÇÅ) (‚Ñö‚â§-split fe q r l‚ÇÇ)
 where
  I : (p < q) ‚àî (p ‚â° q) ‚Üí (q < r) ‚àî (q ‚â° r) ‚Üí p ‚â§ r
  I (inl k) (inl e) = ‚Ñö<-coarser-than-‚â§ p r (‚Ñö<-trans p q r k e)
  I (inl k) (inr e) = ‚Ñö<-coarser-than-‚â§ p r (transport (p <_) e k)
  I (inr k) (inl e) = ‚Ñö<-coarser-than-‚â§ p r (transport (_< r) (k ‚Åª¬π) e)
  I (inr k) (inr e) = transport (p ‚â§_) e l‚ÇÅ

‚Ñö<-‚â§-trans : Fun-Ext ‚Üí (p q r : ‚Ñö) ‚Üí p < q ‚Üí q ‚â§ r ‚Üí p < r
‚Ñö<-‚â§-trans fe p q r l‚ÇÅ l‚ÇÇ = I (‚Ñö‚â§-split fe q r l‚ÇÇ) 
 where
  I : (q < r) ‚àî (q ‚â° r) ‚Üí p < r
  I (inl l) = ‚Ñö<-trans p q r l‚ÇÅ l
  I (inr l) = transport (p <_) l l‚ÇÅ

‚Ñö‚â§-<-trans : Fun-Ext ‚Üí (p q r : ‚Ñö) ‚Üí p ‚â§ q ‚Üí q < r ‚Üí p < r
‚Ñö‚â§-<-trans fe p q r l‚ÇÅ l‚ÇÇ = I (‚Ñö‚â§-split fe p q l‚ÇÅ)
 where
  I : (p < q) ‚àî (p ‚â° q) ‚Üí p < r
  I (inl l) = ‚Ñö<-trans p q r l l‚ÇÇ
  I (inr l) = transport (_< r) (l ‚Åª¬π) l‚ÇÇ

‚Ñö‚â§-adding : Fun-Ext ‚Üí (x y u v : ‚Ñö) ‚Üí x ‚â§ y ‚Üí u ‚â§ v ‚Üí (x + u) ‚â§ (y + v)
‚Ñö‚â§-adding fe x y u v l‚ÇÅ l‚ÇÇ = ‚Ñö‚â§-trans fe (x + u) (y + u) (y + v) I III
 where
  I : (x + u) ‚â§ (y + u)
  I = ‚Ñö‚â§-addition-preserves-order fe x y u l‚ÇÅ

  II : (u + y) ‚â§ (v + y)
  II = ‚Ñö‚â§-addition-preserves-order fe u v y l‚ÇÇ

  III : (y + u) ‚â§ (y + v)
  III = transport‚ÇÇ _‚â§_ (‚Ñö+-comm u y) (‚Ñö+-comm v y) II

‚Ñö‚â§-swap : Fun-Ext ‚Üí (x y : ‚Ñö) ‚Üí x ‚â§ y ‚Üí (- y) ‚â§ (- x)
‚Ñö‚â§-swap fe x y l = transport id III II
 where
  I : (x - x) ‚â§ (y + (- x))
  I = ‚Ñö‚â§-addition-preserves-order fe x y (- x) l
  
  II : ((x - x) + (- y)) ‚â§ ((y + (- x)) + (- y))
  II = ‚Ñö‚â§-addition-preserves-order fe (x - x) (y + (- x)) (- y) I

  III : (((x - x) + (- y)) ‚â§ ((y + (- x)) + (- y))) ‚â° ((- y) ‚â§ (- x))
  III = ap‚ÇÇ _‚â§_ Œ± Œ≤
   where
    Œ± : (((x - x) + (- y))) ‚â° (- y)
    Œ± = (x - x) + (- y)       ‚â°‚ü® ap (_+ (- y)) (‚Ñö-inverse-sum-to-zero fe x) ‚ü©
        0‚Ñö + (- y)            ‚â°‚ü® ‚Ñö-zero-left-neutral fe (- y) ‚ü© 
        (- y)                 ‚àé
    Œ≤ : (y - x) + (- y) ‚â° (- x)
    Œ≤ = (y - x) + (- y)       ‚â°‚ü® ap (_+ (- y)) (‚Ñö+-comm y (- x)) ‚ü©
        (- x) + y + (- y)     ‚â°‚ü® ‚Ñö+-assoc fe (- x) y (- y) ‚ü©
        (- x) + (y - y)       ‚â°‚ü® ap ((- x) +_) (‚Ñö-inverse-sum-to-zero fe y) ‚ü©
        (- x) + 0‚Ñö            ‚â°‚ü® ‚Ñö-zero-right-neutral fe (- x) ‚ü©
        (- x) ‚àé

‚Ñö<-swap : Fun-Ext ‚Üí (x y : ‚Ñö) ‚Üí x < y ‚Üí (- y) < (- x)
‚Ñö<-swap fe x y l = split (‚Ñö‚â§-split fe (- y) (- x) I)
 where
  I : (- y) ‚â§ (- x)
  I = ‚Ñö‚â§-swap fe x y (‚Ñö<-coarser-than-‚â§ x y l)
  split : ((- y) < (- x)) ‚àî (- y ‚â° - x) ‚Üí (- y) < (- x)
  split (inl il) = il
  split (inr ir) = ùüò-elim (‚Ñö<-not-itself x (transport (x <_) III l))
   where
    II : - (- y) ‚â° - (- x)
    II = ap -_ ir
    III : y ‚â° x
    III = y ‚â°‚ü® ‚Ñö-minus-minus fe y ‚ü©
          - (- y) ‚â°‚ü® II ‚ü©
          - (- x) ‚â°‚ü® ‚Ñö-minus-minus fe x ‚Åª¬π ‚ü©
          x ‚àé

multiplicative-inverse-preserves-pos : (fe : Fun-Ext) ‚Üí (p : ‚Ñö) ‚Üí 0‚Ñö < p ‚Üí (nz : ¬¨ (p ‚â° 0‚Ñö)) ‚Üí 0‚Ñö < multiplicative-inverse fe p nz
multiplicative-inverse-preserves-pos fe ((pos 0 , a) , Œ±) l nz = ùüò-elim (nz (numerator-zero-is-zero fe ((pos zero , a) , Œ±) by-definition))
multiplicative-inverse-preserves-pos fe ((pos (succ x) , a) , Œ±) l nz = to‚Ñö-< (pos 0 , 0) (pos (succ a) , x) (a , I)
 where
  I : succ‚Ñ§ (pos 0 ‚Ñ§* pos (succ x)) ‚Ñ§+ pos a ‚â° pos (succ a) ‚Ñ§* pos 1
  I = succ‚Ñ§ (pos 0 ‚Ñ§* pos (succ x)) ‚Ñ§+ pos a ‚â°‚ü® ‚Ñ§-left-succ (pos 0 ‚Ñ§* pos (succ x)) (pos a) ‚ü©
      succ‚Ñ§ (pos 0 ‚Ñ§* pos (succ x) ‚Ñ§+ pos a) ‚â°‚ü® ‚Ñ§-right-succ (pos 0 ‚Ñ§* pos (succ x)) (pos a) ‚Åª¬π ‚ü©
      pos 0 ‚Ñ§* pos (succ x) ‚Ñ§+ pos (succ a)  ‚â°‚ü® ap (_‚Ñ§+ pos (succ a)) (‚Ñ§-zero-left-is-zero (pos (succ x))) ‚ü©
      pos 0 ‚Ñ§+ pos (succ a) ‚â°‚ü® ‚Ñ§-zero-left-neutral (pos (succ a)) ‚ü©
      pos (succ a) ‚â°‚ü® ‚Ñ§-mult-right-id (pos (succ a)) ‚ü©
      pos (succ a) ‚Ñ§* pos 1 ‚àé
multiplicative-inverse-preserves-pos fe ((negsucc x , a) , Œ±) l nz = ùüò-elim (‚Ñö<-not-itself ((negsucc x , a) , Œ±) (‚Ñö<-trans (((negsucc x , a) , Œ±)) 0‚Ñö (((negsucc x , a) , Œ±)) I l))
 where
  I : ((negsucc x , a) , Œ±) < 0‚Ñö
  I = transport (_< 0‚Ñö) (to‚Ñö-to‚Ñö‚Çô fe ((negsucc x , a) , Œ±) ‚Åª¬π) (to‚Ñö-< (negsucc x , a) (pos 0 , 0) II)
   where
    II : (negsucc x , a) ‚Ñö‚Çô< (pos 0 , 0)
    II = x , III
     where
      III : succ‚Ñ§ (negsucc x ‚Ñ§* pos 1) ‚Ñ§+ pos x ‚â° pos 0 ‚Ñ§* pos (succ a)
      III = succ‚Ñ§ (negsucc x ‚Ñ§* pos 1) ‚Ñ§+ pos x ‚â°‚ü® ‚Ñ§-left-succ (negsucc x ‚Ñ§* pos 1) (pos x) ‚ü©
            succ‚Ñ§ (negsucc x ‚Ñ§* pos 1 ‚Ñ§+ pos x) ‚â°‚ü® by-definition ‚ü©
            negsucc x ‚Ñ§* pos 1 ‚Ñ§+ pos (succ x)  ‚â°‚ü® ap (_‚Ñ§+ pos (succ x)) (‚Ñ§-mult-right-id (negsucc x)) ‚ü©
            negsucc x ‚Ñ§+ pos (succ x)           ‚â°‚ü® ‚Ñ§-sum-of-inverse-is-zero' (pos (succ x)) ‚ü©
            pos 0                               ‚â°‚ü® ‚Ñ§-zero-left-is-zero (pos (succ a)) ‚Åª¬π ‚ü©
            pos 0 ‚Ñ§* pos (succ a)               ‚àé


‚Ñö-equal-or-less-than-is-prop : Fun-Ext ‚Üí (x y : ‚Ñö) ‚Üí is-prop ((x ‚â° y) ‚àî (y < x))
‚Ñö-equal-or-less-than-is-prop fe x y (inl l) (inl r) = ap inl (‚Ñö-is-set fe l r)
‚Ñö-equal-or-less-than-is-prop fe x y (inl l) (inr r) = ùüò-elim (‚Ñö<-not-itself y ((transport (y <_) l r)))
‚Ñö-equal-or-less-than-is-prop fe x y (inr l) (inl r) = ùüò-elim ((‚Ñö<-not-itself x (transport (_< x) (r ‚Åª¬π) l)))
‚Ñö-equal-or-less-than-is-prop fe x y (inr l) (inr r) = ap inr (‚Ñö<-is-prop y x l r)

‚Ñö-trich-a : (fe : Fun-Ext) ‚Üí (x y : ‚Ñö) ‚Üí (l : x < y) ‚Üí ‚Ñö-trichotomous fe x y ‚â° inl l
‚Ñö-trich-a fe x y l = equality-cases (‚Ñö-trichotomous fe x y) I II
 where
  I : (l‚ÇÇ : x < y) ‚Üí ‚Ñö-trichotomous fe x y ‚â° inl l‚ÇÇ ‚Üí ‚Ñö-trichotomous fe x y ‚â° inl l
  I l‚ÇÇ e = e ‚àô ap inl (‚Ñö<-is-prop x y l‚ÇÇ l)
  II : (y‚ÇÅ : (x ‚â° y) ‚àî (y < x)) ‚Üí ‚Ñö-trichotomous fe x y ‚â° inr y‚ÇÅ ‚Üí ‚Ñö-trichotomous fe x y ‚â° inl l
  II (inl e) _ = ùüò-elim (‚Ñö<-not-itself y (transport (_< y) e l))
  II (inr lt) _ = ùüò-elim (‚Ñö<-not-itself x (‚Ñö<-trans x y x l lt))

‚Ñö-trich-b : (fe : Fun-Ext) ‚Üí (x y : ‚Ñö) ‚Üí (r : (x ‚â° y) ‚àî (y < x)) ‚Üí ‚Ñö-trichotomous fe x y ‚â° inr r
‚Ñö-trich-b fe x y r = equality-cases (‚Ñö-trichotomous fe x y) I II
 where
  I : (l : x < y) ‚Üí ‚Ñö-trichotomous fe x y ‚â° inl l ‚Üí ‚Ñö-trichotomous fe x y ‚â° inr r
  I l _ = Cases r (Œª e ‚Üí ùüò-elim (‚Ñö<-not-itself y (transport (_< y) e l)))
                   Œª e ‚Üí ùüò-elim (‚Ñö<-not-itself x (‚Ñö<-trans x y x l e)) 
  II : (s : (x ‚â° y) ‚àî (y < x)) ‚Üí ‚Ñö-trichotomous fe x y ‚â° inr s ‚Üí ‚Ñö-trichotomous fe x y ‚â° inr r
  II s e = e ‚àô (ap inr III)
   where
    III : s ‚â° r
    III = ‚Ñö-equal-or-less-than-is-prop fe x y s r

‚Ñö-trich-c : (fe : Fun-Ext) ‚Üí (x : ‚Ñö) ‚Üí (e : (x ‚â° x) ‚àî x < x) ‚Üí ‚Ñö-trichotomous fe x x ‚â° inr e
‚Ñö-trich-c fe x e = equality-cases (‚Ñö-trichotomous fe x x) I II
 where
  I : (k : x < x) ‚Üí ‚Ñö-trichotomous fe x x ‚â° inl k ‚Üí ‚Ñö-trichotomous fe x x ‚â° inr e
  I k f = ùüò-elim (‚Ñö<-not-itself x k)

  II : (k : (x ‚â° x) ‚àî (x < x)) ‚Üí ‚Ñö-trichotomous fe x x ‚â° inr k ‚Üí ‚Ñö-trichotomous fe x x ‚â° inr e
  II k l = Cases k III
                   (Œª - ‚Üí ùüò-elim (‚Ñö<-not-itself x -) )
   where
    III : x ‚â° x ‚Üí ‚Ñö-trichotomous fe x x ‚â° inr e
    III z = l ‚àô ap inr (‚Ñö-equal-or-less-than-is-prop fe x x k e)

trisect : Fun-Ext ‚Üí (x y : ‚Ñö) ‚Üí x < y ‚Üí Œ£ (x' , y') Íûâ ‚Ñö √ó ‚Ñö , (x < x') √ó (x' < y') √ó (y' < y) √ó (y - x' ‚â° 2/3 * (y - x)) √ó (y' - x ‚â° 2/3 * (y - x))
trisect fe x y l = (x + d * 1/3 , x + d * 2/3) , I , II , III , IV , V
 where
  d : ‚Ñö
  d = y - x
  Œ± : 0‚Ñö < d
  Œ± = ‚Ñö<-difference-positive fe x y l

  Œ≤ : 0‚Ñö < 1/3
  Œ≤ = ‚Ñö-zero-less-than-positive 0 2

  Œ≥ : 0‚Ñö < d * 1/3
  Œ≥ = ‚Ñö<-pos-multiplication-preserves-order d 1/3 Œ± Œ≤

  œà : (x + d * 1/3) < (x + d * 1/3 + d * 1/3)
  œà = ‚Ñö<-addition-preserves-order'' fe (x + d * 1/3) (d * 1/3) Œ≥

  Œ∑ : d * 2/3 < d
  Œ∑ = transport‚ÇÇ _<_ ii iii i
   where
    i : (0‚Ñö + d * 2/3) < (d * 1/3 + d * 2/3)
    i = ‚Ñö<-addition-preserves-order 0‚Ñö (d * 1/3) (d * 2/3) Œ≥
    ii : 0‚Ñö + d * 2/3 ‚â° d * 2/3
    ii = ‚Ñö-zero-left-neutral fe (d * 2/3)
    iii : d * 1/3 + d * 2/3 ‚â° d
    iii = d * 1/3 + d * 2/3 ‚â°‚ü® ‚Ñö-distributivity fe d 1/3 2/3 ‚Åª¬π ‚ü©
          d * (1/3 + 2/3)   ‚â°‚ü® ap (d *_) (1/3+2/3 fe) ‚ü©
          d * 1‚Ñö            ‚â°‚ü® ‚Ñö-mult-right-id fe d ‚ü©
          d                 ‚àé
 
  I : x < (x + d * 1/3)
  I = ‚Ñö<-addition-preserves-order'' fe x (d * 1/3) Œ≥

  II : (x + d * 1/3) < (x + d * 2/3)
  II = transport (x + d * 1/3 <_) i œà
   where
    i : x + d * 1/3 + d * 1/3 ‚â° x + d * 2/3
    i = x + d * 1/3 + d * 1/3   ‚â°‚ü® ‚Ñö+-assoc fe x (d * 1/3) (d * 1/3) ‚ü©
        x + (d * 1/3 + d * 1/3) ‚â°‚ü® ap (x +_) (‚Ñö-distributivity fe d 1/3 1/3 ‚Åª¬π) ‚ü©
        x + d * (1/3 + 1/3)     ‚â°‚ü® ap (Œª z ‚Üí x + (d * z)) (1/3+1/3 fe) ‚ü©
        x + d * 2/3             ‚àé
 

  III : x + d * 2/3 < y
  III = transport‚ÇÇ _<_ ii iii i
   where
    i : d * 2/3 + x < d + x
    i = ‚Ñö<-addition-preserves-order (d * 2/3) d x Œ∑
    ii : d * 2/3 + x ‚â° x + d * 2/3
    ii = ‚Ñö+-comm (d * 2/3) x
    iii : d + x ‚â° y
    iii = d + x            ‚â°‚ü® ‚Ñö+-assoc fe y (- x) x ‚ü©
          y + ((- x) + x)  ‚â°‚ü® ap (y +_) (‚Ñö-inverse-sum-to-zero' fe x) ‚ü©
          y + 0‚Ñö           ‚â°‚ü® ‚Ñö-zero-right-neutral fe y ‚ü©
          y                ‚àé

  IV : y - (x + d * 1/3) ‚â° 2/3 * d
  IV = y - (x + d * 1/3)                 ‚â°‚ü® ap (y +_) (‚Ñö-minus-dist fe x (d * 1/3)) ‚Åª¬π ‚ü©
       y + ((- x) + (- d * 1/3))         ‚â°‚ü® ‚Ñö+-assoc fe y (- x) (- d * 1/3) ‚Åª¬π ‚ü©
       d + (- d * 1/3)                   ‚â°‚ü® ap (_+ (- (d * 1/3))) (‚Ñö-mult-left-id fe d ‚Åª¬π) ‚ü©
       1‚Ñö * d + (- d * 1/3)              ‚â°‚ü® ap (Œª z ‚Üí (z * d) + (- (d * 1/3))) (1/3+2/3 fe) ‚ü©
       1‚Ñö * d + (- d * 1/3)              ‚â°‚ü® ap (_+ (- (d * 1/3))) (‚Ñö*-comm (1/3 + 2/3) d)  ‚ü©
       d * (1/3 + 2/3) + (- d * 1/3)     ‚â°‚ü® ap (Œª z ‚Üí (d * z) + (- (d * 1/3))) (‚Ñö+-comm 1/3 2/3) ‚ü©
       d * (2/3 + 1/3) + (- d * 1/3)     ‚â°‚ü® ap (_+ - (d * 1/3)) (‚Ñö-distributivity fe d 2/3 1/3) ‚ü©
       d * 2/3 + d * 1/3 + (- d * 1/3)   ‚â°‚ü® ‚Ñö+-assoc fe (d * 2/3) (d * 1/3) (- (d * 1/3)) ‚ü©
       d * 2/3 + (d * 1/3 + (- d * 1/3)) ‚â°‚ü® ap‚ÇÇ _+_ (‚Ñö*-comm d 2/3) (‚Ñö-inverse-sum-to-zero fe (d * 1/3)) ‚ü©
       2/3 * d + 0‚Ñö                      ‚â°‚ü® ‚Ñö-zero-right-neutral fe (2/3 * d) ‚ü©
       2/3 * d ‚àé

  V : x + d * 2/3 - x ‚â° 2/3 * d
  V = x + d * 2/3 - x       ‚â°‚ü® ap (_+ (- x)) (‚Ñö+-comm x (d * 2/3)) ‚ü©
      d * 2/3 + x + (- x)   ‚â°‚ü® ‚Ñö+-assoc fe (d * 2/3) x (- x) ‚ü©
      d * 2/3 + (x - x)     ‚â°‚ü® ap‚ÇÇ _+_ (‚Ñö*-comm d 2/3) (‚Ñö-inverse-sum-to-zero fe x) ‚ü©
      2/3 * d + 0‚Ñö          ‚â°‚ü® ‚Ñö-zero-right-neutral fe (2/3 * d) ‚ü©
      2/3 * d ‚àé

‚Ñö‚â§-anti : Fun-Ext ‚Üí (p q : ‚Ñö) ‚Üí p ‚â§ q ‚Üí q ‚â§ p ‚Üí p ‚â° q
‚Ñö‚â§-anti fe p q l‚ÇÅ l‚ÇÇ = I (‚Ñö‚â§-split fe p q l‚ÇÅ) (‚Ñö‚â§-split fe q p l‚ÇÇ)
 where
  I : (p < q) ‚àî (p ‚â° q) ‚Üí (q < p) ‚àî (q ‚â° p) ‚Üí p ‚â° q
  I (inl l) (inl r) = ùüò-elim (‚Ñö<-not-itself p (‚Ñö<-trans p q p l r))
  I (inl l) (inr r) = r ‚Åª¬π
  I (inr e) (inl f) = e
  I (inr e) (inr f) = e

0<1/2 : 0‚Ñö < 1/2
0<1/2 = to‚Ñö-< (pos 0 , 0) (pos 1 , 1) (0 , refl)

0<1/5 : 0‚Ñö < 1/5
0<1/5 = to‚Ñö-< (pos 0 , 0) (pos 1 , 5) (0 , refl)

1/2<1 : 1/2 < 1‚Ñö
1/2<1 = to‚Ñö-< (pos 1 , 1) (pos 1 , 0) (0 , refl)

halving-preserves-order : (p : ‚Ñö) ‚Üí 0‚Ñö < p ‚Üí 0‚Ñö < p * 1/2
halving-preserves-order p l = ‚Ñö<-pos-multiplication-preserves-order p 1/2 l 0<1/2

halving-preserves-order' : (p : ‚Ñö) ‚Üí 0‚Ñö < p ‚Üí 0‚Ñö < 1/2 * p
halving-preserves-order' p l = ‚Ñö<-pos-multiplication-preserves-order 1/2 p 0<1/2 l

half-of-pos-is-less : Fun-Ext ‚Üí (p : ‚Ñö) ‚Üí 0‚Ñö < p ‚Üí 1/2 * p < p
half-of-pos-is-less fe p l = transport (1/2 * p <_) III II
 where
  I : 0‚Ñö < 1/2 * p
  I = halving-preserves-order' p l
  II : 1/2 * p < 1/2 * p + 1/2 * p
  II = ‚Ñö<-addition-preserves-order'' fe (1/2 * p) (1/2 * p) I
  III : 1/2 * p + 1/2 * p ‚â° p
  III = 1/2 * p + 1/2 * p ‚â°‚ü® ‚Ñö-distributivity' fe p 1/2 1/2 ‚Åª¬π ‚ü©
        (1/2 + 1/2) * p   ‚â°‚ü® ap (_* p) (1/2+1/2 fe) ‚ü©
        1‚Ñö * p            ‚â°‚ü® ‚Ñö-mult-left-id fe p ‚ü©
        p ‚àé

‚Ñö-dense : Fun-Ext ‚Üí (p q : ‚Ñö) ‚Üí p < q ‚Üí Œ£ x Íûâ ‚Ñö , (p < x) √ó (x < q)
‚Ñö-dense fe p q l = (p + (1/2 * (q - p))) , I , II
 where
  i : 0‚Ñö < (q - p) * 1/2
  i = halving-preserves-order (q - p) (‚Ñö<-difference-positive fe p q l)
  ii : 0‚Ñö < 1/2 * (q - p)
  ii = transport (0‚Ñö <_) (‚Ñö*-comm (q - p) 1/2) i
  I : p < p + (1/2 * (q - p))
  I = ‚Ñö<-addition-preserves-order'' fe p (1/2 * (q - p)) ii

  iii : p + (1/2 * (q - p)) < p + (1/2 * (q - p)) + (1/2 * (q - p))
  iii = ‚Ñö<-addition-preserves-order'' fe (p + (1/2 * (q - p))) (1/2 * (q - p)) ii
  iv : p + (1/2 * (q - p)) + (1/2 * (q - p)) ‚â° q
  iv = p + 1/2 * (q - p) + 1/2 * (q - p)    ‚â°‚ü® ‚Ñö+-assoc fe p (1/2 * (q - p)) (1/2 * (q - p)) ‚ü©
       p + (1/2 * (q - p) + 1/2 * (q - p))  ‚â°‚ü® ap (p +_) (‚Ñö-distributivity' fe (q - p) 1/2 1/2 ‚Åª¬π) ‚ü©
       p + (1/2 + 1/2) * (q - p)            ‚â°‚ü® ap (Œª Œ± ‚Üí p + Œ± * (q - p)) (1/2+1/2 fe) ‚ü©
       p + 1‚Ñö * (q - p)                     ‚â°‚ü® ap (p +_) (‚Ñö-mult-left-id fe (q - p)) ‚ü©
       p + (q - p)                          ‚â°‚ü® ap (p +_) (‚Ñö+-comm q (- p)) ‚ü©
       p + ((- p) + q)                      ‚â°‚ü® ‚Ñö+-assoc fe p (- p) q ‚Åª¬π ‚ü©
       p - p + q                            ‚â°‚ü® ap (_+ q) (‚Ñö-inverse-sum-to-zero fe p) ‚ü©
       0‚Ñö + q                               ‚â°‚ü® ‚Ñö-zero-left-neutral fe q ‚ü©
       q ‚àé
   
  II : p + (1/2 * (q - p)) < q
  II = transport (p + (1/2 * (q - p)) <_) iv iii

inequality-chain-outer-bounds-inner : Fun-Ext ‚Üí (a b c d : ‚Ñö) ‚Üí a < b ‚Üí b < c ‚Üí c < d ‚Üí c - b < d - a
inequality-chain-outer-bounds-inner fe a b c d l‚ÇÅ l‚ÇÇ l‚ÇÉ = ‚Ñö<-trans (c - b) (d - b) (d - a) I III
 where
  I : c - b < d - b
  I = ‚Ñö<-addition-preserves-order c d (- b) l‚ÇÉ
  II : - b < - a
  II = ‚Ñö<-swap fe a b l‚ÇÅ
  III : d - b < d - a
  III = transport‚ÇÇ _<_ (‚Ñö+-comm (- b) d) (‚Ñö+-comm (- a) d) (‚Ñö<-addition-preserves-order (- b) (- a) d II)
     
‚Ñö<-trans‚ÇÇ : (p q r s : ‚Ñö) ‚Üí p < q ‚Üí q < r ‚Üí r < s ‚Üí p < s
‚Ñö<-trans‚ÇÇ p q r s l‚ÇÅ l‚ÇÇ l‚ÇÉ = ‚Ñö<-trans p r s I l‚ÇÉ
 where
  I : p < r
  I = ‚Ñö<-trans p q r l‚ÇÅ l‚ÇÇ

‚Ñö<-trans‚ÇÉ : (p q r s t : ‚Ñö) ‚Üí p < q ‚Üí q < r ‚Üí r < s ‚Üí s < t ‚Üí p < t
‚Ñö<-trans‚ÇÉ p q r s t l‚ÇÅ l‚ÇÇ l‚ÇÉ l‚ÇÑ = ‚Ñö<-trans p s t I l‚ÇÑ
 where
  I : p < s
  I = ‚Ñö<-trans‚ÇÇ p q r s l‚ÇÅ l‚ÇÇ l‚ÇÉ

‚Ñö‚â§-trans‚ÇÇ : Fun-Ext ‚Üí (p q r s : ‚Ñö) ‚Üí p ‚â§ q ‚Üí q ‚â§ r ‚Üí r ‚â§ s ‚Üí p ‚â§ s
‚Ñö‚â§-trans‚ÇÇ fe p q r s l‚ÇÅ l‚ÇÇ l‚ÇÉ = ‚Ñö‚â§-trans fe p r s I l‚ÇÉ
 where
  I : p ‚â§ r
  I = ‚Ñö‚â§-trans fe p q r l‚ÇÅ l‚ÇÇ

‚Ñö‚â§-trans‚ÇÉ : Fun-Ext ‚Üí (p q r s t : ‚Ñö) ‚Üí p ‚â§ q ‚Üí q ‚â§ r ‚Üí r ‚â§ s ‚Üí s ‚â§ t ‚Üí p ‚â§ t
‚Ñö‚â§-trans‚ÇÉ fe p q r s t l‚ÇÅ l‚ÇÇ l‚ÇÉ l‚ÇÑ = ‚Ñö‚â§-trans fe p s t I l‚ÇÑ
 where
  I : p ‚â§ s
  I = ‚Ñö‚â§-trans‚ÇÇ fe p q r s l‚ÇÅ l‚ÇÇ l‚ÇÉ



\end{code}
