Andrew Sneap, November 2021

This file proves that a rational valued function on the rationals may
be extended to rational real valued functions on the reals, provided
that the function is strictly monotonic and has a bijection with
another rational valued function on the rationals.

\begin{code}

{-# OPTIONS --safe --without-K --lossy-unification #-}

open import MLTT.Spartan renaming (_+_ to _‚àî_)

open import Notation.CanonicalMap
open import Notation.Order
open import UF.Base
open import UF.FunExt
open import UF.PropTrunc
open import UF.Powerset
open import UF.Subsingletons
open import UF.Subsingletons-FunExt
open import Rationals.Type
open import Rationals.Addition
open import Rationals.Negation
open import Rationals.Order

module Rationals.Extension
  (fe : Fun-Ext)
  (pe : Prop-Ext)
  (pt : propositional-truncations-exist)
 where

open PropositionalTruncation pt

open import DedekindReals.Type fe pe pt
open import DedekindReals.Order fe pe pt

\end{code}

We begin by proving a lemma. If f and g are bijective, and f is
strictly monotone, then g is strictly monotone.

TODO: Is it true that strictly monotone functions automatically have a
bijection?

\begin{code}

bijection-preserves-monotone : (f g : ‚Ñö ‚Üí ‚Ñö) ‚Üí ùì§‚ÇÄ Ãá
bijection-preserves-monotone f g = ((p q : ‚Ñö) ‚Üí (p < q) ‚Üî (f p < f q))
                                 ‚Üí ((r : ‚Ñö) ‚Üí (g (f r) Ôºù r) √ó (f (g r) Ôºù r))
                                 ‚Üí ((p q : ‚Ñö) ‚Üí (p < q) ‚Üî (g p < g q))

bijective-preserves-monotone' : (f g : ‚Ñö ‚Üí ‚Ñö) ‚Üí ùì§‚ÇÄ Ãá
bijective-preserves-monotone' f g = ((p q : ‚Ñö) ‚Üí p < q ‚Üî f p > f q)
                                  ‚Üí ((r : ‚Ñö) ‚Üí (g (f r) Ôºù r) √ó (f (g r) Ôºù r))
                                  ‚Üí ((p q : ‚Ñö) ‚Üí p < q ‚Üî g p > g q)

bijective-and-monotonic : (f : ‚Ñö ‚Üí ‚Ñö)
                        ‚Üí (g : ‚Ñö ‚Üí ‚Ñö)
                        ‚Üí bijection-preserves-monotone f g
bijective-and-monotonic f g f-preserves-order f-g-bijection = Œ≥
 where
  Œ≥ : (p q : ‚Ñö) ‚Üí (p < q) ‚Üî (g p < g q)
  Œ≥ p q = ltr , rtl
   where
    apply-order-preversation : (g p < g q) ‚Üî (f (g p) < f (g q))
    apply-order-preversation = f-preserves-order (g p) (g q)

    ltr : p < q ‚Üí g p < g q
    ltr l = (rl-implication apply-order-preversation) i
     where
      i : f (g p) < f (g q)
      i = transport‚ÇÇ _<_ (pr‚ÇÇ (f-g-bijection p) ‚Åª¬π) (pr‚ÇÇ (f-g-bijection q) ‚Åª¬π) l

    rtl : g p < g q ‚Üí p < q
    rtl l = transport‚ÇÇ _<_ (pr‚ÇÇ (f-g-bijection p)) (pr‚ÇÇ (f-g-bijection q)) i
     where
      i : f (g p) < f (g q)
      i = (lr-implication apply-order-preversation) l

bijective-and-monotonic' : (f g : ‚Ñö ‚Üí ‚Ñö) ‚Üí bijective-preserves-monotone' f g
bijective-and-monotonic' f g f-preserves-order f-g-bijection = Œ≥
 where
  Œ≥ : (p q : ‚Ñö) ‚Üí p < q ‚Üî g p > g q
  Œ≥ p q = ltr , rtl
   where
    apply-order-preservation : g q < g p ‚Üî f (g q) > f (g p)
    apply-order-preservation = f-preserves-order (g q) (g p)

    ltr : p < q ‚Üí g p > g q
    ltr l = (rl-implication apply-order-preservation) i
     where
      i : f (g q) > f (g p)
      i = transport‚ÇÇ _<_ (pr‚ÇÇ (f-g-bijection p) ‚Åª¬π) (pr‚ÇÇ (f-g-bijection q) ‚Åª¬π) l

    rtl : g p > g q ‚Üí p < q
    rtl l = transport‚ÇÇ _<_ (pr‚ÇÇ (f-g-bijection p)) (pr‚ÇÇ (f-g-bijection q)) i
     where
      i : f (g p) < f (g q)
      i = (lr-implication apply-order-preservation) l

\end{code}

Now, given a monotonic function f, and a bijective function g, we construct an extension of f, which we call fÃÇ.

Pictorially, we have the following:

                      f
   ‚Ñö ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚ñ∂ ‚Ñö
   ‚îÇ                                   ‚îÇ           We want our extension to satisfy fÃÇ ‚àò Œπ Ôºù Œπ ‚àò f
   ‚îÇ                                   ‚îÇ           This means fÃÇ does not change the behavour of f
   ‚îÇ                                   ‚îÇ           for any point in the rationals.
 Œπ ‚îÇ                                   ‚îÇ Œπ
   ‚îÇ                                   ‚îÇ
   ‚îÇ                                   ‚îÇ
   ‚ñº                                   ‚ñº
   ‚Ñù ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚ñ∂ ‚Ñù
                      fÃÇ


The following f‚ÜífÃÇ extends functions, and the is followed by diagram commutes which proves that the above diagram is satisfied.

\begin{code}

f‚ÜífÃÇ : (f g : ‚Ñö ‚Üí ‚Ñö)
  ‚Üí ((p q : ‚Ñö) ‚Üí (p < q) ‚Üî (f p < f q))
  ‚Üí ((r : ‚Ñö) ‚Üí (g (f r) Ôºù r) √ó (f (g r) Ôºù r))
  ‚Üí ‚Ñù ‚Üí ‚Ñù
f‚ÜífÃÇ f g f-order-preserving f-g-bijective
 ((L , R) , inhabited-left-x , inhabited-right-x , rounded-left-x , rounded-right-x , disjoint-x , located-x)
  = (left , right) , inhabited-left' , inhabited-right' , rounded-left' , rounded-right' , disjoint' , located'
 where
  x : ‚Ñù
  x = ((L , R) , inhabited-left-x , inhabited-right-x , rounded-left-x , rounded-right-x , disjoint-x , located-x)

  left : ùìü ‚Ñö
  left p = (g p ‚àà L) , ‚àà-is-prop L (g p)
  right : ùìü ‚Ñö
  right q = g q ‚àà R , ‚àà-is-prop R (g q)

  inhabited-left' : inhabited-left left
  inhabited-left' = ‚à•‚à•-functor I inhabited-left-x
   where
    I : Œ£ p Íûâ ‚Ñö , p ‚àà L ‚Üí Œ£ p' Íûâ ‚Ñö , p' ‚àà left
    I (p , p-L) = (f p) , transport (_‚àà L) (pr‚ÇÅ (f-g-bijective p) ‚Åª¬π) p-L

  inhabited-right' : inhabited-right right
  inhabited-right' = ‚à•‚à•-functor I inhabited-right-x
   where
    I : Œ£ q Íûâ ‚Ñö , q ‚àà R ‚Üí Œ£ q' Íûâ ‚Ñö , q' ‚àà right
    I (q , q-R) = f q , transport (_‚àà R) (pr‚ÇÅ (f-g-bijective q) ‚Åª¬π) q-R

  rounded-left' : rounded-left left
  rounded-left' k = I , II
   where
    I : k ‚àà left ‚Üí ‚àÉ p Íûâ ‚Ñö , (k < p) √ó p ‚àà left
    I k-L = ‚à•‚à•-functor iii ii
     where
      i : f (g k) Ôºù k
      i = pr‚ÇÇ (f-g-bijective k)
      ii : ‚àÉ q Íûâ ‚Ñö , g k < q √ó q ‚àà L
      ii = (pr‚ÇÅ (rounded-left-x (g k))) k-L
      iii : Œ£ q Íûâ ‚Ñö , g k < q √ó q ‚àà L ‚Üí Œ£ p Íûâ ‚Ñö , k < p √ó p ‚àà left
      iii (q , (l , q-L)) = f q , vii , vi
       where
        iv : g k < q ‚Üí f (g k) < f q
        iv = pr‚ÇÅ (f-order-preserving (g k) q)
        v : g (f q) ‚àà L
        v = transport (_‚àà L) (pr‚ÇÅ (f-g-bijective q) ‚Åª¬π) q-L
        vi : g (f q) ‚àà L
        vi = transport (_‚àà L) (pr‚ÇÅ (f-g-bijective q) ‚Åª¬π) q-L
        vii : k < f q
        vii = transport (_< f q) i (iv l)
    II : ‚àÉ p Íûâ ‚Ñö , k < p √ó p ‚àà left ‚Üí k ‚àà left
    II e = ‚à•‚à•-rec (‚àà-is-prop left k) i e
     where
      i : Œ£ p Íûâ ‚Ñö , k < p √ó p ‚àà left ‚Üí k ‚àà left
      i (p , (l , p-L)) = iv ‚à£ (g p) , iii , p-L ‚à£
       where
        ii : (k < p) ‚Üî (g k < g p)
        ii = bijective-and-monotonic f g f-order-preserving f-g-bijective k p
        iii : g k < g p
        iii = (pr‚ÇÅ ii) l
        iv : ‚àÉ p' Íûâ ‚Ñö , g k < p' √ó p' ‚àà L ‚Üí g k ‚àà L
        iv = pr‚ÇÇ (rounded-left-x (g k))

  rounded-right' : rounded-right right
  rounded-right' k = I , II
   where
    I : k ‚àà right ‚Üí ‚àÉ q Íûâ ‚Ñö , q < k √ó q ‚àà right
    I k-R = ‚à•‚à•-functor ii i
     where
      i : ‚àÉ q Íûâ ‚Ñö , q < g k √ó q ‚àà R
      i = pr‚ÇÅ (rounded-right-x (g k)) k-R
      ii : Œ£ p Íûâ ‚Ñö , p < g k √ó p ‚àà R ‚Üí Œ£ q Íûâ ‚Ñö , (q < k) √ó q ‚àà right
      ii (p , (l , p-R)) = (f p) , (transport (f p <_) iv iii) , transport (_‚àà R) (pr‚ÇÅ (f-g-bijective p) ‚Åª¬π) p-R
       where
        iii : f p < f (g k)
        iii = (pr‚ÇÅ (f-order-preserving p (g k))) l
        iv : f (g k) Ôºù k
        iv = pr‚ÇÇ (f-g-bijective k)
    II : ‚àÉ q Íûâ ‚Ñö , q < k √ó q ‚àà right ‚Üí k ‚àà right
    II e = ‚à•‚à•-rec (‚àà-is-prop right k) i e
     where
      i : Œ£ q Íûâ ‚Ñö , q < k √ó q ‚àà right ‚Üí k ‚àà right
      i (q , (l , q-R)) = iv ‚à£ (g q) , (iii , q-R) ‚à£
       where
        ii : (q < k) ‚Üî (g q < g k)
        ii = bijective-and-monotonic f g f-order-preserving f-g-bijective q k
        iii : g q < g k
        iii = (pr‚ÇÅ ii) l
        iv : ‚àÉ q Íûâ ‚Ñö , q < g k √ó q ‚àà R ‚Üí g k ‚àà R
        iv = pr‚ÇÇ (rounded-right-x (g k))

  disjoint' : disjoint left right
  disjoint' p q l = (pr‚ÇÇ I) II
   where
    I : (p < q) ‚Üî (g p < g q)
    I = bijective-and-monotonic f g f-order-preserving f-g-bijective p q
    II : g p < g q
    II = disjoint-x (g p) (g q) l

  located' : located left right
  located' p q l = III
   where
    I : (p < q) ‚Üî (g p < g q)
    I = bijective-and-monotonic f g f-order-preserving f-g-bijective p q
    II : p < q ‚Üí g p < g q
    II = pr‚ÇÅ I
    III : g p ‚àà L ‚à® g q ‚àà R
    III = located-x (g p) (g q) (II l)

diagram-commutes : (f g : ‚Ñö ‚Üí ‚Ñö)
                 ‚Üí (f-order-preserving : ((p q : ‚Ñö) ‚Üí (p < q) ‚Üî (f p < f q)))
                 ‚Üí (f-g-bijective : ((r : ‚Ñö) ‚Üí (g (f r) Ôºù r) √ó (f (g r) Ôºù r)))
                 ‚Üí (q : ‚Ñö)
                 ‚Üí (f‚ÜífÃÇ f g f-order-preserving f-g-bijective ‚àò Œπ) q Ôºù (Œπ ‚àò f) q
diagram-commutes f g f-order-preserving f-g-bijective q = ‚Ñù-equality' ((fÃÇ ‚àò Œπ) q) ((Œπ ‚àò f) q) I II III IV
 where
  fÃÇ : ‚Ñù ‚Üí ‚Ñù
  fÃÇ = f‚ÜífÃÇ f g f-order-preserving f-g-bijective

  I : (a : ‚Ñö) ‚Üí g a < q ‚Üí a < f q
  I a b = transport (_< f q) ii i
   where
    i : f (g a) < f q
    i = (pr‚ÇÅ (f-order-preserving (g a) q)) b
    ii : f (g a) Ôºù a
    ii = pr‚ÇÇ (f-g-bijective a)
  II : (a : ‚Ñö) ‚Üí a < f q ‚Üí g a < q
  II a b = transport (g a <_) ii i
   where
    i : g a < g (f q)
    i = (pr‚ÇÅ (bijective-and-monotonic f g f-order-preserving f-g-bijective a (f q))) b
    ii : g (f q) Ôºù q
    ii = pr‚ÇÅ (f-g-bijective q)
  III : (a : ‚Ñö) ‚Üí q < g a ‚Üí f q < a
  III a b = transport (f q <_) ii i
   where
    i : f q < f (g a)
    i = (pr‚ÇÅ (f-order-preserving q (g a))) b
    ii : f (g a) Ôºù a
    ii = pr‚ÇÇ (f-g-bijective a)
  IV : (a : ‚Ñö) ‚Üí f q < a ‚Üí q < g a
  IV a b = transport (_< g a) ii i
   where
    i : g (f q) < g a
    i = (pr‚ÇÅ (bijective-and-monotonic f g f-order-preserving f-g-bijective (f q) a)) b
    ii : g (f q) Ôºù q
    ii = pr‚ÇÅ (f-g-bijective q)
\end{code}

With the monotonic extension theorem, here is an example of extending
the function which adds 1 to a rational.

\begin{code}

‚Ñö-succ : ‚Ñö ‚Üí ‚Ñö
‚Ñö-succ q = q + 1‚Ñö

‚Ñö-pred : ‚Ñö ‚Üí ‚Ñö
‚Ñö-pred q = q - 1‚Ñö

<-‚Ñö-succ : (p q : ‚Ñö) ‚Üí (p < q) ‚Üî (‚Ñö-succ p < ‚Ñö-succ q)
<-‚Ñö-succ p q = i , ii
 where
  i : p < q ‚Üí ‚Ñö-succ p < ‚Ñö-succ q
  i l = ‚Ñö<-addition-preserves-order p q 1‚Ñö l
  ii : ‚Ñö-succ p < ‚Ñö-succ q ‚Üí p < q
  ii l = transport‚ÇÇ _<_ iv v iii
   where
    iii : p + 1‚Ñö - 1‚Ñö < q + 1‚Ñö - 1‚Ñö
    iii = ‚Ñö<-addition-preserves-order (p + 1‚Ñö) (q + 1‚Ñö) (- 1‚Ñö) l
    iv : p + 1‚Ñö - 1‚Ñö Ôºù p
    iv = ‚Ñö+-assoc p 1‚Ñö (- 1‚Ñö) ‚àô ‚Ñö-inverse-intro p 1‚Ñö ‚Åª¬π
    v : q + 1‚Ñö - 1‚Ñö Ôºù q
    v =  ‚Ñö+-assoc q 1‚Ñö (- 1‚Ñö) ‚àô ‚Ñö-inverse-intro q 1‚Ñö ‚Åª¬π

‚Ñö-succ-pred : (r : ‚Ñö) ‚Üí (‚Ñö-pred (‚Ñö-succ r) Ôºù r) √ó (‚Ñö-succ (‚Ñö-pred r) Ôºù r)
‚Ñö-succ-pred r = i , ii
 where
  i : ‚Ñö-pred (‚Ñö-succ r) Ôºù r
  i = ‚Ñö+-assoc r 1‚Ñö (- 1‚Ñö) ‚àô ‚Ñö-inverse-intro r 1‚Ñö ‚Åª¬π
  ii : ‚Ñö-succ (‚Ñö-pred r) Ôºù r
  ii = ‚Ñö-succ (‚Ñö-pred r) Ôºù‚ü® by-definition                           ‚ü©
       r - 1‚Ñö + 1‚Ñö       Ôºù‚ü® ‚Ñö+-assoc r (- 1‚Ñö) 1‚Ñö                 ‚ü©
       r + ((- 1‚Ñö) + 1‚Ñö) Ôºù‚ü® ap (r +_) (‚Ñö+-comm (- 1‚Ñö) 1‚Ñö)           ‚ü©
       r + (1‚Ñö - 1‚Ñö)     Ôºù‚ü® ap (r +_) (‚Ñö-inverse-sum-to-zero 1‚Ñö) ‚ü©
       r + 0‚Ñö            Ôºù‚ü® ‚Ñö-zero-right-neutral r ‚ü©
       r                 ‚àé

‚Ñù-succ : ‚Ñù ‚Üí ‚Ñù
‚Ñù-succ = f‚ÜífÃÇ ‚Ñö-succ ‚Ñö-pred <-‚Ñö-succ ‚Ñö-succ-pred

‚Ñö-succ-behaviour-preserved : (q : ‚Ñö) ‚Üí ‚Ñù-succ (Œπ q) Ôºù Œπ (‚Ñö-succ q)
‚Ñö-succ-behaviour-preserved q = diagram-commutes ‚Ñö-succ ‚Ñö-pred <-‚Ñö-succ ‚Ñö-succ-pred q

\end{code}

With this, we have a function which adds one to a real number, which
agrees with the function that adds one to a rational. Moreover, we
didn't have to write the proof that this function produces a real (by
proving that the output satisifies the properties of a real, because
this is taken care of by the f‚ÜífÃÇ function.

TODO: I would like to be able to show that the extended function
satisfies certain properties. For example, proving that x < x + 1 for
any real.

\begin{code}

‚Ñö-succ-preserves-order : (p : ‚Ñö) ‚Üí p < ‚Ñö-succ p
‚Ñö-succ-preserves-order p = ‚Ñö<-addition-preserves-order'' p 1‚Ñö (0 , refl)

test : (x : ‚Ñö) -> (Œπ x) < ‚Ñù-succ (Œπ x) -- With Todds Help
test x = transport (Œπ x <_) (‚Ñö-succ-behaviour-preserved x ‚Åª¬π)
           (embedding-preserves-order x (‚Ñö-succ x)
             (‚Ñö-succ-preserves-order x))

bijection-preserves-monotone-multi : (f g : ‚Ñö ‚Üí ‚Ñö ‚Üí ‚Ñö) ‚Üí ùì§‚ÇÄ Ãá
bijection-preserves-monotone-multi f g = ((p q r : ‚Ñö) ‚Üí (p < q) ‚Üî (f p r < f q r))
                                       ‚Üí ((p q : ‚Ñö) ‚Üí (g (f p q) q Ôºù p) √ó (f (g p q) q Ôºù p))
                                       ‚Üí ((p q r : ‚Ñö) ‚Üí (p < q) ‚Üî (g p r < g q r))

bijection-preserves-monotone-multi-proof : (f g : ‚Ñö ‚Üí ‚Ñö ‚Üí ‚Ñö) ‚Üí bijection-preserves-monotone-multi f g
bijection-preserves-monotone-multi-proof f g f-preserves-order f-g-bijection = Œ≥
 where
  Œ≥ : (p q r : ‚Ñö) ‚Üí (p < q) ‚Üî (g p r < g q r)
  Œ≥ p q r = ltr , rtl
   where
    apply-order-preversation :  (g p r < g q r) ‚Üî (f (g p r) r < f (g q r) r)
    apply-order-preversation = f-preserves-order (g p r) (g q r) r

    ltr : p < q ‚Üí g p r < g q r
    ltr l = (rl-implication apply-order-preversation) i
     where
      i :  f (g p r) r < f (g q r) r
      i = transport‚ÇÇ _<_ (pr‚ÇÇ (f-g-bijection p r) ‚Åª¬π) (pr‚ÇÇ (f-g-bijection q r) ‚Åª¬π) l
    rtl : g p r < g q r ‚Üí p < q
    rtl l = transport‚ÇÇ _<_ (pr‚ÇÇ (f-g-bijection p r)) (pr‚ÇÇ (f-g-bijection q r)) i
     where
      i : f (g p r) r < f (g q r) r
      i = (lr-implication apply-order-preversation) l

\end{code}
