Andrew Sneap, November 2020 - March 2021

In this file I define rational numbers.

\begin{code}

{-# OPTIONS --safe --without-K #-}

open import Integers.Abs
open import Integers.Multiplication renaming (_*_ to _‚Ñ§*_)
open import Integers.Negation
open import Integers.Order
open import Integers.Type
open import MLTT.Spartan renaming (_+_ to _‚àî_)
open import Naturals.Division
open import Naturals.HCF
open import Naturals.Multiplication renaming (_*_ to _‚Ñï*_)
open import Naturals.Properties
open import Notation.CanonicalMap
open import Rationals.Fractions
open import TypeTopology.SigmaDiscreteAndTotallySeparated
open import UF.Base hiding (_‚âà_)
open import UF.DiscreteAndSeparated
open import UF.Sets
open import UF.Subsingletons

module Rationals.Type where

‚Ñö : ùì§‚ÇÄ Ãá
‚Ñö = Œ£ q Íûâ ùîΩ , is-in-lowest-terms q

‚Ñö‚Å¥ = ‚Ñö √ó ‚Ñö √ó ‚Ñö √ó ‚Ñö

is-in-lowest-terms-is-discrete : (q : ùîΩ)
                               ‚Üí is-discrete (is-in-lowest-terms q)
is-in-lowest-terms-is-discrete q Œ± Œ≤
 = inl (is-in-lowest-terms-is-prop q Œ± Œ≤)

‚Ñö-is-discrete : is-discrete ‚Ñö
‚Ñö-is-discrete = Œ£-is-discrete ùîΩ-is-discrete is-in-lowest-terms-is-discrete

‚Ñö-is-set : is-set ‚Ñö
‚Ñö-is-set = discrete-types-are-sets ‚Ñö-is-discrete

toùîΩ : ‚Ñö ‚Üí ùîΩ
toùîΩ (q , _) = q

to‚Ñölemma : ((x , a) : ùîΩ)
         ‚Üí Œ£ ((x' , a') , p) Íûâ ‚Ñö , (Œ£ h Íûâ ‚Ñï , (x Ôºù (pos (succ h)) ‚Ñ§* x')
                                            √ó (succ a Ôºù (succ h) ‚Ñï* succ a'))
to‚Ñölemma (pos a , b) = f (divbyhcf a (succ b))
 where
  f : Œ£ h Íûâ ‚Ñï , Œ£ x Íûâ ‚Ñï , Œ£ y Íûâ ‚Ñï , ((h ‚Ñï* x Ôºù a) √ó (h ‚Ñï* y Ôºù succ b))
                                  √ó coprime x y ‚Üí _
  f (h , x , 0 , (Œ≥‚ÇÅ , Œ≥‚ÇÇ) , r) = ùüò-elim (positive-not-zero b (Œ≥‚ÇÇ ‚Åª¬π))
  f (0 , x , succ y , (Œ≥‚ÇÅ , Œ≥‚ÇÇ) , r) = ùüò-elim (positive-not-zero b Œ≥)
   where
    Œ≥ : succ b Ôºù 0
    Œ≥ = succ b      Ôºù‚ü® Œ≥‚ÇÇ ‚Åª¬π                   ‚ü©
        0 ‚Ñï* succ y Ôºù‚ü® zero-left-base (succ y) ‚ü©
        0           ‚àé
  f (succ h , x , succ y , (Œ≥‚ÇÅ , Œ≥‚ÇÇ) , r) = Œ≥
   where
    I : pos a Ôºù pos (succ h) ‚Ñ§* pos x
    I = pos a                 Ôºù‚ü® ap pos Œ≥‚ÇÅ ‚Åª¬π                                ‚ü©
        pos (succ h ‚Ñï* x)     Ôºù‚ü® pos-multiplication-equiv-to-‚Ñï (succ h) x ‚Åª¬π ‚ü©
        pos (succ h) ‚Ñ§* pos x ‚àé

    Œ≥ : _
    Œ≥ = ((pos x , y) , coprime-to-coprime' x (succ y) r) , h , I , (Œ≥‚ÇÇ ‚Åª¬π)
to‚Ñölemma (negsucc a , b) = f (divbyhcf (succ a) (succ b))
 where
  f : (Œ£ h Íûâ ‚Ñï , Œ£ x Íûâ ‚Ñï , Œ£ y Íûâ ‚Ñï , ((h ‚Ñï* x Ôºù (succ a))
                               √ó (h ‚Ñï* y Ôºù succ b))
                               √ó coprime x y) ‚Üí _
  f (h , x , 0 , (Œ≥‚ÇÅ , Œ≥‚ÇÇ) , r) = ùüò-elim (positive-not-zero b (Œ≥‚ÇÇ ‚Åª¬π))
  f (h , 0 , succ y , (Œ≥‚ÇÅ , Œ≥‚ÇÇ) , r) = ùüò-elim (positive-not-zero a (Œ≥‚ÇÅ ‚Åª¬π))
  f (0 , succ x , succ y , (Œ≥‚ÇÅ , Œ≥‚ÇÇ) , r) = ùüò-elim (positive-not-zero b Œ≥)
   where
    Œ≥ : succ b Ôºù 0
    Œ≥ = succ b      Ôºù‚ü® Œ≥‚ÇÇ ‚Åª¬π                   ‚ü©
        0 ‚Ñï* succ y Ôºù‚ü® zero-left-base (succ y) ‚ü©
        0 ‚àé
  f (succ h , succ x , succ y , (Œ≥‚ÇÅ , Œ≥‚ÇÇ) , r) = Œ≥
   where
    I : pos (succ a) Ôºù (pos (succ h) ‚Ñ§* pos (succ x))
    I = pos (succ a)                 Ôºù‚ü® ap pos Œ≥‚ÇÅ ‚Åª¬π ‚ü©
        pos (succ h ‚Ñï* succ x)       Ôºù‚ü® i            ‚ü©
        pos (succ h) ‚Ñ§* pos (succ x) ‚àé
     where
      i = pos-multiplication-equiv-to-‚Ñï (succ h) (succ x) ‚Åª¬π

    II : negsucc a Ôºù pos (succ h) ‚Ñ§* negsucc x
    II = negsucc a                       Ôºù‚ü® ap -_ I ‚ü©
        - (pos (succ h) ‚Ñ§* pos (succ x)) Ôºù‚ü® i       ‚ü©
        pos (succ h) ‚Ñ§* (- pos (succ x)) ‚àé
     where
      i = negation-dist-over-mult (pos (succ h)) (pos (succ x)) ‚Åª¬π

    q : ‚Ñö
    q = (negsucc x , y) , coprime-to-coprime' (succ x) (succ y) r

    Œ≥ : _
    Œ≥ = q , h , II , (Œ≥‚ÇÇ ‚Åª¬π)

to‚Ñö : ùîΩ ‚Üí ‚Ñö
to‚Ñö q = pr‚ÇÅ (to‚Ñölemma q)

num‚Ñö : ùîΩ ‚Üí ‚Ñ§
num‚Ñö q = (pr‚ÇÅ ‚àò pr‚ÇÅ ‚àò pr‚ÇÅ) (to‚Ñölemma q)

dnom‚Ñö : ùîΩ ‚Üí ‚Ñï
dnom‚Ñö q = (pr‚ÇÇ ‚àò pr‚ÇÅ ‚àò pr‚ÇÅ) (to‚Ñölemma q)

hcfùîΩ : ùîΩ ‚Üí ‚Ñï
hcfùîΩ q = pr‚ÇÅ (pr‚ÇÇ (to‚Ñölemma q))

ilt‚Ñö : (q : ùîΩ) ‚Üí is-in-lowest-terms (num‚Ñö q , dnom‚Ñö q)
ilt‚Ñö (x , a) = (pr‚ÇÇ ‚àò pr‚ÇÅ) (to‚Ñölemma (x , a))

numr : ((x , a) : ùîΩ) ‚Üí x Ôºù (pos (succ (hcfùîΩ (x , a)))) ‚Ñ§* num‚Ñö (x , a)
numr (x , a) = pr‚ÇÅ (pr‚ÇÇ (pr‚ÇÇ (to‚Ñölemma (x , a))))

dnomr : ((x , a) : ùîΩ) ‚Üí succ a Ôºù succ (hcfùîΩ (x , a)) ‚Ñï* succ (dnom‚Ñö (x , a))
dnomr (x , a) = pr‚ÇÇ (pr‚ÇÇ (pr‚ÇÇ (to‚Ñölemma (x , a))))

dnomrP : ((x , a) : ùîΩ)
       ‚Üí pos (succ a) Ôºù pos (succ (hcfùîΩ (x , a)) ‚Ñï* succ (dnom‚Ñö (x , a)))
dnomrP (x , a) = ap pos (dnomr (x , a))

dnomrP' : ((x , a) : ùîΩ)
        ‚Üí pos (succ a) Ôºù pos (succ (hcfùîΩ (x , a))) ‚Ñ§* pos (succ (dnom‚Ñö (x , a)))
dnomrP' (x , a) = Œ≥
 where
  h  = hcfùîΩ (x , a)
  a' = dnom‚Ñö (x , a)

  Œ≥ : pos (succ a) Ôºù pos (succ h) ‚Ñ§* pos (succ a')
  Œ≥ = pos (succ a)                  Ôºù‚ü® i  ‚ü©
      pos (succ h ‚Ñï* succ a')       Ôºù‚ü® ii ‚ü©
      pos (succ h) ‚Ñ§* pos (succ a') ‚àé
   where
    i  = dnomrP (x , a)
    ii = pos-multiplication-equiv-to-‚Ñï (succ h) (succ a') ‚Åª¬π

0‚Ñö 1‚Ñö -1‚Ñö 1/3 2/3 1/2 1/5 2/5 3/5 1/4 3/4 : ‚Ñö
-1‚Ñö = to‚Ñö (negsucc 0 , 0)
0‚Ñö  = to‚Ñö (pos 0 , 0)
1‚Ñö  = to‚Ñö (pos 1 , 0)
1/3 = to‚Ñö (pos 1 , 2)
2/3 = to‚Ñö (pos 2 , 2)
1/2 = to‚Ñö (pos 1 , 1)
1/5 = to‚Ñö (pos 1 , 4)
2/5 = to‚Ñö (pos 2 , 4)
3/5 = to‚Ñö (pos 3 , 4)
4/5 = to‚Ñö (pos 4 , 4)
1/4 = to‚Ñö (pos 1 , 3)
3/4 = to‚Ñö (pos 3 , 3)

equiv-equality : (p q : ùîΩ) ‚Üí p ‚âà q ‚Üî to‚Ñö p Ôºù to‚Ñö q
equiv-equality (x , a) (y , b) = Œ≥‚ÇÅ , Œ≥‚ÇÇ
 where
  a' b' h h' : ‚Ñï
  a' = dnom‚Ñö (x , a)
  b' = dnom‚Ñö (y , b)
  h  = hcfùîΩ (x , a)
  h' = hcfùîΩ (y , b)

  x' y' ph ph' pa' pb' : ‚Ñ§
  x'  = num‚Ñö (x , a)
  y'  = num‚Ñö (y , b)
  ph  = (pos ‚àò succ) h
  ph' = (pos ‚àò succ) h'
  pa  = (pos ‚àò succ) a
  pa' = (pos ‚àò succ) a'
  pb  = (pos ‚àò succ) b
  pb' = (pos ‚àò succ) b'

  Œ≥-lemma : (p q r s : ‚Ñ§)
          ‚Üí p ‚Ñ§* q ‚Ñ§* (r ‚Ñ§* s) Ôºù p ‚Ñ§* r ‚Ñ§* (q ‚Ñ§* s)
  Œ≥-lemma p q r s =
   p ‚Ñ§* q ‚Ñ§* (r ‚Ñ§* s)   Ôºù‚ü® ‚Ñ§*-assoc p q (r ‚Ñ§* s)                  ‚ü©
   p ‚Ñ§* (q ‚Ñ§* (r ‚Ñ§* s)) Ôºù‚ü® ap (p ‚Ñ§*_) (‚Ñ§*-assoc q r s ‚Åª¬π)         ‚ü©
   p ‚Ñ§* (q ‚Ñ§* r ‚Ñ§* s)   Ôºù‚ü® ap (Œª - ‚Üí p ‚Ñ§* (- ‚Ñ§* s)) (‚Ñ§*-comm q r) ‚ü©
   p ‚Ñ§* (r ‚Ñ§* q ‚Ñ§* s)   Ôºù‚ü® ap (p ‚Ñ§*_) (‚Ñ§*-assoc r q s)            ‚ü©
   p ‚Ñ§* (r ‚Ñ§* (q ‚Ñ§* s)) Ôºù‚ü® ‚Ñ§*-assoc p r (q ‚Ñ§* s) ‚Åª¬π               ‚ü©
   p ‚Ñ§* r ‚Ñ§* (q ‚Ñ§* s)   ‚àé

  Œ≥‚ÇÅ : (x , a) ‚âà (y , b) ‚Üí to‚Ñö (x , a) Ôºù to‚Ñö (y , b)
  Œ≥‚ÇÅ e = to-subtype-Ôºù is-in-lowest-terms-is-prop Œ≥
   where
    I : is-in-lowest-terms (x' , a')
    I = ilt‚Ñö (x , a)

    II : is-in-lowest-terms (y' , b')
    II = ilt‚Ñö (y , b)

    III : ph ‚Ñ§* ph' ‚Ñ§* (x' ‚Ñ§* pb') Ôºù ph ‚Ñ§* ph' ‚Ñ§* (y' ‚Ñ§* pa')
    III = ph ‚Ñ§* ph' ‚Ñ§* (x' ‚Ñ§* pb') Ôºù‚ü® Œ≥-lemma ph ph' x' pb'                  ‚ü©
          ph ‚Ñ§* x' ‚Ñ§* (ph' ‚Ñ§* pb') Ôºù‚ü® ap (ph ‚Ñ§* x' ‚Ñ§*_) (dnomrP' (y , b) ‚Åª¬π) ‚ü©
          ph ‚Ñ§* x' ‚Ñ§* pb           Ôºù‚ü® ap (_‚Ñ§* pb) (numr (x , a) ‚Åª¬π)          ‚ü©
          x ‚Ñ§* pb                  Ôºù‚ü® e                                      ‚ü©
          y ‚Ñ§* pa                  Ôºù‚ü® ap (_‚Ñ§* pa) (numr (y , b))             ‚ü©
          ph' ‚Ñ§* y' ‚Ñ§* pa          Ôºù‚ü® ap (ph' ‚Ñ§* y' ‚Ñ§*_) (dnomrP' (x , a))   ‚ü©
          ph' ‚Ñ§* y' ‚Ñ§* (ph ‚Ñ§* pa') Ôºù‚ü® Œ≥-lemma ph' ph y' pa' ‚Åª¬π               ‚ü©
          ph' ‚Ñ§* ph ‚Ñ§* (y' ‚Ñ§* pa') Ôºù‚ü® ap (_‚Ñ§* (y' ‚Ñ§* pa')) (‚Ñ§*-comm ph' ph)  ‚ü©
          ph ‚Ñ§* ph' ‚Ñ§* (y' ‚Ñ§* pa') ‚àé

    IV : not-zero (ph ‚Ñ§* ph')
    IV iz = non-zero-multiplication ph ph' hnz hnz' piz
     where
      hnz : ph ‚â† pos 0
      hnz = pos-succ-not-zero h

      hnz' : ph' ‚â† pos 0
      hnz' = pos-succ-not-zero h'

      piz : ph ‚Ñ§* ph' Ôºù pos 0
      piz = from-is-zero (ph ‚Ñ§* ph') iz

    V : x' ‚Ñ§* pb' Ôºù y' ‚Ñ§* pa'
    V = ‚Ñ§-mult-left-cancellable (x' ‚Ñ§* pb') (y' ‚Ñ§* pa') (ph ‚Ñ§* ph') IV III

    Œ≥ : (x' , a') Ôºù (y' , b')
    Œ≥ = equiv-with-lowest-terms-is-equal (x' , a') (y' , b') V I II

  Œ≥‚ÇÇ : to‚Ñö (x , a) Ôºù to‚Ñö (y , b) ‚Üí (x , a) ‚âà (y , b)
  Œ≥‚ÇÇ e = x ‚Ñ§* pos (succ b)        Ôºù‚ü® ap (x ‚Ñ§*_) (dnomrP' (y , b))           ‚ü©
         x ‚Ñ§* (ph' ‚Ñ§* pb')        Ôºù‚ü® ap (_‚Ñ§* (ph' ‚Ñ§* pb')) (numr (x , a))   ‚ü©
         ph ‚Ñ§* x' ‚Ñ§* (ph' ‚Ñ§* pb') Ôºù‚ü® Œ≥-lemma ph x' ph' pb'                  ‚ü©
         ph ‚Ñ§* ph' ‚Ñ§* (x' ‚Ñ§* pb') Ôºù‚ü® ap (_‚Ñ§* (x' ‚Ñ§* pb')) (‚Ñ§*-comm ph ph')  ‚ü©
         ph' ‚Ñ§* ph ‚Ñ§* (x' ‚Ñ§* pb') Ôºù‚ü® ap (Œª - ‚Üí ph' ‚Ñ§* ph ‚Ñ§* (- ‚Ñ§* pb')) I   ‚ü©
         ph' ‚Ñ§* ph ‚Ñ§* (y' ‚Ñ§* pb') Ôºù‚ü® ap (Œª - ‚Üí ph' ‚Ñ§* ph ‚Ñ§* (y' ‚Ñ§* -) ) II  ‚ü©
         ph' ‚Ñ§* ph ‚Ñ§* (y' ‚Ñ§* pa') Ôºù‚ü® Œ≥-lemma ph' y' ph pa' ‚Åª¬π               ‚ü©
         ph' ‚Ñ§* y' ‚Ñ§* (ph ‚Ñ§* pa') Ôºù‚ü® ap (_‚Ñ§* (ph ‚Ñ§* pa')) (numr (y , b) ‚Åª¬π) ‚ü©
         y ‚Ñ§* (ph ‚Ñ§* pa')         Ôºù‚ü® ap (y ‚Ñ§*_) (dnomrP' (x , a) ‚Åª¬π)        ‚ü©
         y ‚Ñ§* pos (succ a)        ‚àé
   where
    I : x' Ôºù y'
    I = ap (pr‚ÇÅ ‚àò pr‚ÇÅ) e

    II : pb' Ôºù pa'
    II = ap (pos ‚àò succ ‚àò pr‚ÇÇ ‚àò pr‚ÇÅ) (e ‚Åª¬π)

equiv‚Üíequality : (p q : ùîΩ) ‚Üí p ‚âà q ‚Üí to‚Ñö p Ôºù to‚Ñö q
equiv‚Üíequality p q = pr‚ÇÅ (equiv-equality p q)

equality‚Üíequiv : (p q : ùîΩ) ‚Üí to‚Ñö p Ôºù to‚Ñö q ‚Üí p ‚âà q
equality‚Üíequiv p q = pr‚ÇÇ (equiv-equality p q)

to‚Ñö-toùîΩ : ((p , Œ±) : ‚Ñö) ‚Üí (p , Œ±) Ôºù to‚Ñö p
to‚Ñö-toùîΩ ((x , a) , Œ±) = to-subtype-Ôºù is-in-lowest-terms-is-prop Œ≥
 where
  x'  = num‚Ñö (x , a)
  a'  = dnom‚Ñö (x , a)
  h   = hcfùîΩ (x , a)
  pa' = (pos ‚àò succ) a'
  pa  = (pos ‚àò succ) a
  ph  = (pos ‚àò succ) h

  I : coprime (abs x) (succ a)
  I = coprime'-to-coprime (abs x) (succ a) Œ±

  II : (x , a) ‚âà (x' , a')
  II = x ‚Ñ§* pa'          Ôºù‚ü® ap (_‚Ñ§* pa') (numr (x , a))      ‚ü©
       ph ‚Ñ§* x' ‚Ñ§* pa'   Ôºù‚ü® ap (_‚Ñ§* pa') (‚Ñ§*-comm ph x')     ‚ü©
       x' ‚Ñ§* ph ‚Ñ§* pa'   Ôºù‚ü® ‚Ñ§*-assoc x' ph pa'               ‚ü©
       x' ‚Ñ§* (ph ‚Ñ§* pa') Ôºù‚ü® ap (x' ‚Ñ§*_) (dnomrP' (x , a) ‚Åª¬π) ‚ü©
       x' ‚Ñ§* pa          ‚àé

  Œ≥ : (x , a) Ôºù (x' , a')
  Œ≥ = equiv-with-lowest-terms-is-equal (x , a) (x' , a') II Œ± (ilt‚Ñö (x , a))

‚Ñö-Ôºù : ((p , Œ±) (q , Œ≤) : ‚Ñö) ‚Üí p ‚âà q ‚Üí (p , Œ±) Ôºù (q , Œ≤)
‚Ñö-Ôºù (p , Œ±) (q , Œ≤) e = to-subtype-Ôºù is-in-lowest-terms-is-prop I
 where
  I : p Ôºù q
  I = equiv-with-lowest-terms-is-equal p q e Œ± Œ≤

‚âà-to‚Ñö : (p : ùîΩ) ‚Üí p ‚âà toùîΩ (to‚Ñö p)
‚âà-to‚Ñö p = equality‚Üíequiv p p' (to‚Ñö-toùîΩ (to‚Ñö p))
 where
  p' = toùîΩ (to‚Ñö p)

q-has-qn : (q : ‚Ñö) ‚Üí Œ£ q' Íûâ ùîΩ , q Ôºù to‚Ñö q'
q-has-qn (q , Œ±) =  q , to‚Ñö-toùîΩ (q , Œ±)

‚Ñö-zero-not-one :  ¬¨ (0‚Ñö Ôºù 1‚Ñö)
‚Ñö-zero-not-one e = positive-not-zero 0 (pos-lc Œ≥ ‚Åª¬π)
 where
  I : to‚Ñö (pos 0 , 0) Ôºù to‚Ñö (pos 1 , 0) ‚Üí (pos 0 , 0) ‚âà (pos 1 , 0)
  I = equality‚Üíequiv (pos 0 , 0) (pos 1 , 0)

  Œ≥ : pos 0 Ôºù pos 1
  Œ≥ = pos 0          Ôºù‚ü® refl ‚ü©
      pos 0 ‚Ñ§* pos 1 Ôºù‚ü® I e  ‚ü©
      pos 1 ‚Ñ§* pos 1 Ôºù‚ü® refl ‚ü©
      pos 1          ‚àé

‚Ñö-positive-not-zero : (x a : ‚Ñï) ‚Üí ¬¨ (to‚Ñö (pos (succ x) , a) Ôºù 0‚Ñö)
‚Ñö-positive-not-zero x a e = pos-succ-not-zero x Œ≥
 where
  I : (pos (succ x) , a) ‚âà (pos 0 , 0)
  I = equality‚Üíequiv (pos (succ x) , a) (pos 0 , 0) e

  Œ≥ : pos (succ x) Ôºù pos 0
  Œ≥ = pos (succ x)            Ôºù‚ü® by-definition                    ‚ü©
      pos (succ x) ‚Ñ§* (pos 1) Ôºù‚ü® I                                ‚ü©
      pos 0 ‚Ñ§* pos (succ a)   Ôºù‚ü® ‚Ñ§-zero-left-base (pos (succ a))  ‚ü©
      pos 0                   ‚àé

‚Ñö-negative-not-zero : (x a : ‚Ñï) ‚Üí ¬¨ (to‚Ñö (negsucc x , a) Ôºù 0‚Ñö)
‚Ñö-negative-not-zero x a e = negsucc-not-zero x Œ≥
 where
  I : (negsucc x , a) ‚âà (pos 0 , 0)
  I = equality‚Üíequiv (negsucc x , a) (pos 0 , 0) e

  Œ≥ : negsucc x Ôºù pos 0
  Œ≥ = negsucc x             Ôºù‚ü® refl                            ‚ü©
      negsucc x ‚Ñ§* pos 1    Ôºù‚ü® I                               ‚ü©
      pos 0 ‚Ñ§* pos (succ a) Ôºù‚ü® ‚Ñ§-zero-left-base (pos (succ a)) ‚ü©
      pos 0                 ‚àé

numerator-zero-is-zero : (((x , a) , p) : ‚Ñö) ‚Üí x Ôºù pos 0 ‚Üí (x , a) , p Ôºù 0‚Ñö
numerator-zero-is-zero ((negsucc x , a) , p) e = ùüò-elim (negsucc-not-pos e)
numerator-zero-is-zero ((pos (succ x) , a) , p) e = ùüò-elim Œ≥
 where
  Œ≥ : ùüò
  Œ≥ = positive-not-zero x (pos-lc e)
numerator-zero-is-zero ((pos 0 , a) , p) e = Œ≥
 where
  I : (pos 0 , a) ‚âà (pos 0 , 0)
  I = pos 0 ‚Ñ§* pos 1        Ôºù‚ü® refl                               ‚ü©
      pos 0                 Ôºù‚ü® ‚Ñ§-zero-left-base (pos (succ a)) ‚Åª¬π ‚ü©
      pos 0 ‚Ñ§* pos (succ a) ‚àé

  Œ≥ : (pos 0 , a) , p Ôºù 0‚Ñö
  Œ≥ = (pos 0 , a) , p Ôºù‚ü® to‚Ñö-toùîΩ ((pos 0 , a) , p)                ‚ü©
      to‚Ñö (pos 0 , a) Ôºù‚ü® equiv‚Üíequality (pos 0 , a) (pos 0 , 0) I ‚ü©
      to‚Ñö (pos 0 , 0) Ôºù‚ü® refl                                     ‚ü©
      0‚Ñö ‚àé

instance
 canonical-map-ùîΩ-to-‚Ñö : Canonical-Map ùîΩ ‚Ñö
 Œπ {{canonical-map-ùîΩ-to-‚Ñö}} = to‚Ñö

‚Ñ§-to-‚Ñö : ‚Ñ§ ‚Üí ‚Ñö
‚Ñ§-to-‚Ñö z = Œπ (Œπ z)

instance
 canonical-map-‚Ñ§-to-‚Ñö : Canonical-Map ‚Ñ§ ‚Ñö
 Œπ {{canonical-map-‚Ñ§-to-‚Ñö}} = ‚Ñ§-to-‚Ñö

‚Ñï-to-‚Ñö : ‚Ñï ‚Üí ‚Ñö
‚Ñï-to-‚Ñö n = Œπ {{ canonical-map-‚Ñ§-to-‚Ñö }} (Œπ n)

instance
 canonical-map-‚Ñï-to-‚Ñö : Canonical-Map ‚Ñï ‚Ñö
 Œπ {{canonical-map-‚Ñï-to-‚Ñö}} = ‚Ñï-to-‚Ñö

\end{code}
