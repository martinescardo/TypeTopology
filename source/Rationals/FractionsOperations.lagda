Andrew Sneap, November 2021

\begin{code}

{-# OPTIONS --safe --without-K #-}

open import MLTT.Spartan renaming (_+_ to _‚àî_)

open import Naturals.Addition renaming (_+_ to _‚Ñï+_)
open import Naturals.Properties
open import UF.Base hiding (_‚âà_)
open import UF.Subsingletons
open import Integers.Type hiding (abs)
open import Integers.Abs
open import Integers.Addition renaming (_+_ to _‚Ñ§+_)
open import Integers.Multiplication renaming (_*_ to _‚Ñ§*_)
open import Integers.Negation renaming (-_ to ‚Ñ§-_)
open import Rationals.Fractions
open import Naturals.Multiplication renaming (_*_ to _‚Ñï*_)

module Rationals.FractionsOperations where

\end{code}

The denom-setup function is useful to manipulate denominators into an easier to work with form.

\begin{code}

denom-setup : (a b : ‚Ñï) ‚Üí  pos (succ (pred (succ a ‚Ñï* succ b))) Ôºù pos (succ a) ‚Ñ§* pos (succ b)
denom-setup a b = pos (succ (pred (succ a ‚Ñï* succ b))) Ôºù‚ü® i  ‚ü©
                  pos (succ a ‚Ñï* succ b)               Ôºù‚ü® ii ‚ü©
                  pos (succ a) ‚Ñ§* pos (succ b)         ‚àé
 where
  i  = ap pos (succ-pred-multiplication a b ‚Åª¬π)
  ii = pos-multiplication-equiv-to-‚Ñï (succ a) (succ b) ‚Åª¬π

-_ : ùîΩ ‚Üí ùîΩ
-_ (x , a) = ‚Ñ§- x , a

_+_ : ùîΩ ‚Üí ùîΩ ‚Üí ùîΩ
(x , y) + (x' , y')
 = x ‚Ñ§* pos (succ y') ‚Ñ§+ x' ‚Ñ§* pos (succ y) , pred (succ y ‚Ñï* succ y')

infixl 33 _+_

ùîΩ-zero-right-neutral : (q : ùîΩ) ‚Üí q + (pos 0 , 0) Ôºù q
ùîΩ-zero-right-neutral (x , a)
 = (x , a) + (pos 0 , 0) Ôºù‚ü® refl ‚ü©
   x ‚Ñ§+ (pos 0 ‚Ñ§* pos (succ a)) , a  Ôºù‚ü® i    ‚ü©
   x ‚Ñ§+ pos 0 , a                    Ôºù‚ü® refl ‚ü©
   x , a                             ‚àé
    where
     i =  ap (Œª - ‚Üí x ‚Ñ§+ - , a) (‚Ñ§*-comm (pos 0) (pos (succ a)))

ùîΩ+-comm : (p q : ùîΩ) ‚Üí p + q Ôºù q + p
ùîΩ+-comm (x , a) (y , b) = ap‚ÇÇ _,_ I II
 where
  I : x ‚Ñ§* pos (succ b) ‚Ñ§+ y ‚Ñ§* pos (succ a)
    Ôºù y ‚Ñ§* pos (succ a) ‚Ñ§+ x ‚Ñ§* pos (succ b)
  I = ‚Ñ§+-comm (x ‚Ñ§* pos (succ b)) (y ‚Ñ§* (pos (succ a)))

  II : pred (succ a ‚Ñï* succ b) Ôºù pred (succ b ‚Ñï* succ a)
  II = ap pred (mult-commutativity (succ a) (succ b))

ùîΩ+-assoc : (a b c : ùîΩ) ‚Üí a + b + c Ôºù a + (b + c)
ùîΩ+-assoc (x , a) (y , b) (z , c) = ap‚ÇÇ _,_ I II
 where
  left : ùîΩ
  left = (x , a) + (y , b)

  right : ùîΩ
  right = (y , b) + (z , c)

  Œ± Œ¥ : ‚Ñ§
  Œ± = pr‚ÇÅ left
  Œ¥ = pr‚ÇÅ right

  Œ≤ Œ≥ : ‚Ñï
  Œ≤ = pr‚ÇÇ left
  Œ≥ = pr‚ÇÇ right

  a' = pos (succ a)
  b' = pos (succ b)
  c' = pos (succ c)

  I : Œ± ‚Ñ§* c' ‚Ñ§+ z ‚Ñ§* pos (succ (pred (succ a ‚Ñï* succ b)))
    Ôºù x ‚Ñ§* pos (succ (pred (succ b ‚Ñï* succ c))) ‚Ñ§+ Œ¥ ‚Ñ§* a'
  I = Œ± ‚Ñ§* c' ‚Ñ§+ z ‚Ñ§* pos (succ (pred (succ a ‚Ñï* succ b)))       Ôºù‚ü® i    ‚ü©
      (x ‚Ñ§* b' ‚Ñ§+ y ‚Ñ§* a') ‚Ñ§* c' ‚Ñ§+ z ‚Ñ§* pos (succ a ‚Ñï* succ b)  Ôºù‚ü® ii   ‚ü©
      (x ‚Ñ§* b' ‚Ñ§+ y ‚Ñ§* a') ‚Ñ§* c' ‚Ñ§+ z ‚Ñ§* (a' ‚Ñ§* b')              Ôºù‚ü® iii  ‚ü©
      x ‚Ñ§* b' ‚Ñ§* c' ‚Ñ§+ y ‚Ñ§* a' ‚Ñ§* c' ‚Ñ§+ z ‚Ñ§* (b' ‚Ñ§* a')          Ôºù‚ü® iv   ‚ü©
      x ‚Ñ§* b' ‚Ñ§* c' ‚Ñ§+ (y ‚Ñ§* a' ‚Ñ§* c' ‚Ñ§+ z ‚Ñ§* (b' ‚Ñ§* a'))        Ôºù‚ü® v    ‚ü©
      x ‚Ñ§* (b' ‚Ñ§* c') ‚Ñ§+ (y ‚Ñ§* c' ‚Ñ§* a' ‚Ñ§+ z ‚Ñ§* b' ‚Ñ§* a')        Ôºù‚ü® vi   ‚ü©
      x ‚Ñ§* (b' ‚Ñ§* c') ‚Ñ§+ (y ‚Ñ§* c' ‚Ñ§+ z ‚Ñ§* b') ‚Ñ§* a'              Ôºù‚ü® vii  ‚ü©
      x ‚Ñ§* pos (succ b ‚Ñï* succ c) ‚Ñ§+ (y ‚Ñ§* c' ‚Ñ§+ z ‚Ñ§* b') ‚Ñ§* a'  Ôºù‚ü® viii ‚ü©
      x ‚Ñ§* pos (succ (pred (succ b ‚Ñï* succ c))) ‚Ñ§+ Œ¥ ‚Ñ§* a' ‚àé
       where
        i‚Çê‚Çö : succ (pred (succ a ‚Ñï* succ b)) Ôºù succ a ‚Ñï* succ b
        i‚Çê‚Çö = succ-pred-multiplication a b ‚Åª¬π
        ii‚Çê‚Çö : pos (succ a ‚Ñï* succ b) Ôºù a' ‚Ñ§* b'
        ii‚Çê‚Çö = pos-multiplication-equiv-to-‚Ñï (succ a) (succ b) ‚Åª¬π
        iii‚Çê‚Çö : z ‚Ñ§* (a' ‚Ñ§* b') Ôºù z ‚Ñ§* (b' ‚Ñ§* a')
        iii‚Çê‚Çö = ap (z ‚Ñ§*_) (‚Ñ§*-comm a' b')
        v‚Çê‚Çö‚ÇÅ : y ‚Ñ§* a' ‚Ñ§* c' Ôºù y ‚Ñ§* c' ‚Ñ§* a'
        v‚Çê‚Çö‚ÇÅ = ‚Ñ§-mult-rearrangement y a' c'
        v‚Çê‚Çö‚ÇÇ : z ‚Ñ§* (b' ‚Ñ§* a') Ôºù z ‚Ñ§* b' ‚Ñ§* a'
        v‚Çê‚Çö‚ÇÇ = ‚Ñ§*-assoc z b' a' ‚Åª¬π
        vi‚Çê‚Çö : y ‚Ñ§* c' ‚Ñ§* a' ‚Ñ§+ z ‚Ñ§* b' ‚Ñ§* a' Ôºù (y ‚Ñ§* c' ‚Ñ§+ z ‚Ñ§* b') ‚Ñ§* a'
        vi‚Çê‚Çö = distributivity-mult-over-‚Ñ§ (y ‚Ñ§* c') (z ‚Ñ§* b') a' ‚Åª¬π
        vii‚Çê‚Çö : b' ‚Ñ§* c' Ôºù pos (succ b ‚Ñï* succ c)
        vii‚Çê‚Çö = pos-multiplication-equiv-to-‚Ñï (succ b) (succ c)
        viii‚Çê‚Çö : succ b ‚Ñï* succ c Ôºù succ (pred (succ b ‚Ñï* succ c))
        viii‚Çê‚Çö = succ-pred-multiplication b c

        i    = ap (Œª - ‚Üí Œ± ‚Ñ§* c' ‚Ñ§+ z ‚Ñ§* pos -) i‚Çê‚Çö
        ii   = ap (Œª - ‚Üí (x ‚Ñ§* b' ‚Ñ§+ y ‚Ñ§* a') ‚Ñ§* c' ‚Ñ§+ z ‚Ñ§* -) ii‚Çê‚Çö
        iii  = ap‚ÇÇ _‚Ñ§+_ (distributivity-mult-over-‚Ñ§ (x ‚Ñ§* b') (y ‚Ñ§* a') c') iii‚Çê‚Çö
        iv   = ‚Ñ§+-assoc (x ‚Ñ§* b' ‚Ñ§* c') (y ‚Ñ§* a' ‚Ñ§* c') (z ‚Ñ§* (b' ‚Ñ§* a'))
        v    = ap‚ÇÇ _‚Ñ§+_ (‚Ñ§*-assoc x b' c') (ap‚ÇÇ _‚Ñ§+_ v‚Çê‚Çö‚ÇÅ v‚Çê‚Çö‚ÇÇ)
        vi   = ap (Œª - ‚Üí x ‚Ñ§* (b' ‚Ñ§* c') ‚Ñ§+ - ) vi‚Çê‚Çö
        vii  = ap (Œª - ‚Üí x ‚Ñ§* - ‚Ñ§+ (y ‚Ñ§* c' ‚Ñ§+ z ‚Ñ§* b') ‚Ñ§* a') vii‚Çê‚Çö
        viii = ap (Œª - ‚Üí  x ‚Ñ§* pos - ‚Ñ§+ Œ¥ ‚Ñ§* a') viii‚Çê‚Çö

  II : pred (succ (pred (succ a ‚Ñï* (succ b))) ‚Ñï* succ c)
    Ôºù pred (succ a ‚Ñï* succ (pred (succ b ‚Ñï+ succ b ‚Ñï* c)))
  II = pred (succ (pred (succ a ‚Ñï* succ b)) ‚Ñï* succ c)      Ôºù‚ü® i   ‚ü©
       pred (succ a ‚Ñï* succ b ‚Ñï* succ c)                    Ôºù‚ü® ii  ‚ü©
       pred (succ a ‚Ñï* (succ b ‚Ñï* succ c))                  Ôºù‚ü® iii ‚ü©
       pred (succ a ‚Ñï* succ (pred (succ b ‚Ñï+ succ b ‚Ñï* c))) ‚àé
   where
    i   = ap (Œª - ‚Üí pred (- ‚Ñï* succ c)) (succ-pred-multiplication a b ‚Åª¬π)
    ii  = ap pred (mult-associativity (succ a) (succ b) (succ c))
    iii = ap (Œª - ‚Üí pred (succ a ‚Ñï* -)) (succ-pred-multiplication b c)

‚âà-addition : (p q r : ùîΩ) ‚Üí p ‚âà q ‚Üí (p + r) ‚âà (q + r)
‚âà-addition (x , a) (y , b) (z , c) e‚ÇÅ = III
 where
  I :  pos (succ (pred (succ b ‚Ñï* succ c))) Ôºù pos (succ b) ‚Ñ§* pos (succ c)
  I = denom-setup b c

  II : pos (succ a) ‚Ñ§* pos (succ c) Ôºù pos (succ (pred (succ a ‚Ñï* succ c)))
  II = denom-setup a c ‚Åª¬π

  a' b' c' : ‚Ñ§
  a' = pos (succ a)
  b' = pos (succ b)
  c' = pos (succ c)

  III : (x , a) + (z , c) ‚âà (y , b) + (z , c)
  III = (x ‚Ñ§* c' ‚Ñ§+ (z ‚Ñ§* a')) ‚Ñ§* pos (succ (pred (succ b ‚Ñï* succ c))) Ôºù‚ü® i    ‚ü©
        (x ‚Ñ§* c' ‚Ñ§+ z ‚Ñ§* a') ‚Ñ§* (b' ‚Ñ§* c')                             Ôºù‚ü® ii   ‚ü©
        x ‚Ñ§* c' ‚Ñ§* (b' ‚Ñ§* c') ‚Ñ§+ z ‚Ñ§* a' ‚Ñ§* (b' ‚Ñ§* c')                 Ôºù‚ü® iii  ‚ü©
        x ‚Ñ§* (b' ‚Ñ§* c') ‚Ñ§* c' ‚Ñ§+ z ‚Ñ§* (b' ‚Ñ§* c') ‚Ñ§* a'                 Ôºù‚ü® iv   ‚ü©
        x ‚Ñ§* b' ‚Ñ§* c' ‚Ñ§* c' ‚Ñ§+ z ‚Ñ§* b' ‚Ñ§* c' ‚Ñ§* a'                     Ôºù‚ü® v    ‚ü©
        y ‚Ñ§* a' ‚Ñ§* c' ‚Ñ§* c' ‚Ñ§+ z ‚Ñ§* b' ‚Ñ§* (c' ‚Ñ§* a')                   Ôºù‚ü® vi   ‚ü©
        y ‚Ñ§* c' ‚Ñ§* a' ‚Ñ§* c' ‚Ñ§+ z ‚Ñ§* b' ‚Ñ§* (a' ‚Ñ§* c')                   Ôºù‚ü® vii  ‚ü©
        y ‚Ñ§* c' ‚Ñ§* (a' ‚Ñ§* c') ‚Ñ§+ z ‚Ñ§* b' ‚Ñ§* (a' ‚Ñ§* c')                 Ôºù‚ü® viii ‚ü©
        (y ‚Ñ§* c' ‚Ñ§+ z ‚Ñ§* b') ‚Ñ§* (a' ‚Ñ§* c')                             Ôºù‚ü® ix   ‚ü©
        (y ‚Ñ§* c' ‚Ñ§+ (z ‚Ñ§* b')) ‚Ñ§* pos (succ (pred (succ a ‚Ñï* succ c))) ‚àé
   where
    iii‚Çê‚Çö = ‚Ñ§-mult-rearrangement z a' (b' ‚Ñ§* c')
    iv‚Çê‚Çö = ap (_‚Ñ§* a') (‚Ñ§*-assoc z b' c' ‚Åª¬π)
    vi‚Çê‚Çö = ap (Œª - ‚Üí z ‚Ñ§* b' ‚Ñ§* -) (‚Ñ§*-comm c' a')

    i    = ap (Œª - ‚Üí (x ‚Ñ§* c' ‚Ñ§+ (z ‚Ñ§* a')) ‚Ñ§* -) I
    ii   = distributivity-mult-over-‚Ñ§ (x ‚Ñ§* c') (z ‚Ñ§* a') (b' ‚Ñ§* c')
    iii  = ap‚ÇÇ _‚Ñ§+_ (‚Ñ§-mult-rearrangement x c' (b' ‚Ñ§* c')) iii‚Çê‚Çö
    iv   = ap‚ÇÇ _‚Ñ§+_ (ap (_‚Ñ§* c') (‚Ñ§*-assoc x b' c' ‚Åª¬π)) iv‚Çê‚Çö
    v    = ap‚ÇÇ _‚Ñ§+_ (ap (Œª - ‚Üí -  ‚Ñ§* c' ‚Ñ§* c') e‚ÇÅ) (‚Ñ§*-assoc (z ‚Ñ§* b') c' a')
    vi   = ap‚ÇÇ _‚Ñ§+_ (ap (_‚Ñ§* c') (‚Ñ§-mult-rearrangement y a' c')) vi‚Çê‚Çö
    vii  = ap (_‚Ñ§+ z ‚Ñ§* b' ‚Ñ§* (a' ‚Ñ§* c')) (‚Ñ§*-assoc (y ‚Ñ§* c') a' c')
    viii = distributivity-mult-over-‚Ñ§ (y ‚Ñ§* c') (z ‚Ñ§* b') (a' ‚Ñ§* c') ‚Åª¬π
    ix   = ap (Œª - ‚Üí (y ‚Ñ§* c' ‚Ñ§+ (z ‚Ñ§* b')) ‚Ñ§* -) II

_*_ : ùîΩ ‚Üí ùîΩ ‚Üí ùîΩ
(x , y) * (x' , y') = x ‚Ñ§* x' , pred (succ y ‚Ñï* succ y')

infixl 34 _*_

‚âà-over-* : (p q r : ùîΩ) ‚Üí p ‚âà q ‚Üí (p * r) ‚âà (q * r)
‚âà-over-* (x , a) (y , b) (z , c) e = I
 where
  a' b' c' : ‚Ñ§
  a' = pos (succ a)
  b' = pos (succ b)
  c' = pos (succ c)

  I : x ‚Ñ§* z ‚Ñ§* pos (succ (pred (succ b ‚Ñï* succ c)))
    Ôºù y ‚Ñ§* z ‚Ñ§* pos (succ (pred (succ a ‚Ñï* succ c)))
  I = x ‚Ñ§* z ‚Ñ§* pos (succ (pred (succ b ‚Ñï* succ c))) Ôºù‚ü® i    ‚ü©
      x ‚Ñ§* z ‚Ñ§* (b' ‚Ñ§* c')                           Ôºù‚ü® ii   ‚ü©
      x ‚Ñ§* z ‚Ñ§* b' ‚Ñ§* c'                             Ôºù‚ü® iii  ‚ü©
      x ‚Ñ§* b' ‚Ñ§* z ‚Ñ§* c'                             Ôºù‚ü® iv   ‚ü©
      y ‚Ñ§* a' ‚Ñ§* z ‚Ñ§* c'                             Ôºù‚ü® v    ‚ü©
      y ‚Ñ§* (a' ‚Ñ§* z) ‚Ñ§* c'                           Ôºù‚ü® vi   ‚ü©
      y ‚Ñ§* (z ‚Ñ§* a') ‚Ñ§* c'                           Ôºù‚ü® vii  ‚ü©
      y ‚Ñ§* z ‚Ñ§* a' ‚Ñ§* c'                             Ôºù‚ü® viii ‚ü©
      y ‚Ñ§* z ‚Ñ§* (a' ‚Ñ§* c')                           Ôºù‚ü® ix   ‚ü©
      y ‚Ñ§* z ‚Ñ§* pos (succ (pred (succ a ‚Ñï* succ c))) ‚àé
   where
    i    = ap (Œª - ‚Üí x ‚Ñ§* z ‚Ñ§* -) (denom-setup b c)
    ii   = ‚Ñ§*-assoc (x ‚Ñ§* z) b' c' ‚Åª¬π
    iii  = ap (_‚Ñ§* c') (‚Ñ§-mult-rearrangement x z b')
    iv   = ap (Œª - ‚Üí - ‚Ñ§* z ‚Ñ§* c') e
    v    = ap (_‚Ñ§* c') (‚Ñ§*-assoc y a' z )
    vi   = ap (Œª - ‚Üí y ‚Ñ§* - ‚Ñ§* c') (‚Ñ§*-comm a' z)
    vii  = ap (_‚Ñ§* c') (‚Ñ§*-assoc y z a' ‚Åª¬π)
    viii = ‚Ñ§*-assoc (y ‚Ñ§* z) a' c'
    ix   = ap (Œª - ‚Üí (y ‚Ñ§* z ‚Ñ§* -)) (denom-setup a c ‚Åª¬π)

1/3+1/3‚âà2/3 : (pos 1 , 2) + (pos 1 , 2) ‚âà (pos 2 , 2)
1/3+1/3‚âà2/3 = refl

1/3+2/3‚âà1 : (pos 1 , 2) + (pos 2 , 2) ‚âà (pos 1 , 0)
1/3+2/3‚âà1 = refl

ùîΩ-mult-left-id : (q : ùîΩ) ‚Üí (pos 1 , 0) * q Ôºù q
ùîΩ-mult-left-id (x , a) = to-√ó-Ôºù Œ≥‚ÇÅ Œ≥‚ÇÇ
 where
  Œ≥‚ÇÅ : pos 1 ‚Ñ§* x Ôºù x
  Œ≥‚ÇÅ = ‚Ñ§-mult-left-id x

  Œ≥‚ÇÇ : pred (1 ‚Ñï* succ a) Ôºù a
  Œ≥‚ÇÇ = ap pred (mult-commutativity 1 (succ a))

ùîΩ-zero-left-is-zero : (q : ùîΩ) ‚Üí (pos 0 , 0) * q ‚âà (pos 0 , 0)
ùîΩ-zero-left-is-zero (x , a)
 = pos 0 ‚Ñ§* x ‚Ñ§* pos 1                      Ôºù‚ü® i   ‚ü©
   pos 0 ‚Ñ§* (x ‚Ñ§* pos 1)                    Ôºù‚ü® ii  ‚ü©
   pos 0                                    Ôºù‚ü® iii ‚ü©
   pos 0 ‚Ñ§* pos (succ (pred (1 ‚Ñï* succ a))) ‚àé
  where
   i   = ‚Ñ§*-assoc (pos 0) x (pos 1)
   ii  = ‚Ñ§-zero-left-base (x ‚Ñ§* pos 1)
   iii = ‚Ñ§-zero-left-base (pos (succ (pred (1 ‚Ñï* succ a)))) ‚Åª¬π

ùîΩ*-comm : (p q : ùîΩ) ‚Üí p * q Ôºù q * p
ùîΩ*-comm (x , a) (y , b) = ap‚ÇÇ _,_ I II
 where
  I : x ‚Ñ§* y Ôºù y ‚Ñ§* x
  I = ‚Ñ§*-comm x y

  II : pred (succ a ‚Ñï* succ b) Ôºù pred (succ b ‚Ñï* succ a)
  II = ap pred (mult-commutativity (succ a) (succ b))

ùîΩ*-assoc : (p q r : ùîΩ) ‚Üí p * q * r Ôºù p * (q * r)
ùîΩ*-assoc (x , a) (y , b) (z , c) = ap‚ÇÇ _,_ I II
 where
  I : x ‚Ñ§* y ‚Ñ§* z Ôºù x ‚Ñ§* (y ‚Ñ§* z)
  I = ‚Ñ§*-assoc x y z

  a' b' c' : ‚Ñï
  a' = succ a
  b' = succ b
  c' = succ c

  II : pred (succ (pred (a' ‚Ñï* b')) ‚Ñï* c') Ôºù pred (a' ‚Ñï* succ (pred (b' ‚Ñï* c')))
  II = pred (succ (pred (a' ‚Ñï* b')) ‚Ñï* c') Ôºù‚ü® i   ‚ü©
       pred (a' ‚Ñï* b' ‚Ñï* c')               Ôºù‚ü® ii  ‚ü©
       pred (a' ‚Ñï* (b' ‚Ñï* c'))             Ôºù‚ü® iii ‚ü©
       pred (a' ‚Ñï* succ (pred (b' ‚Ñï* c'))) ‚àé
   where
    i   = ap (Œª - ‚Üí pred (- ‚Ñï* c')) (succ-pred-multiplication a b ‚Åª¬π)
    ii  = ap pred (mult-associativity a' b' c')
    iii = ap (Œª - ‚Üí pred (a' ‚Ñï* -)) (succ-pred-multiplication b c)

ùîΩ-dist : (p q r : ùîΩ) ‚Üí p * (q + r) ‚âà p * q + p * r
ùîΩ-dist (x , a) (y , b) (z , c) = I
 where
  a' b' c' : ‚Ñï
  a' = succ a
  b' = succ b
  c' = succ c

  a'' b'' c'' k l : ‚Ñ§
  a'' = pos a'
  b'' = pos b'
  c'' = pos c'
  k = pos (succ (pred (a' ‚Ñï* c')))
  l = pos (succ (pred (a' ‚Ñï* b')))

  I-lemma : (x y p q : ‚Ñ§) ‚Üí x ‚Ñ§* y ‚Ñ§* (p ‚Ñ§* q) Ôºù x ‚Ñ§* p ‚Ñ§* (y ‚Ñ§* q)
  I-lemma x y p q = x ‚Ñ§* y ‚Ñ§* (p ‚Ñ§* q) Ôºù‚ü® ‚Ñ§*-assoc (x ‚Ñ§* y) p q ‚Åª¬π             ‚ü©
                    x ‚Ñ§* y ‚Ñ§* p ‚Ñ§* q   Ôºù‚ü® ap (_‚Ñ§* q) (‚Ñ§*-assoc x y p )         ‚ü©
                    x ‚Ñ§* (y ‚Ñ§* p) ‚Ñ§* q Ôºù‚ü® ap (Œª - ‚Üí x ‚Ñ§* - ‚Ñ§* q) (‚Ñ§*-comm y p) ‚ü©
                    x ‚Ñ§* (p ‚Ñ§* y) ‚Ñ§* q Ôºù‚ü® ap (_‚Ñ§* q) (‚Ñ§*-assoc x p y ‚Åª¬π)       ‚ü©
                    x ‚Ñ§* p ‚Ñ§* y ‚Ñ§* q   Ôºù‚ü® ‚Ñ§*-assoc (x ‚Ñ§* p) y q                ‚ü©
                    x ‚Ñ§* p ‚Ñ§* (y ‚Ñ§* q) ‚àé

  I : _ Ôºù _
  I = x ‚Ñ§* (y ‚Ñ§* c'' ‚Ñ§+ z ‚Ñ§* b'') ‚Ñ§* pos (succ (pred (succ (pred (a' ‚Ñï* b')) ‚Ñï* (succ (pred (a' ‚Ñï* c'))))))  Ôºù‚ü® i    ‚ü©
      x ‚Ñ§* (y ‚Ñ§* c'' ‚Ñ§+ z ‚Ñ§* b'') ‚Ñ§* (l ‚Ñ§* k)                                                                Ôºù‚ü® ii   ‚ü©
      x ‚Ñ§* (y ‚Ñ§* c'' ‚Ñ§+ z ‚Ñ§* b'') ‚Ñ§* (pos (a' ‚Ñï* b') ‚Ñ§* pos (a' ‚Ñï* c'))                                      Ôºù‚ü® iii  ‚ü©
      x ‚Ñ§* (y ‚Ñ§* c'' ‚Ñ§+ z ‚Ñ§* b'') ‚Ñ§* (a'' ‚Ñ§* b'' ‚Ñ§* (a'' ‚Ñ§* c''))                                            Ôºù‚ü® iv   ‚ü©
      x ‚Ñ§* (y ‚Ñ§* c'' ‚Ñ§+ z ‚Ñ§* b'') ‚Ñ§* (a'' ‚Ñ§* (b'' ‚Ñ§* (a'' ‚Ñ§* c'')))                                          Ôºù‚ü® v    ‚ü©
      x ‚Ñ§* (y ‚Ñ§* c'' ‚Ñ§+ z ‚Ñ§* b'') ‚Ñ§* a'' ‚Ñ§*  (b'' ‚Ñ§* (a'' ‚Ñ§* c''))                                           Ôºù‚ü® vi   ‚ü©
      x ‚Ñ§* a'' ‚Ñ§* (y ‚Ñ§* c'' ‚Ñ§+ (z ‚Ñ§* b'')) ‚Ñ§* (a'' ‚Ñ§* (b'' ‚Ñ§* c''))                                          Ôºù‚ü® vii  ‚ü©
     (x ‚Ñ§* a'' ‚Ñ§* (y ‚Ñ§* c'') ‚Ñ§+ x ‚Ñ§* a'' ‚Ñ§* (z ‚Ñ§* b'')) ‚Ñ§* (a'' ‚Ñ§* (pos (b' ‚Ñï* c')))                         Ôºù‚ü® viii ‚ü©
     (x ‚Ñ§* y ‚Ñ§* (a'' ‚Ñ§* c'') ‚Ñ§+ x ‚Ñ§* z ‚Ñ§* (a'' ‚Ñ§* b'')) ‚Ñ§* (a'' ‚Ñ§* (pos (b' ‚Ñï* c')))                         Ôºù‚ü® ix   ‚ü©
     (x ‚Ñ§* y ‚Ñ§* k ‚Ñ§+ (x ‚Ñ§* z ‚Ñ§* l)) ‚Ñ§* (a'' ‚Ñ§* (pos (b' ‚Ñï* c')))                                             Ôºù‚ü® xi   ‚ü©
     (x ‚Ñ§* y ‚Ñ§* k ‚Ñ§+ (x ‚Ñ§* z ‚Ñ§* l)) ‚Ñ§* pos (a' ‚Ñï* (b' ‚Ñï* c'))                                                Ôºù‚ü® xii  ‚ü©
     (x ‚Ñ§* y ‚Ñ§* k ‚Ñ§+ (x ‚Ñ§* z ‚Ñ§* l)) ‚Ñ§* pos (a' ‚Ñï* succ (pred (b' ‚Ñï* c')))                                    Ôºù‚ü® xiii ‚ü©
     (x ‚Ñ§* y ‚Ñ§* k ‚Ñ§+ (x ‚Ñ§* z ‚Ñ§* l)) ‚Ñ§* pos (succ (pred (a' ‚Ñï* succ (pred (b' ‚Ñï* c')))))                      ‚àé
   where
    i    = ap (Œª Œ≤ ‚Üí x ‚Ñ§* (y ‚Ñ§* c'' ‚Ñ§+ (z ‚Ñ§* b'')) ‚Ñ§* Œ≤ ) (denom-setup (pred (a' ‚Ñï* b')) (pred (a' ‚Ñï* c')))
    ii   = ap‚ÇÇ (Œª Œ± Œ≤ ‚Üí x ‚Ñ§* (y ‚Ñ§* c'' ‚Ñ§+ (z ‚Ñ§* b'')) ‚Ñ§* (pos Œ± ‚Ñ§* pos Œ≤)) (succ-pred-multiplication a b ‚Åª¬π) (succ-pred-multiplication a c ‚Åª¬π)
    iii  = ap‚ÇÇ (Œª Œ± Œ≤ ‚Üí x ‚Ñ§* (y ‚Ñ§* c'' ‚Ñ§+ (z ‚Ñ§* b'')) ‚Ñ§* (Œ± ‚Ñ§* Œ≤) ) (pos-multiplication-equiv-to-‚Ñï a' b' ‚Åª¬π) (pos-multiplication-equiv-to-‚Ñï a' c' ‚Åª¬π)
    iv   = ap (Œª Œ± ‚Üí x ‚Ñ§* (y ‚Ñ§* c'' ‚Ñ§+ (z ‚Ñ§* b'')) ‚Ñ§* Œ± ) (‚Ñ§*-assoc a'' b'' ( a'' ‚Ñ§* c'') )
    v    = ‚Ñ§*-assoc (x ‚Ñ§* (  y ‚Ñ§* c'' ‚Ñ§+ (z ‚Ñ§* b'')  )) a'' ( b'' ‚Ñ§*   (a'' ‚Ñ§* c'')) ‚Åª¬π
    vi   = ap‚ÇÇ (Œª Œ± Œ≤ ‚Üí Œ± ‚Ñ§* Œ≤) (‚Ñ§-mult-rearrangement x ( y ‚Ñ§* c'' ‚Ñ§+ (z ‚Ñ§* b'')) a'') (‚Ñ§-mult-rearrangement''' b'' a'' c'')
    vii  = ap‚ÇÇ (Œª Œ± Œ≤ ‚Üí Œ± ‚Ñ§* (a'' ‚Ñ§* Œ≤)) (distributivity-mult-over-‚Ñ§' (y ‚Ñ§* c'') (z ‚Ñ§* b'') (x ‚Ñ§* a'')) (pos-multiplication-equiv-to-‚Ñï b' c')
    viii = ap‚ÇÇ (Œª Œ± Œ≤ ‚Üí (Œ± ‚Ñ§+ Œ≤) ‚Ñ§* ((a'' ‚Ñ§* (pos (b' ‚Ñï* c'))))) (I-lemma x a'' y c'') (I-lemma x a'' z b'')
    ix   = ap‚ÇÇ (Œª Œ± Œ≤ ‚Üí (x ‚Ñ§* y ‚Ñ§* Œ± ‚Ñ§+ x ‚Ñ§* z ‚Ñ§* Œ≤) ‚Ñ§* ((a'' ‚Ñ§* (pos (b' ‚Ñï* c'))))) (denom-setup a c ‚Åª¬π) (denom-setup a b ‚Åª¬π)
    xi   = ap (Œª Œ± ‚Üí (x ‚Ñ§* y ‚Ñ§* k ‚Ñ§+ (x ‚Ñ§* z ‚Ñ§* l)) ‚Ñ§* Œ±) (pos-multiplication-equiv-to-‚Ñï a' (b' ‚Ñï* c'))
    xii  = ap  (Œª Œ± ‚Üí (x ‚Ñ§* y ‚Ñ§* k ‚Ñ§+ (x ‚Ñ§* z ‚Ñ§* l)) ‚Ñ§* (pos (a' ‚Ñï* Œ±))) (succ-pred-multiplication b c)
    xiii = ap (Œª Œ± ‚Üí (x ‚Ñ§* y ‚Ñ§* k ‚Ñ§+ (x ‚Ñ§* z ‚Ñ§* l)) ‚Ñ§* pos Œ±) (succ-pred-multiplication a (pred (b' ‚Ñï* c')))

abs : ùîΩ ‚Üí ùîΩ
abs (x , a) = abs‚Ñ§ x , a

ùîΩ-abs-0 : pos 0 , 0 Ôºù abs (pos 0 , 0)
ùîΩ-abs-0 = by-definition

ùîΩ-abs-neg-equals-pos : (q : ùîΩ) ‚Üí abs q ‚âà abs (- q)
ùîΩ-abs-neg-equals-pos (x , a) = ap (_‚Ñ§* (pos (succ a))) (abs‚Ñ§-removes-neg-sign x)

ùîΩ-subtraction-dist-over-mult : (p q : ùîΩ) ‚Üí (- p) * q ‚âà (- (p * q))
ùîΩ-subtraction-dist-over-mult (x , a) (y , b) = Œ≥
 where
  I : (‚Ñ§- x) ‚Ñ§* y Ôºù ‚Ñ§- (x ‚Ñ§* y)
  I = negation-dist-over-mult' x y

  Œ≥ : _
  Œ≥ = ap (_‚Ñ§* pos (succ (pred (succ a ‚Ñï* succ b)))) I

ùîΩ-minus-dist : ((x , a) (y , b) : ùîΩ)
             ‚Üí (‚Ñ§- x , a) + (‚Ñ§- y , b) ‚âà (- ((x , a) + (y , b)))
ùîΩ-minus-dist (x , a) (y , b) = Œ≥
 where
  pa = (pos ‚àò succ) a
  pb = (pos ‚àò succ) b

  Œ≥' : (‚Ñ§- x) ‚Ñ§* pb ‚Ñ§+ (‚Ñ§- y) ‚Ñ§* pa Ôºù ‚Ñ§- (x ‚Ñ§* pb ‚Ñ§+ y ‚Ñ§* pa)
  Œ≥' = (‚Ñ§- x) ‚Ñ§* pb ‚Ñ§+ (‚Ñ§- y) ‚Ñ§* pa Ôºù‚ü® i   ‚ü©
       (‚Ñ§- x ‚Ñ§* pb) ‚Ñ§+ (‚Ñ§- y) ‚Ñ§* pa Ôºù‚ü® ii  ‚ü©
       (‚Ñ§- x ‚Ñ§* pb) ‚Ñ§+ (‚Ñ§- y ‚Ñ§* pa) Ôºù‚ü® iii ‚ü©
       ‚Ñ§- (x ‚Ñ§* pb ‚Ñ§+ y ‚Ñ§* pa)      ‚àé
   where
    i   = ap (_‚Ñ§+ (‚Ñ§- y) ‚Ñ§* pa) (negation-dist-over-mult' x pb)
    ii  = ap ((‚Ñ§- x ‚Ñ§* pb) ‚Ñ§+_) (negation-dist-over-mult' y pa)
    iii = negation-dist (x ‚Ñ§* pb) (y ‚Ñ§* pa)

  Œ≥ : ((‚Ñ§- x , a) + (‚Ñ§- y , b)) ‚âà (- ((x , a) + (y , b)))
  Œ≥ = ap (_‚Ñ§* pos (succ (pred (succ a ‚Ñï* succ b)))) Œ≥'

ùîΩ+-inverse : ((x , a) : ùîΩ) ‚Üí ((‚Ñ§- x , a) + (x , a)) ‚âà (pos 0 , 0)
ùîΩ+-inverse (x , a) = Œ≥
 where
  pa = (pos ‚àò succ) a

  Œ≥ : ((‚Ñ§- x , a) + (x , a)) ‚âà (pos 0 , 0)
  Œ≥ = ((‚Ñ§- x) ‚Ñ§* pa ‚Ñ§+ x ‚Ñ§* pa) ‚Ñ§* pos 1            Ôºù‚ü® i   ‚ü©
      ((‚Ñ§- x) ‚Ñ§* pa ‚Ñ§+ x ‚Ñ§* pa)                     Ôºù‚ü® ii  ‚ü©
      ((‚Ñ§- x) ‚Ñ§+ x) ‚Ñ§* pa                           Ôºù‚ü® iii ‚ü©
      (x ‚Ñ§+ (‚Ñ§- x)) ‚Ñ§* pa                           Ôºù‚ü® iv  ‚ü©
      pos 0 ‚Ñ§* pa                                   Ôºù‚ü® v   ‚ü©
      pos 0                                         Ôºù‚ü® vi  ‚ü©
      pos 0 ‚Ñ§* pos (succ (pred (succ a ‚Ñï* succ a))) ‚àé
   where
    i   = ‚Ñ§-mult-right-id ((‚Ñ§- x) ‚Ñ§* pa ‚Ñ§+ (x ‚Ñ§* pa))
    ii  = distributivity-mult-over-‚Ñ§ (‚Ñ§- x) x pa ‚Åª¬π
    iii = ap (_‚Ñ§* pa) (‚Ñ§+-comm (‚Ñ§- x) x)
    iv  = ap (_‚Ñ§* pa) (‚Ñ§-sum-of-inverse-is-zero x)
    v   = ‚Ñ§-zero-left-base pa
    vi  = ‚Ñ§-zero-left-base (pos (succ (pred (succ a ‚Ñï* succ a)))) ‚Åª¬π

ùîΩ+-inverse' : ((x , a) : ùîΩ) ‚Üí ((x , a) + (‚Ñ§- x , a)) ‚âà (pos 0 , 0)
ùîΩ+-inverse' (x , a) = Œ≥
 where
  I : (x , a) + (‚Ñ§- x , a) Ôºù (‚Ñ§- x , a) + (x , a)
  I = ùîΩ+-comm (x , a) (‚Ñ§- x , a)

  II : ((x , a) + (‚Ñ§- x , a)) ‚âà ((x , a) + (‚Ñ§- x , a))
  II = ‚âà-refl ((x , a) + (‚Ñ§- x , a))

  III : ((x , a) + (‚Ñ§- x , a)) ‚âà ((‚Ñ§- x , a) + (x , a))
  III = transport (((x , a) + (‚Ñ§- x , a)) ‚âà_) I II

  IV : ((‚Ñ§- x , a) + (x , a)) ‚âà (pos 0 , 0)
  IV = ùîΩ+-inverse (x , a)

  Œ≥ : ((x , a) + (‚Ñ§- x , a)) ‚âà (pos 0 , 0)
  Œ≥ = ‚âà-trans ((x , a) + (‚Ñ§- x , a)) ((‚Ñ§- x , a) + (x , a)) (pos 0 , 0) III IV

ùîΩ-add-same-denom : ((x , a) (y , a) : ùîΩ) ‚Üí (((x , a) + (y , a)) ‚âà (x ‚Ñ§+ y , a))
ùîΩ-add-same-denom (x , a) (y , b) = Œ≥
 where
  Œ≥ : _
  Œ≥ = (x ‚Ñ§* pos (succ b) ‚Ñ§+ y ‚Ñ§* pos (succ b)) ‚Ñ§* pos (succ b)   Ôºù‚ü® i   ‚ü©
      (x ‚Ñ§+ y) ‚Ñ§* pos (succ b) ‚Ñ§* pos (succ b)                   Ôºù‚ü® ii  ‚ü©
      (x ‚Ñ§+ y) ‚Ñ§* (pos (succ b) ‚Ñ§* pos (succ b))                 Ôºù‚ü® iii ‚ü©
      (x ‚Ñ§+ y) ‚Ñ§* pos (succ (pred (succ b ‚Ñï* succ b)))           ‚àé
   where
    i = ap (_‚Ñ§* pos (succ b)) (distributivity-mult-over-‚Ñ§ x y (pos (succ b)) ‚Åª¬π)
    ii = ‚Ñ§*-assoc (x ‚Ñ§+ y ) (pos (succ b)) (pos (succ b))
    iii = ap ((x ‚Ñ§+ y) ‚Ñ§*_) (denom-setup b b ‚Åª¬π)

\end{code}
