Andrew Sneap, November 2021

In this file I define the limit for sequences of rational numbers,
and prove that 2/3^n converges by first proving the sandwich theorem,
and that 1/(n+1) converges to 0.

\begin{code}

{-# OPTIONS --safe --without-K --lossy-unification #-}

open import MLTT.Spartan renaming (_+_ to _‚àî_)

open import Notation.Order
open import UF.Base
open import UF.FunExt
open import UF.Subsingletons
open import UF.PropTrunc
open import Rationals.Type
open import Rationals.Addition
open import Rationals.Abs
open import Rationals.MinMax hiding (min ; max)
open import Rationals.Multiplication
open import Rationals.Negation
open import Rationals.Order
open import Rationals.Positive hiding (_+_ ; _*_)
open import Rationals.FractionsOrder
open import Rationals.FractionsOperations renaming (_*_ to _ùîΩ*_) hiding (abs ; -_ ; _+_)
open import Naturals.Addition renaming (_+_ to _‚Ñï+_)
open import Naturals.Division
open import Naturals.Multiplication renaming (_*_ to _‚Ñï*_)
open import Naturals.Order
open import Naturals.Properties
open import Integers.Type hiding (abs)
open import Integers.Addition renaming (_+_ to _‚Ñ§+_) hiding (_-_)
open import Integers.Order
open import Integers.Multiplication renaming (_*_ to _‚Ñ§*_)

module Rationals.Limits
        (fe : Fun-Ext)
        (pe : Prop-Ext)
        (pt : propositional-truncations-exist)
 where

open import MetricSpaces.Rationals fe pe pt
open import MetricSpaces.Type fe pe pt

_‚ü∂_ : (f : ‚Ñï ‚Üí ‚Ñö) ‚Üí (L : ‚Ñö) ‚Üí ùì§‚ÇÄ Ãá
f ‚ü∂ L = (Œµ‚Çä@(Œµ , _) : ‚Ñö‚Çä) ‚Üí Œ£ N Íûâ ‚Ñï , ((n : ‚Ñï) ‚Üí N ‚â§ n ‚Üí abs (f n - L) < Œµ)

sandwich-theorem : (L : ‚Ñö)
                 ‚Üí (f g h : ‚Ñï ‚Üí ‚Ñö)
                 ‚Üí Œ£ N Íûâ ‚Ñï , ((n : ‚Ñï) ‚Üí N ‚â§ n ‚Üí f n ‚â§ g n ‚â§ h n)
                 ‚Üí f ‚ü∂ L
                 ‚Üí h ‚ü∂ L
                 ‚Üí g ‚ü∂ L
sandwich-theorem L f g h (N , Œ±) f‚ü∂L h‚ü∂L = Œ≥
 where
  Œ≥ : g ‚ü∂ L
  Œ≥ Œµ‚Çä@(Œµ , _) = Œ≥' (f‚ü∂L Œµ‚Çä) (h‚ü∂L Œµ‚Çä)
   where
    Œ≥' : Œ£ N‚ÇÅ Íûâ ‚Ñï , ((n : ‚Ñï) ‚Üí N‚ÇÅ ‚â§ n ‚Üí abs (f n - L) < Œµ)
       ‚Üí Œ£ N‚ÇÇ Íûâ ‚Ñï , ((n : ‚Ñï) ‚Üí N‚ÇÇ ‚â§ n ‚Üí abs (h n - L) < Œµ)
       ‚Üí Œ£ M Íûâ ‚Ñï , ((n : ‚Ñï) ‚Üí M ‚â§ n ‚Üí abs (g n - L) < Œµ)
    Œ≥' (N‚ÇÅ , Œ≤) (N‚ÇÇ , Œ¥) = M , Œ≥''
     where
      M : ‚Ñï
      M = max (max N‚ÇÅ N‚ÇÇ) N

      I : N ‚â§ M
      I = max-‚â§-upper-bound' N (max N‚ÇÅ N‚ÇÇ)

      II : N‚ÇÅ ‚â§ max N‚ÇÅ N‚ÇÇ
      II = max-‚â§-upper-bound N‚ÇÅ N‚ÇÇ

      III : N‚ÇÇ ‚â§ max N‚ÇÅ N‚ÇÇ
      III = max-‚â§-upper-bound' N‚ÇÇ N‚ÇÅ

      IV : max N‚ÇÅ N‚ÇÇ ‚â§ M
      IV = max-‚â§-upper-bound (max N‚ÇÅ N‚ÇÇ) N

      V : N‚ÇÅ ‚â§ M
      V = ‚â§-trans N‚ÇÅ (max N‚ÇÅ N‚ÇÇ) M II IV

      VI : N‚ÇÇ ‚â§ M
      VI = ‚â§-trans N‚ÇÇ (max N‚ÇÅ N‚ÇÇ) M III IV

      Œ≥'' : (n : ‚Ñï) ‚Üí max (max N‚ÇÅ N‚ÇÇ) N ‚â§ n ‚Üí abs (g n - L) < Œµ
      Œ≥'' n l = ‚Ñö<-to-abs (g n - L) Œµ (Œ≥‚ÇÅ , Œ≥‚ÇÇ)
       where
        VII : - Œµ < f n - L < Œµ
        VII = ‚Ñö-abs-<-unpack (f n - L) Œµ (Œ≤ n (‚â§-trans N‚ÇÅ M n V l))

        VIII : - Œµ < h n - L < Œµ
        VIII = ‚Ñö-abs-<-unpack (h n - L) Œµ (Œ¥ n (‚â§-trans N‚ÇÇ M n VI l))

        l‚ÇÅ : f n ‚â§ g n ‚â§ h n
        l‚ÇÅ = Œ± n (‚â§-trans N (max (max N‚ÇÅ N‚ÇÇ) N) n I l)

        IX : f n - L ‚â§ g n - L
        IX = ‚Ñö‚â§-addition-preserves-order (f n) (g n) (- L) (pr‚ÇÅ l‚ÇÅ)

        X : g n - L ‚â§ h n - L
        X = ‚Ñö‚â§-addition-preserves-order (g n) (h n) (- L) (pr‚ÇÇ l‚ÇÅ)

        Œ≥‚ÇÅ : - Œµ < g n - L
        Œ≥‚ÇÅ = ‚Ñö<-‚â§-trans (- Œµ) (f n - L) (g n - L) (pr‚ÇÅ VII) IX

        Œ≥‚ÇÇ : g n - L < Œµ
        Œ≥‚ÇÇ = ‚Ñö‚â§-<-trans (g n - L) (h n - L) Œµ X (pr‚ÇÇ VIII)

0f : ‚Ñï ‚Üí ‚Ñö
0f _ = 0‚Ñö

0f-converges : 0f ‚ü∂ 0‚Ñö
0f-converges Œµ‚Çä@(Œµ , 0<Œµ) = 0 , (Œª n _ ‚Üí 0<Œµ)

constant-sequence : (q : ‚Ñö) ‚Üí (n : ‚Ñï) ‚Üí ‚Ñö
constant-sequence q n = q

constant-sequence-converges : (q : ‚Ñö) ‚Üí (constant-sequence q) ‚ü∂ q
constant-sequence-converges q (Œµ , 0<Œµ) = 0 , Œ≥
 where
  Œ≥ : (n : ‚Ñï) ‚Üí 0 ‚â§ n ‚Üí abs (constant-sequence q n - q) < Œµ
  Œ≥ n _ = transport (_< Œµ) I 0<Œµ
   where
    I : 0‚Ñö Ôºù abs (constant-sequence q n - q)
    I = ‚Ñö-zero-dist q ‚Åª¬π

‚ü®2/3‚ü©^_ : ‚Ñï ‚Üí ‚Ñö
‚ü®2/3‚ü©^ 0         = to‚Ñö (pos 1 , 0)
‚ü®2/3‚ü©^ (succ n)  = rec 2/3 (_* 2/3) n

‚ü®2/3‚ü©-to-mult : (n : ‚Ñï) ‚Üí ‚ü®2/3‚ü©^ (succ n) Ôºù (‚ü®2/3‚ü©^ n) * 2/3
‚ü®2/3‚ü©-to-mult 0 = refl
‚ü®2/3‚ü©-to-mult (succ n) = refl

‚ü®2/3‚ü©^n-positive : (n : ‚Ñï) ‚Üí 0‚Ñö < (‚ü®2/3‚ü©^ n)
‚ü®2/3‚ü©^n-positive 0 = 0 , refl
‚ü®2/3‚ü©^n-positive (succ n) = transport (0‚Ñö <_) Œ≥ II
 where
  I : 0‚Ñö < (‚ü®2/3‚ü©^ n)
  I = ‚ü®2/3‚ü©^n-positive n

  II : 0‚Ñö < (‚ü®2/3‚ü©^ n) * 2/3
  II = ‚Ñö<-pos-multiplication-preserves-order (‚ü®2/3‚ü©^ n) 2/3 I (1 , refl)

  Œ≥ : (‚ü®2/3‚ü©^ n) * 2/3 Ôºù (‚ü®2/3‚ü©^ (succ n))
  Œ≥ = ‚ü®2/3‚ü©-to-mult n ‚Åª¬π

‚ü®2/3‚ü©-all-positive : (n : ‚Ñï) ‚Üí 0‚Ñö ‚â§ (‚ü®2/3‚ü©^ n)
‚ü®2/3‚ü©-all-positive n = Œ≥
 where
  I : 0‚Ñö < (‚ü®2/3‚ü©^ n)
  I = ‚ü®2/3‚ü©^n-positive n

  Œ≥ : 0‚Ñö ‚â§ (‚ü®2/3‚ü©^ n)
  Œ≥ = ‚Ñö<-coarser-than-‚â§ 0‚Ñö (‚ü®2/3‚ü©^ n) I

‚ü®1/n‚ü© : ‚Ñï ‚Üí ‚Ñö
‚ü®1/n‚ü© n = to‚Ñö (pos 1 , n)

‚ü®1/sn‚ü© : ‚Ñï ‚Üí ‚Ñö
‚ü®1/sn‚ü© 0 = 1‚Ñö
‚ü®1/sn‚ü© (succ n) = ‚ü®1/n‚ü© n

‚ü®1/n‚ü©-1 : ‚ü®1/n‚ü© 0 Ôºù 1‚Ñö
‚ü®1/n‚ü©-1 = refl

‚ü®1/n‚ü©-1/2 : ‚ü®1/n‚ü© 1 Ôºù 1/2
‚ü®1/n‚ü©-1/2 = refl

‚ü®1/2‚ü©^_ : ‚Ñï ‚Üí ‚Ñö
‚ü®1/2‚ü©^ 0         = to‚Ñö (pos 1 , 0)
‚ü®1/2‚ü©^ (succ n)  = rec (1/2) (_* 1/2) n

‚ü®1/sn‚ü©-converges-lemma : (a n x q r : ‚Ñï)
                       ‚Üí succ a Ôºù q ‚Ñï* succ x ‚Ñï+ r
                       ‚Üí r < succ x
                       ‚Üí succ q ‚â§ succ n
                       ‚Üí pos (succ a) < pos (succ n) ‚Ñ§* pos (succ x)
‚ü®1/sn‚ü©-converges-lemma a n x q r e l‚ÇÅ l‚ÇÇ = Œ≥
 where
  x' = succ x
  q' = succ q
  a' = succ a
  n' = succ n

  I : pos r < pos x'
  I = ‚Ñï-order-respects-‚Ñ§-order r x' l‚ÇÅ

  II : pos (q ‚Ñï* x') ‚Ñ§+ pos r < pos (q ‚Ñï* x') ‚Ñ§+ pos x'
  II = ‚Ñ§<-adding-left (pos r) (pos x') (pos (q ‚Ñï* x')) I

  III : pos (q ‚Ñï* x') ‚Ñ§+ pos r Ôºù pos a'
  III = pos (q ‚Ñï* x') ‚Ñ§+ pos r Ôºù‚ü® distributivity-pos-addition (q ‚Ñï* x') r ‚ü©
        pos (q ‚Ñï* x' ‚Ñï+ r)     Ôºù‚ü® ap pos (e ‚Åª¬π)                           ‚ü©
        pos a'               ‚àé

  IV : pos (q ‚Ñï* x') ‚Ñ§+ pos x' Ôºù pos q' ‚Ñ§* pos x'
  IV = pos (q ‚Ñï* x') ‚Ñ§+ pos x' Ôºù‚ü® i   ‚ü©
       pos x' ‚Ñ§+ pos (q ‚Ñï* x') Ôºù‚ü® ii  ‚ü©
       pos x' ‚Ñ§+ pos (x' ‚Ñï* q) Ôºù‚ü® iii ‚ü©
       pos x' ‚Ñ§* pos q'        Ôºù‚ü® iv  ‚ü©
       pos q' ‚Ñ§* pos x'        ‚àé
   where
    i   = ‚Ñ§+-comm (pos (q ‚Ñï* x')) (pos x')
    ii  = ap (Œª ‚ñ† ‚Üí pos x' ‚Ñ§+ (pos ‚ñ†)) (mult-commutativity q x')
    iii = ap (pos x' ‚Ñ§+_) (pos-multiplication-equiv-to-‚Ñï x' q ‚Åª¬π)
    iv  = ‚Ñ§*-comm (pos x') (pos q')

  V : pos a' < pos q' ‚Ñ§* pos x'
  V = transport‚ÇÇ _<_ III IV II

  VI : pos q' ‚â§ pos n'
  VI = ‚Ñï‚â§-to-‚Ñ§‚â§ q' n' l‚ÇÇ

  VII : pos q' ‚Ñ§* pos x' ‚â§ pos n' ‚Ñ§* pos x'
  VII = positive-multiplication-preserves-order' (pos q') (pos n') (pos x') ‚ãÜ VI

  Œ≥ : pos a' < pos n' ‚Ñ§* pos x'
  Œ≥ = ‚Ñ§<-‚â§-trans (pos a') (pos q' ‚Ñ§* pos x') (pos n' ‚Ñ§* pos x') V VII

‚ü®1/sn‚ü©-converges : ‚ü®1/sn‚ü© ‚ü∂ 0‚Ñö
‚ü®1/sn‚ü©-converges (Œµ@((pos 0 , a) , p) , 0<Œµ) = ùüò-elim Œ≥
 where
  I : Œµ Ôºù 0‚Ñö
  I = numerator-zero-is-zero ((pos 0 , a) , p) refl

  II : 0‚Ñö < 0‚Ñö
  II = transport (0‚Ñö <_) I 0<Œµ

  Œ≥ : ùüò
  Œ≥ = ‚Ñö<-irrefl 0‚Ñö II
‚ü®1/sn‚ü©-converges Œµ‚Çä@(((negsucc x , a) , p) , 0<Œµ) = ùüò-elim Œ≥
 where
  Œ≥ : ùüò
  Œ≥ = negative-not-greater-than-zero x a 0<Œµ
‚ü®1/sn‚ü©-converges Œµ‚Çä@(((pos (succ x) , a) , p) , 0<Œµ) = Œ≥ (division (succ a) x)
 where
  Œ≥ : Œ£ q Íûâ ‚Ñï , Œ£ r Íûâ ‚Ñï , (succ a Ôºù q ‚Ñï* succ x ‚Ñï+ r) √ó (r < succ x)
    ‚Üí Œ£ N Íûâ ‚Ñï , ((n : ‚Ñï) ‚Üí N ‚â§ n ‚Üí abs (‚ü®1/sn‚ü© n - 0‚Ñö) < Œµ‚Çä)
  Œ≥ (q , r , e , l‚ÇÅ) = succ q , Œ≥'
   where
    Œ≥' : (n : ‚Ñï)
       ‚Üí succ q < succ n
       ‚Üí abs (‚ü®1/sn‚ü© n - 0‚Ñö) <‚Ñö ((pos (succ x) , a) , p)
    Œ≥' 0 l‚ÇÇ = ùüò-elim l‚ÇÇ
    Œ≥' (succ n) l‚ÇÇ = Œ≥''
     where
      I : pos 0 Ôºù pos 0 ‚Ñ§* pos (succ n)
      I = ‚Ñ§-zero-left-base (pos (succ n)) ‚Åª¬π

      II : pos 0 ‚Ñ§* pos (succ n) < pos 1
      II = transport (_< pos 1) I (0 , refl)

      III : 0‚Ñö < to‚Ñö (pos 1 , n)
      III = to‚Ñö-< (pos 0 , 0) (pos 1 , n) II

      IV : to‚Ñö (pos 1 , n) Ôºù abs (‚ü®1/n‚ü© n + 0‚Ñö)
      IV = to‚Ñö (pos 1 , n)       Ôºù‚ü® i  ‚ü©
           abs (to‚Ñö (pos 1 , n)) Ôºù‚ü® ii ‚ü©
           abs (‚ü®1/n‚ü© n + 0‚Ñö)    ‚àé
       where
        i  = abs-of-pos-is-pos' (to‚Ñö (pos 1 , n)) III ‚Åª¬π
        ii = ap abs (‚Ñö-zero-right-neutral (‚ü®1/n‚ü© n)) ‚Åª¬π

      V : to‚Ñö (pos (succ x) , a) Ôºù ((pos (succ x) , a) , p)
      V = to‚Ñö-toùîΩ ((pos (succ x) , a) , p) ‚Åª¬π

      VI : pos (succ a) < pos (succ n) ‚Ñ§* pos (succ x)
      VI = ‚ü®1/sn‚ü©-converges-lemma a n x q r e l‚ÇÅ l‚ÇÇ

      VII : (pos 1 , n) ùîΩ< (pos (succ x) , a)
      VII = positive-order-flip a n x 0 VI

      VIII : to‚Ñö (pos 1 , n) < to‚Ñö (pos (succ x) , a)
      VIII = to‚Ñö-< (pos 1 , n) (pos (succ x) , a) VII

      Œ≥'' : abs (‚ü®1/n‚ü© n - 0‚Ñö) <‚Ñö ((pos (succ x) , a) , p)
      Œ≥'' = transport‚ÇÇ _<_ IV V VIII

‚ü®1/sn‚ü©-bounds-‚ü®2/3‚ü©-lemma : (n : ‚Ñï)
                          ‚Üí (‚ü®1/sn‚ü© (succ (succ n))) * 2/3
                          ‚â§ ‚ü®1/sn‚ü© (succ (succ (succ n)))
‚ü®1/sn‚ü©-bounds-‚ü®2/3‚ü©-lemma n = Œ≥
 where
  n+2 = succ (succ n)
  n+3 = succ (n+2)

  1' = pos 1
  2' = pos 2
  3' = pos 3
  6' = pos 6
  n' = pos n

  I : 2' ‚Ñ§* n' ‚Ñ§+ 6' Ôºù 2' ‚Ñ§* pos (n ‚Ñï+ 3)
  I = 2' ‚Ñ§* n' ‚Ñ§+ 6'      Ôºù‚ü® distributivity-mult-over-‚Ñ§' n' 3' 2' ‚Åª¬π       ‚ü©
      2' ‚Ñ§* (n' ‚Ñ§+ 3')    Ôºù‚ü® ap (2' ‚Ñ§*_) (distributivity-pos-addition n 3) ‚ü©
      2' ‚Ñ§* pos (n ‚Ñï+ 3)  ‚àé

  II : 3' ‚Ñ§* n' ‚Ñ§+ 6' Ôºù 1' ‚Ñ§* pos (succ (pred (n+2 ‚Ñï* 3)))
  II = 3' ‚Ñ§* n' ‚Ñ§+ 6'                     Ôºù‚ü® i   ‚ü©
       pos (3 ‚Ñï* n) ‚Ñ§+ 6'                 Ôºù‚ü® ii  ‚ü©
       pos (3 ‚Ñï* n ‚Ñï+ 6)                  Ôºù‚ü® iii ‚ü©
       pos (3 ‚Ñï* n+2)                     Ôºù‚ü® iv  ‚ü©
       pos (n+2 ‚Ñï* 3)                     Ôºù‚ü® v   ‚ü©
       pos (succ (pred (n+2 ‚Ñï* 3)))       Ôºù‚ü® vi  ‚ü©
       1' ‚Ñ§* pos (succ (pred (n+2 ‚Ñï* 3))) ‚àé
   where
    i   = ap (_‚Ñ§+ 6') (pos-multiplication-equiv-to-‚Ñï 3 n)
    ii  = distributivity-pos-addition (3 ‚Ñï* n) 6
    iii = ap pos (distributivity-mult-over-addition 3 n 2 ‚Åª¬π)
    iv  = ap pos (mult-commutativity 3 n+2)
    v   = ap pos (succ-pred-multiplication (succ n) 2)
    vi  = ‚Ñ§-mult-left-id _ ‚Åª¬π

  III : pos 0 ‚â§ n'
  III = ‚Ñ§-zero-least-pos n

  IV : 2' ‚Ñ§* n' ‚â§ 3' ‚Ñ§* n'
  IV = ‚Ñ§*-multiplication-order 2' 3' n' III (1 , refl)

  V : 2' ‚Ñ§* n' ‚Ñ§+ 6' ‚â§ 3' ‚Ñ§* n' ‚Ñ§+ 6'
  V = ‚Ñ§‚â§-adding' (2' ‚Ñ§* n') (3' ‚Ñ§* n') 6' IV

  VI : 2' ‚Ñ§* pos n+3 ‚â§ 1' ‚Ñ§* pos (succ (pred (n+2 ‚Ñï* 3)))
  VI = transport‚ÇÇ _‚â§_ I II V

  VII : to‚Ñö ((1' , succ n) ùîΩ* (2' , 2)) ‚â§ to‚Ñö (1' , n+2)
  VII = to‚Ñö-‚â§ ((1' , succ n) ùîΩ* (2' , 2)) (1' , n+2) VI

  VIII : to‚Ñö ((1' , succ n) ùîΩ* (2' , 2)) Ôºù to‚Ñö (1' , succ n) * 2/3
  VIII = to‚Ñö-* (1' , succ n) (2' , 2)

  Œ≥ : (‚ü®1/sn‚ü© n+2) * 2/3 ‚â§ ‚ü®1/sn‚ü© n+3
  Œ≥ = transport (_‚â§ ‚ü®1/sn‚ü© n+3) VIII VII

‚ü®1/sn‚ü©-bounds-‚ü®2/3‚ü© : (n : ‚Ñï) ‚Üí (‚ü®2/3‚ü©^ n) ‚â§ ‚ü®1/sn‚ü© n
‚ü®1/sn‚ü©-bounds-‚ü®2/3‚ü© = ‚Ñï-induction base step
 where
  base : 1‚Ñö ‚â§ 1‚Ñö
  base = 0 , refl

  step : (n : ‚Ñï) ‚Üí (‚ü®2/3‚ü©^ n) ‚â§ (‚ü®1/sn‚ü© n) ‚Üí (‚ü®2/3‚ü©^ succ n) ‚â§ ‚ü®1/sn‚ü© (succ n)
  step 0 IH = 1 , refl
  step 1 IH = 1 , refl
  step (succ (succ n)) IH = Œ≥
   where
    S‚ÇÅ‚¶Ön+2‚¶Ü = ‚ü®2/3‚ü©^ (succ (succ n))
    S‚ÇÅ‚¶Ön+3‚¶Ü = ‚ü®2/3‚ü©^ (succ (succ (succ n)))
    S‚ÇÇ‚¶Ön+2‚¶Ü = ‚ü®1/sn‚ü© (succ (succ n))
    S‚ÇÇ‚¶Ön+3‚¶Ü = ‚ü®1/sn‚ü© (succ (succ (succ n)))

    I : S‚ÇÅ‚¶Ön+2‚¶Ü * 2/3 ‚â§ S‚ÇÇ‚¶Ön+2‚¶Ü * 2/3
    I = ‚Ñö‚â§-pos-multiplication-preserves-order' S‚ÇÅ‚¶Ön+2‚¶Ü S‚ÇÇ‚¶Ön+2‚¶Ü  2/3 IH (2 , refl)

    II : S‚ÇÇ‚¶Ön+2‚¶Ü * 2/3 ‚â§ S‚ÇÇ‚¶Ön+3‚¶Ü
    II = ‚ü®1/sn‚ü©-bounds-‚ü®2/3‚ü©-lemma n

    Œ≥ : S‚ÇÅ‚¶Ön+3‚¶Ü ‚â§ S‚ÇÇ‚¶Ön+3‚¶Ü
    Œ≥ = ‚Ñö‚â§-trans (S‚ÇÅ‚¶Ön+2‚¶Ü * 2/3) (S‚ÇÇ‚¶Ön+2‚¶Ü * 2/3) S‚ÇÇ‚¶Ön+3‚¶Ü I II

‚ü®2/3‚ü©^n-squeezed : Œ£ N Íûâ ‚Ñï  , ((n : ‚Ñï) ‚Üí (N ‚â§ n) ‚Üí (0f n ‚â§ ‚ü®2/3‚ü©^ n ‚â§ ‚ü®1/sn‚ü© n))
‚ü®2/3‚ü©^n-squeezed = 1 , Œ≥
 where
  Œ≥ : (n : ‚Ñï) ‚Üí 1 ‚â§ n ‚Üí (0f n ‚â§ ‚ü®2/3‚ü©^ n ‚â§ ‚ü®1/sn‚ü© n)
  Œ≥ n l = Œ≥‚ÇÅ , Œ≥‚ÇÇ
   where
    Œ≥‚ÇÅ : 0‚Ñö ‚â§ (‚ü®2/3‚ü©^ n)
    Œ≥‚ÇÅ = ‚ü®2/3‚ü©-all-positive n

    Œ≥‚ÇÇ : (‚ü®2/3‚ü©^ n) ‚â§ (‚ü®1/sn‚ü© n)
    Œ≥‚ÇÇ = ‚ü®1/sn‚ü©-bounds-‚ü®2/3‚ü© n

‚ü®2/3‚ü©^n-converges : ‚ü®2/3‚ü©^_ ‚ü∂ 0‚Ñö
‚ü®2/3‚ü©^n-converges =
 sandwich-theorem
  0‚Ñö 0f ‚ü®2/3‚ü©^_ ‚ü®1/sn‚ü©
   ‚ü®2/3‚ü©^n-squeezed
   0f-converges
   ‚ü®1/sn‚ü©-converges

‚ü®2/3‚ü©^n<Œµ : (Œµ : ‚Ñö‚Çä) ‚Üí Œ£ n Íûâ ‚Ñï , (‚ü®2/3‚ü©^ n) < Œµ
‚ü®2/3‚ü©^n<Œµ Œµ = Œ≥ (‚ü®2/3‚ü©^n-converges Œµ)
 where
  Œ≥ : Œ£ N Íûâ ‚Ñï , ((n : ‚Ñï) ‚Üí N ‚â§ n ‚Üí abs ((‚ü®2/3‚ü©^ n) - 0‚Ñö) < Œµ)
    ‚Üí Œ£ n Íûâ ‚Ñï , (‚ü®2/3‚ü©^ n) < Œµ
  Œ≥ (N , f) = N , Œ≥'
   where
    I : abs ((‚ü®2/3‚ü©^ N) - 0‚Ñö) < Œµ
    I = f N (‚â§-refl N)

    II : 0‚Ñö < (‚ü®2/3‚ü©^ N)
    II = ‚ü®2/3‚ü©^n-positive N

    III : abs ((‚ü®2/3‚ü©^ N) - 0‚Ñö) Ôºù ‚ü®2/3‚ü©^ N
    III = abs ((‚ü®2/3‚ü©^ N) + 0‚Ñö) Ôºù‚ü® ap abs (‚Ñö-zero-right-neutral (‚ü®2/3‚ü©^ N)) ‚ü©
          abs (‚ü®2/3‚ü©^ N)        Ôºù‚ü® abs-of-pos-is-pos' (‚ü®2/3‚ü©^ N) II         ‚ü©
          (‚ü®2/3‚ü©^ N)            ‚àé

    Œ≥' : (‚ü®2/3‚ü©^ N) < Œµ
    Œ≥' = transport (_< Œµ) III I

‚ü®2/3‚ü©^n<Œµ-consequence : (Œµ (p , _) : ‚Ñö‚Çä) ‚Üí Œ£ n Íûâ ‚Ñï , (‚ü®2/3‚ü©^ n) * p < Œµ
‚ü®2/3‚ü©^n<Œµ-consequence (Œµ , 0<Œµ) (p , 0<p) = Œ≥ (‚ü®2/3‚ü©^n<Œµ (Œµ * p' , 0<Œµp'))
 where
  p-not-zero : ¬¨ (p Ôºù 0‚Ñö)
  p-not-zero = ‚Ñö<-positive-not-zero p 0<p

  p' : ‚Ñö
  p' = ‚Ñö*-inv p p-not-zero

  0<p' : 0‚Ñö < p'
  0<p' = ‚Ñö-inv-preserves-pos p 0<p p-not-zero

  0<Œµp' : 0‚Ñö < Œµ * p'
  0<Œµp' = ‚Ñö<-pos-multiplication-preserves-order Œµ p' 0<Œµ 0<p'

  Œ≥ : Œ£ n Íûâ ‚Ñï , (‚ü®2/3‚ü©^ n) < Œµ * p'
    ‚Üí Œ£ n Íûâ ‚Ñï , (‚ü®2/3‚ü©^ n) * p < Œµ
  Œ≥ (n , l) = n , Œ≥'
   where
    I : (‚ü®2/3‚ü©^ n) * p < Œµ * p' * p
    I = ‚Ñö<-pos-multiplication-preserves-order' (‚ü®2/3‚ü©^ n) (Œµ * p') p l 0<p

    II : Œµ * p' * p Ôºù Œµ
    II = Œµ * p' * p   Ôºù‚ü® ‚Ñö*-assoc Œµ p' p                             ‚ü©
         Œµ * (p' * p) Ôºù‚ü® ap (Œµ *_) (‚Ñö*-comm p' p)                    ‚ü©
         Œµ * (p * p') Ôºù‚ü® ap (Œµ *_) (‚Ñö*-inverse-product p p-not-zero) ‚ü©
         Œµ * 1‚Ñö       Ôºù‚ü® ‚Ñö-mult-right-id Œµ                           ‚ü©
         Œµ            ‚àé

    Œ≥' : (‚ü®2/3‚ü©^ n) * p < Œµ
    Œ≥' = transport ((‚ü®2/3‚ü©^ n) * p <_) II I

\end{code}
