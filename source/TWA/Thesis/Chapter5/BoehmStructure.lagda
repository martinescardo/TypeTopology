Todd Waugh Ambridge, January 2024

# Structural properties of ternary Boehm encodings

\begin{code}
{-# OPTIONS --without-K --safe #-}

open import Integers.Addition renaming (_+_ to _‚Ñ§+_)
open import Notation.Order
open import Integers.Order
open import Integers.Type
open import MLTT.Spartan
open import Naturals.Addition renaming (_+_ to _‚Ñï+_)

open import TWA.Thesis.Chapter5.Integers

module TWA.Thesis.Chapter5.BoehmStructure where
\end{code}

## downLeft, downMid and downRight

\begin{code}
downLeft downMid downRight : ‚Ñ§ ‚Üí ‚Ñ§
downLeft  a = a ‚Ñ§+ a
downMid   a = succ‚Ñ§ (downLeft a)
downRight a = succ‚Ñ§ (downMid  a)
\end{code}

## downLeft and downRight properties

\begin{code}
pred-downMid : (a : ‚Ñ§) ‚Üí pred‚Ñ§ (downMid a) Ôºù downLeft a
pred-downMid a = predsucc‚Ñ§ _

pred-downRight : (a : ‚Ñ§) ‚Üí pred‚Ñ§ (downRight a) Ôºù downMid a
pred-downRight a = predsucc‚Ñ§ _

pred-pred-downRight
 : (a : ‚Ñ§) ‚Üí pred‚Ñ§ (pred‚Ñ§ (downRight a)) Ôºù downLeft a
pred-pred-downRight a = ap pred‚Ñ§ (predsucc‚Ñ§ _) ‚àô predsucc‚Ñ§ _

downLeft-monotone' : (a b : ‚Ñ§) ‚Üí ((n , _) : a ‚â§‚Ñ§ b)
                   ‚Üí downLeft a +pos (n ‚Ñï+ n) Ôºù downLeft b
downLeft-monotone' a b (n , refl)
 = ap ((a ‚Ñ§+ a) ‚Ñ§+_) (distributivity-pos-addition n n ‚Åª¬π)
 ‚àô ‚Ñ§+-rearrangement (a ‚Ñ§+ a) (pos n) (pos n) ‚Åª¬π
 ‚àô ap (Œª - ‚Üí (- +pos n) +pos n) (‚Ñ§+-comm a a)
 ‚àô ap (_+pos n)
     (‚Ñ§+-assoc a a (pos n)
     ‚àô ap (a ‚Ñ§+_) (‚Ñ§+-comm a (pos n))
     ‚àô ‚Ñ§+-assoc a (pos n) a ‚Åª¬π)
 ‚àô ‚Ñ§+-assoc (a +pos n) a (pos n)

‚Ñ§‚â§<-trans : (a b c : ‚Ñ§) ‚Üí a ‚â§‚Ñ§ b ‚Üí b <‚Ñ§ c ‚Üí a <‚Ñ§ c
‚Ñ§‚â§<-trans a b c (m , refl) (n , refl)
 = m ‚Ñï+ n
 , (ap (succ‚Ñ§ a ‚Ñ§+_) (distributivity-pos-addition m n ‚Åª¬π)
 ‚àô ‚Ñ§+-assoc (succ‚Ñ§ a) (pos m) (pos n) ‚Åª¬π 
 ‚àô ap (_+pos n) (‚Ñ§-left-succ-pos a m))

downLeft<<downRight : (a b : ‚Ñ§) ‚Üí a <‚Ñ§ b ‚Üí downLeft a <‚Ñ§ downRight b
downLeft<<downRight a b (n , refl)
 = (succ (succ (succ (n ‚Ñï+ n))))
 , ap (succ‚Ñ§ ‚àò succ‚Ñ§)
     (ap succ‚Ñ§
       (ap (_+pos (n ‚Ñï+ n)) (‚Ñ§-left-succ a a ‚Åª¬π)
       ‚àô ap ((succ‚Ñ§ a ‚Ñ§+ a) ‚Ñ§+_) (distributivity-pos-addition n n ‚Åª¬π)
       ‚àô ‚Ñ§+-rearrangement (succ‚Ñ§ a ‚Ñ§+ a) (pos n) (pos n) ‚Åª¬π
       ‚àô ap (Œª - ‚Üí (- +pos n) +pos n) (‚Ñ§+-comm (succ‚Ñ§ a) a)
       ‚àô ap (_+pos n)
           (‚Ñ§+-assoc a (succ‚Ñ§ a) (pos n)
         ‚àô ap (a ‚Ñ§+_) (‚Ñ§+-comm (succ‚Ñ§ a) (pos n))
         ‚àô ‚Ñ§+-assoc a (pos n) (succ‚Ñ§ a) ‚Åª¬π)
       ‚àô ‚Ñ§+-assoc (a +pos n) (succ‚Ñ§ a) (pos n))
   ‚àô ‚Ñ§-left-succ (a +pos n) (succ‚Ñ§ a +pos n) ‚Åª¬π
   ‚àô ap (_‚Ñ§+ (succ‚Ñ§ a +pos n)) (‚Ñ§-left-succ-pos a n ‚Åª¬π))

downLeft<downRight
 : (a : ‚Ñ§) (n : ‚Ñï)
 ‚Üí rec a downLeft (succ n) <‚Ñ§ rec a downRight (succ n)
downLeft<downRight a zero = 1 , refl
downLeft<downRight a (succ n)
 = downLeft<<downRight _ _ (downLeft<downRight a n)

downLeft‚â§downRight
 : (a : ‚Ñ§) (n : ‚Ñï) ‚Üí rec a downLeft n ‚â§‚Ñ§ rec a downRight n
downLeft‚â§downRight a 0 = zero , refl
downLeft‚â§downRight a (succ n) = <-is-‚â§ _ _ (downLeft<downRight a n)

downLeft-‚â§-succ : (a : ‚Ñ§) ‚Üí downLeft a ‚â§‚Ñ§ downLeft (succ‚Ñ§ a)
downLeft-‚â§-succ a
 = 2 , (ap succ‚Ñ§ (‚Ñ§-left-succ a a ‚Åª¬π) ‚àô ‚Ñ§-right-succ (succ‚Ñ§ a) a ‚Åª¬π)

downLeft-monotone : (a b : ‚Ñ§) ‚Üí a ‚â§‚Ñ§ b ‚Üí downLeft a ‚â§‚Ñ§ downLeft b
downLeft-monotone = ‚â§-succ-to-monotone downLeft downLeft-‚â§-succ

downLeft‚Åø-monotone : (a b : ‚Ñ§) (n : ‚Ñï) ‚Üí a ‚â§‚Ñ§ b
                   ‚Üí rec a downLeft (succ n) ‚â§‚Ñ§ rec b downLeft (succ n)
downLeft‚Åø-monotone a b 0 a‚â§b
 = downLeft-monotone a b a‚â§b
downLeft‚Åø-monotone a b (succ n) a‚â§b
 = downLeft-monotone _ _ (downLeft‚Åø-monotone a b n a‚â§b)

downRight-‚â§-succ : (a : ‚Ñ§) ‚Üí downRight a ‚â§‚Ñ§ downRight (succ‚Ñ§ a)
downRight-‚â§-succ a = 2 , ap (succ‚Ñ§ ‚àò succ‚Ñ§) (pr‚ÇÇ (downLeft-‚â§-succ a))

downRight-monotone : (a b : ‚Ñ§) ‚Üí a ‚â§‚Ñ§ b ‚Üí downRight a ‚â§‚Ñ§ downRight b
downRight-monotone = ‚â§-succ-to-monotone downRight downRight-‚â§-succ

downRight‚Åø-monotone
 : (a b : ‚Ñ§) (n : ‚Ñï)
 ‚Üí a ‚â§‚Ñ§ b
 ‚Üí rec a downRight (succ n) ‚â§‚Ñ§ rec b downRight (succ n)
downRight‚Åø-monotone a b 0 a‚â§b
 = downRight-monotone a b a‚â§b
downRight‚Åø-monotone a b (succ n) a‚â§b
 = downRight-monotone _ _ (downRight‚Åø-monotone a b n a‚â§b)

downLeft‚â§<downRight : (a b : ‚Ñ§) ‚Üí a ‚â§‚Ñ§ b ‚Üí downLeft a <‚Ñ§ downRight b
downLeft‚â§<downRight a b a‚â§b
 = ‚Ñ§‚â§<-trans _ _ _ (downLeft-monotone _ _ a‚â§b) (downLeft<downRight b 0)

downLeft‚â†downMid : (a b : ‚Ñ§) ‚Üí a Ôºù b ‚Üí downLeft a ‚â† downMid b
downLeft‚â†downMid a a refl
 = ‚Ñ§-less-not-equal (downLeft a) (downMid a)
     (0 , refl)

downLeft‚â†downRight : (a b : ‚Ñ§) ‚Üí a Ôºù b ‚Üí downLeft a ‚â† downRight b
downLeft‚â†downRight a a refl
 = ‚Ñ§-less-not-equal (downLeft a) (downRight a)
     (1 , refl)

downMid‚â†downRight : (a b : ‚Ñ§) ‚Üí a Ôºù b ‚Üí downMid a ‚â† downRight b
downMid‚â†downRight a a refl
 = ‚Ñ§-less-not-equal (downMid a) (downRight a)
     (0 , refl)

downRightÔºùdownLeft : (a : ‚Ñ§) ‚Üí downRight a Ôºù downLeft (succ‚Ñ§ a)
downRightÔºùdownLeft a
 = ap succ‚Ñ§ (‚Ñ§-left-succ a a ‚Åª¬π ‚àô ‚Ñ§+-comm (succ‚Ñ§ a) a)
 ‚àô ‚Ñ§-left-succ a (succ‚Ñ§ a) ‚Åª¬π
\end{code}

## below and below'

\begin{code}
_below_ : ‚Ñ§ ‚Üí ‚Ñ§ ‚Üí ùì§‚ÇÄ Ãá 
a below b = downLeft b ‚â§ a ‚â§ downRight b

downLeft-below  : (a : ‚Ñ§) ‚Üí downLeft a below a
downLeft-below  a = (0 , refl) , (2 , refl)

downMid-below   : (a : ‚Ñ§) ‚Üí downMid a below a
downMid-below   a = (1 , refl) , (1 , refl)

downRight-below : (a : ‚Ñ§) ‚Üí downRight a below a
downRight-below a = (2 , refl) , (0 , refl)

_below'_ : ‚Ñ§ ‚Üí ‚Ñ§ ‚Üí ùì§‚ÇÄ Ãá
a below' b = (a Ôºù downLeft b) + (a Ôºù downMid b) + (a Ôºù downRight b)

below'-implies-below : (a b : ‚Ñ§) ‚Üí a below' b ‚Üí a below b
below'-implies-below .(downLeft  b) b (inl      refl )
 = downLeft-below b
below'-implies-below .(downMid   b) b (inr (inl refl))
 = downMid-below b
below'-implies-below .(downRight b) b (inr (inr refl))
 = downRight-below b

below-implies-below' : (a b : ‚Ñ§) ‚Üí a below b ‚Üí a below' b
below-implies-below' a b ((0 , e) , _)
 = inl (e ‚Åª¬π)
below-implies-below' a b ((1 , e) , _)
 = (inr ‚àò inl) (e ‚Åª¬π)
below-implies-below' a b ((2 , e) , _)
 = (inr ‚àò inr) (e ‚Åª¬π)
below-implies-below' a b ((succ (succ (succ _)) , _) , (0 , f))
 = (inr ‚àò inr) f
below-implies-below' a b ((succ (succ (succ _)) , _) , (1 , f))
 = (inr ‚àò inl) (succ‚Ñ§-lc f)
below-implies-below' a b ((succ (succ (succ _)) , _) , (2 , f))
 = inl (succ‚Ñ§-lc (succ‚Ñ§-lc f))
below-implies-below' a b
 ((succ (succ (succ n)) , e) , (succ (succ (succ m)) , f))
 = ùüò-elim (k‚â†2 kÔºù2)
 where
   k : ‚Ñï
   k = (succ (succ (succ (succ (succ (succ (n ‚Ñï+ m)))))))
   Œ∑ : downLeft b +pos k Ôºù downRight b
   Œ∑ = ap ((succ‚Ñ§ ^ 6) ‚àò downLeft b ‚Ñ§+_)
          (distributivity-pos-addition n m ‚Åª¬π)
     ‚àô ap (succ‚Ñ§ ^ 6)
         (‚Ñ§+-assoc (downLeft b) (pos n) (pos m) ‚Åª¬π)
     ‚àô ap (succ‚Ñ§ ^ 5)
         (‚Ñ§-left-succ-pos (downLeft b +pos n) m ‚Åª¬π)
     ‚àô ap (succ‚Ñ§ ^ 4)
         (‚Ñ§-left-succ-pos (succ‚Ñ§ (downLeft b +pos n)) m ‚Åª¬π)
     ‚àô ap (succ‚Ñ§ ^ 3)
         (‚Ñ§-left-succ-pos ((succ‚Ñ§ ^ 2) (downLeft b +pos n)) m ‚Åª¬π)
     ‚àô ap ((succ‚Ñ§ ^ 3) ‚àò (_+pos m)) e
     ‚àô f
   Œ∂ : downLeft b +pos 2 Ôºù downRight b
   Œ∂ = refl
   kÔºù2 : k Ôºù 2
   kÔºù2 = pos-lc (‚Ñ§+-lc (pos k) (pos 2) (downLeft b) (Œ∑ ‚àô Œ∂ ‚Åª¬π))
   k‚â†2 : k ‚â† 2
   k‚â†2 = Œª ()
\end{code}

## upLeft and upRight

\begin{code}
upRight : ‚Ñ§ ‚Üí ‚Ñ§
upRight x = sign x (num x /2)

upLeft : ‚Ñ§ ‚Üí ‚Ñ§
upLeft x = upRight (pred‚Ñ§ x)
\end{code}

## upLeft and upRight properties

\begin{code}
upRight-suc : (a : ‚Ñ§) ‚Üí upRight (succ‚Ñ§ (succ‚Ñ§ a)) Ôºù succ‚Ñ§ (upRight a)
upRight-suc (pos zero) = refl
upRight-suc (pos (succ zero)) = refl
upRight-suc (pos (succ (succ x))) = refl
upRight-suc (negsucc zero) = refl
upRight-suc (negsucc (succ zero)) = refl
upRight-suc (negsucc (succ (succ x))) = refl

upRight-pred : (a : ‚Ñ§) ‚Üí upRight (pred‚Ñ§ (pred‚Ñ§ a)) Ôºù pred‚Ñ§ (upRight a)
upRight-pred (pos 0) = refl
upRight-pred (pos 1) = refl
upRight-pred (pos (succ (succ x))) = refl
upRight-pred (negsucc 0) = refl
upRight-pred (negsucc 1) = refl
upRight-pred (negsucc (succ (succ x))) = refl

upLeft-suc : (a : ‚Ñ§) ‚Üí upLeft (succ‚Ñ§ (succ‚Ñ§ a)) Ôºù succ‚Ñ§ (upLeft a)
upLeft-suc (pos zero) = refl
upLeft-suc (pos (succ zero)) = refl
upLeft-suc (pos (succ (succ x))) = refl
upLeft-suc (negsucc zero) = refl
upLeft-suc (negsucc (succ zero)) = refl
upLeft-suc (negsucc (succ (succ x))) = refl

upLeft-pred : (a : ‚Ñ§) ‚Üí upLeft (pred‚Ñ§ (pred‚Ñ§ a)) Ôºù pred‚Ñ§ (upLeft a)
upLeft-pred = upRight-pred ‚àò pred‚Ñ§

upRight-succ-pos : (a : ‚Ñï) ‚Üí upRight (pos a) ‚â§‚Ñ§ upRight (succ‚Ñ§ (pos a))
upRight-succ-pos 0 = 0 , refl
upRight-succ-pos 1 = 1 , refl
upRight-succ-pos (succ (succ a))
 = m , (‚Ñ§-left-succ-pos (pos (a /2)) m ‚àô ap succ‚Ñ§ (pr‚ÇÇ IH))
 where
   IH = upRight-succ-pos a
   m = pr‚ÇÅ IH

upRight-succ-negsucc
 : (a : ‚Ñï) ‚Üí upRight (negsucc a) ‚â§‚Ñ§ upRight (succ‚Ñ§ (negsucc a))
upRight-succ-negsucc 0 = 1 , refl
upRight-succ-negsucc 1 = 0 , refl
upRight-succ-negsucc (succ (succ a))
 = m , (‚Ñ§-left-pred-pos (negsucc (a /2)) m
       ‚àô ap pred‚Ñ§ (pr‚ÇÇ IH)
       ‚àô upRight-pred _ ‚Åª¬π
       ‚àô ap (upRight ‚àò pred‚Ñ§) (predsucc‚Ñ§ _))
 where
   IH = upRight-succ-negsucc a
   m = pr‚ÇÅ IH

upRight-‚â§-succ : (a : ‚Ñ§) ‚Üí upRight a ‚â§‚Ñ§ upRight (succ‚Ñ§ a)
upRight-‚â§-succ = ‚Ñ§-elim (Œª a ‚Üí upRight a ‚â§‚Ñ§ upRight (succ‚Ñ§ a))
                   upRight-succ-pos upRight-succ-negsucc

upRight-monotone : (a b : ‚Ñ§) ‚Üí a ‚â§‚Ñ§ b ‚Üí upRight a ‚â§‚Ñ§ upRight b
upRight-monotone = ‚â§-succ-to-monotone upRight upRight-‚â§-succ

upLeft-monotone : (a b : ‚Ñ§) ‚Üí a ‚â§‚Ñ§ b ‚Üí upLeft a ‚â§‚Ñ§ upLeft b
upLeft-monotone a b (n , refl)
 = upRight-monotone _ _ (n , ‚Ñ§-left-pred-pos a n)

upRight‚â§upLeft-succ : (a : ‚Ñ§) ‚Üí upRight a Ôºù upLeft (succ‚Ñ§ a)
upRight‚â§upLeft-succ a = ap upRight (predsucc‚Ñ§ _ ‚Åª¬π)

upRight‚â§upLeft : (a b : ‚Ñ§) ‚Üí a <‚Ñ§ b ‚Üí upRight a ‚â§‚Ñ§ upLeft b
upRight‚â§upLeft a b (n      , refl)
 = transport (_‚â§‚Ñ§ upLeft (succ‚Ñ§ a +pos n)) (upRight‚â§upLeft-succ a ‚Åª¬π)
     (upLeft-monotone _ _ (n , refl))

upRight-<-succ-succ : (a : ‚Ñ§) ‚Üí upRight a <‚Ñ§ upRight (succ‚Ñ§ (succ‚Ñ§ a))
upRight-<-succ-succ a
 = transport (upRight a <‚Ñ§_) (upRight-suc a ‚Åª¬π) (0 , refl)

upRight-<<' : (a b : ‚Ñ§) (n : ‚Ñï) ‚Üí (a +pos succ n) Ôºù pred‚Ñ§ b
            ‚Üí upRight a <‚Ñ§ upRight b
upRight-<<' a b zero e
 = transport (Œª - ‚Üí upRight a <‚Ñ§ upRight -)
     (ap succ‚Ñ§ e ‚àô succpred‚Ñ§ _)
     (upRight-<-succ-succ a)
upRight-<<' a b (succ n) e
 = transport (Œª - ‚Üí upRight a <‚Ñ§ upRight -)
     (ap succ‚Ñ§ e ‚àô succpred‚Ñ§ _)
     (‚Ñ§‚â§-trans _ _ _ (upRight-<-succ-succ a)
       (upRight-monotone _ _
       (succ n , ap succ‚Ñ§ (‚Ñ§-left-succ-pos (succ‚Ñ§ a) n
               ‚àô ap succ‚Ñ§ (‚Ñ§-left-succ-pos a n)))))
 
upRight-<< : (a b : ‚Ñ§) ‚Üí a <‚Ñ§ pred‚Ñ§ b ‚Üí upRight a <‚Ñ§ upRight b
upRight-<< a b (n , e)
 = upRight-<<' a b n (‚Ñ§-left-succ-pos a n ‚Åª¬π ‚àô e)

upLeft-<< : (a b : ‚Ñ§) ‚Üí a <‚Ñ§ b ‚Üí upLeft a <‚Ñ§ upRight b
upLeft-<< a b (n , refl)
 = upRight-<< (pred‚Ñ§ a) b
     (n , (ap (_+pos n) (succpred‚Ñ§ _) ‚àô predsucc‚Ñ§ _ ‚Åª¬π
         ‚àô ap pred‚Ñ§ (‚Ñ§-left-succ-pos a n ‚Åª¬π)))
\end{code}

## above and above'

\begin{code}
_above_ : ‚Ñ§ ‚Üí ‚Ñ§ ‚Üí ùì§‚ÇÄ Ãá 
b above a = upLeft a ‚â§‚Ñ§ b ‚â§‚Ñ§ upRight a

_above'_ : ‚Ñ§ ‚Üí ‚Ñ§ ‚Üí ùì§‚ÇÄ Ãá
a above' b = (a Ôºù upLeft b) + (a Ôºù upRight b)

upLeft-Ôºù-+-pos : (a : ‚Ñï) ‚Üí (upLeft (pos a) Ôºù upRight (pos a))
                         + (succ‚Ñ§ (upLeft (pos a)) Ôºù upRight (pos a))
upLeft-Ôºù-+-pos 0 = inr refl
upLeft-Ôºù-+-pos 1 = inl refl
upLeft-Ôºù-+-pos (succ (succ a))
 = Cases (upLeft-Ôºù-+-pos a)
     (Œª l ‚Üí inl (upLeft-suc (pos a) ‚àô ap succ‚Ñ§ l))
     (Œª r ‚Üí inr (ap succ‚Ñ§ (upLeft-suc (pos a) ‚àô r)))

upLeft-Ôºù-+-negsucc
 : (a : ‚Ñï)
 ‚Üí (upLeft (negsucc a) Ôºù upRight (negsucc a))
 + (succ‚Ñ§ (upLeft (negsucc a)) Ôºù upRight (negsucc a))
upLeft-Ôºù-+-negsucc 0 = inl refl
upLeft-Ôºù-+-negsucc 1 = inr refl
upLeft-Ôºù-+-negsucc (succ (succ a))
 = Cases (upLeft-Ôºù-+-negsucc a)
      (Œª l ‚Üí inl (upLeft-pred (negsucc a) ‚àô ap pred‚Ñ§ l))
      (Œª r ‚Üí inr (predsucc‚Ñ§ _ ‚Åª¬π ‚àô ap pred‚Ñ§ r))

upLeft-Ôºù-+
 : (a : ‚Ñ§) ‚Üí (upLeft a Ôºù upRight a) + (succ‚Ñ§ (upLeft a) Ôºù upRight a)
upLeft-Ôºù-+ = ‚Ñ§-elim _ upLeft-Ôºù-+-pos upLeft-Ôºù-+-negsucc

upLeft‚â§upRight : (a : ‚Ñ§) ‚Üí upLeft a ‚â§‚Ñ§ upRight a
upLeft‚â§upRight a = upRight-monotone _ _ (1 , succpred‚Ñ§ _)

upLeft-upRight-mono : (a b : ‚Ñ§) ‚Üí a ‚â§‚Ñ§ b ‚Üí upLeft a ‚â§‚Ñ§ upRight b
upLeft-upRight-mono a b a‚â§b
 = ‚Ñ§‚â§-trans _ _ _ (upLeft-monotone _ _ a‚â§b) (upLeft‚â§upRight b)

upLeft‚â§upRight‚Åø : (a : ‚Ñ§) (n : ‚Ñï) ‚Üí rec a upLeft n ‚â§‚Ñ§ rec a upRight n
upLeft‚â§upRight‚Åø a 0 = ‚Ñ§‚â§-refl a
upLeft‚â§upRight‚Åø a 1 = upLeft‚â§upRight a
upLeft‚â§upRight‚Åø a (succ (succ n))
 = upLeft-upRight-mono _ _ (upLeft‚â§upRight‚Åø a (succ n))

upLeft-above : (a : ‚Ñ§) ‚Üí upLeft a above a
upLeft-above a = ‚Ñ§‚â§-refl _ , upLeft‚â§upRight a

upRight-above : (a : ‚Ñ§) ‚Üí upRight a above a
upRight-above a = upLeft‚â§upRight a , ‚Ñ§‚â§-refl _

above'-implies-above : (a b : ‚Ñ§) ‚Üí a above' b ‚Üí a above b
above'-implies-above .(upLeft  b) b (inl refl) = upLeft-above b
above'-implies-above .(upRight b) b (inr refl) = upRight-above b

above-implies-above' : (a b : ‚Ñ§) ‚Üí a above b ‚Üí a above' b
above-implies-above' a b (l‚â§a , a‚â§r)
 = Cases (‚Ñ§‚â§-split (upLeft b) a l‚â§a)
     (Œª l<a ‚Üí Cases (‚Ñ§‚â§-split a (upRight b) a‚â§r)
       (Œª a<r ‚Üí ùüò-elim
                  (Cases (upLeft-Ôºù-+ b)
                    (Œª e ‚Üí ‚Ñ§-less-not-bigger-or-equal (upLeft b) a
                             l<a
                             (transport (a ‚â§‚Ñ§_) (e ‚Åª¬π) a‚â§r))
                    (Œª e ‚Üí ‚Ñ§-less-not-bigger-or-equal a (upRight b)
                             a<r
                             (transport (_‚â§‚Ñ§ a) e l<a))))
       inr)
     (inl ‚àò _‚Åª¬π)
\end{code}

## Relationship between below and above

\begin{code}
upRight-downLeft-pos : (b : ‚Ñï) ‚Üí pos b Ôºù upRight (downLeft (pos b))
upRight-downLeft-pos 0 = refl
upRight-downLeft-pos (succ b)
 = ap succ‚Ñ§ (upRight-downLeft-pos b)
 ‚àô upRight-suc (downLeft (pos b)) ‚Åª¬π
 ‚àô ap (upRight ‚àò succ‚Ñ§) (‚Ñ§-left-succ-pos (pos b) b ‚Åª¬π)

upRight-downLeft-negsucc
 : (b : ‚Ñï) ‚Üí negsucc b Ôºù upRight (downLeft (negsucc b))
upRight-downLeft-negsucc 0 = refl
upRight-downLeft-negsucc (succ b)
 = ap pred‚Ñ§ (upRight-downLeft-negsucc b)
 ‚àô upRight-pred (downLeft (negsucc b)) ‚Åª¬π
 ‚àô ap (upRight ‚àò pred‚Ñ§) (‚Ñ§-left-pred-negsucc (negsucc b) b ‚Åª¬π)

upRight-downMid-pos : (b : ‚Ñï) ‚Üí pos b Ôºù upRight (downMid (pos b))
upRight-downMid-pos 0 = refl
upRight-downMid-pos (succ b)
 = ap succ‚Ñ§ (upRight-downMid-pos b)
 ‚àô upRight-suc (downMid (pos b)) ‚Åª¬π
 ‚àô ap (upRight ‚àò succ‚Ñ§ ‚àò succ‚Ñ§) (‚Ñ§-left-succ-pos (pos b) b ‚Åª¬π)

upRight-downMid-negsucc
 : (b : ‚Ñï) ‚Üí negsucc b Ôºù upRight (downMid (negsucc b))
upRight-downMid-negsucc 0 = refl
upRight-downMid-negsucc (succ b)
 = ap pred‚Ñ§ (upRight-downMid-negsucc b)
 ‚àô upRight-pred (downMid (negsucc b)) ‚Åª¬π
 ‚àô ap (upRight ‚àò pred‚Ñ§) (predsucc‚Ñ§ _)
 ‚àô ap upRight (‚Ñ§-left-pred-negsucc (negsucc b) b ‚Åª¬π)
 ‚àô ap upRight (succpred‚Ñ§ _ ‚Åª¬π)

upRight-downLeft : (a : ‚Ñ§) ‚Üí a Ôºù upRight (downLeft a)
upRight-downLeft
 = ‚Ñ§-elim _ upRight-downLeft-pos upRight-downLeft-negsucc

upRight-downMid : (a : ‚Ñ§) ‚Üí a Ôºù upRight (downMid a)
upRight-downMid = ‚Ñ§-elim _ upRight-downMid-pos upRight-downMid-negsucc

upRight-downRight : (a : ‚Ñ§) ‚Üí succ‚Ñ§ a Ôºù upRight (downRight a)
upRight-downRight a = ap succ‚Ñ§ (upRight-downLeft a)
                    ‚àô upRight-suc (downLeft a) ‚Åª¬π

upLeft-downLeft : (a : ‚Ñ§) ‚Üí succ‚Ñ§ (upLeft (downLeft a)) Ôºù a
upLeft-downLeft a = upRight-suc (pred‚Ñ§ (downLeft a)) ‚Åª¬π
                  ‚àô ap (upRight ‚àò succ‚Ñ§) (succpred‚Ñ§ _)
                  ‚àô upRight-downMid a ‚Åª¬π

upLeft-downMid : (a : ‚Ñ§) ‚Üí upLeft (downMid a) Ôºù a
upLeft-downMid a = ap upRight (pred-downMid a) ‚àô upRight-downLeft a ‚Åª¬π

upLeft-downRight : (a : ‚Ñ§) ‚Üí upLeft (downRight a) Ôºù a
upLeft-downRight a
 = ap upRight (pred-downRight a) ‚àô upRight-downMid a ‚Åª¬π

below-implies-above-dL : (b : ‚Ñ§) ‚Üí b above (downLeft b)
below-implies-above-dL b
 = (1 , upLeft-downLeft  b)
 , (0 , upRight-downLeft b)

below-implies-above-dM : (b : ‚Ñ§) ‚Üí b above (downMid b)
below-implies-above-dM b
 = (0 , upLeft-downMid  b)
 , (0 , upRight-downMid b)

below-implies-above-dR : (b : ‚Ñ§) ‚Üí b above (downRight b)
below-implies-above-dR b
 = (0 , upLeft-downRight  b)
 , (1 , upRight-downRight b)

below'-implies-above : (a b : ‚Ñ§) ‚Üí a below' b ‚Üí b above a
below'-implies-above .(downLeft  b) b (inl refl)
 = below-implies-above-dL b
below'-implies-above .(downMid   b) b (inr (inl refl))
 = below-implies-above-dM b
below'-implies-above .(downRight b) b (inr (inr refl))
 = below-implies-above-dR b

dL-transform : (a : ‚Ñ§) ‚Üí downLeft (succ‚Ñ§ a) Ôºù (succ‚Ñ§ ^ 2) (downLeft a)
dL-transform a = ‚Ñ§-left-succ a (succ‚Ñ§ a) ‚àô ap succ‚Ñ§ (‚Ñ§-right-succ a a)

dL-transform-pred
 : (a : ‚Ñ§) ‚Üí downLeft (pred‚Ñ§ a) Ôºù (pred‚Ñ§ ^ 2) (downLeft a)
dL-transform-pred a
 = ‚Ñ§-left-pred a (pred‚Ñ§ a) ‚àô ap pred‚Ñ§ (‚Ñ§-right-pred a a)

dR-transform
 : (a : ‚Ñ§) ‚Üí downRight (succ‚Ñ§ a) Ôºù (succ‚Ñ§ ^ 2) (downRight a)
dR-transform a = ap (succ‚Ñ§ ^ 2) (dL-transform a)

dR-transform-pred
 : (a b : ‚Ñ§) ‚Üí downRight (pred‚Ñ§ a) Ôºù (pred‚Ñ§ ^ 2) (downRight a)
dR-transform-pred a b = ap (succ‚Ñ§ ^ 2) (dL-transform-pred a)
                      ‚àô ap succ‚Ñ§ (succpred‚Ñ§ _)
                      ‚àô succpred‚Ñ§ _
                      ‚àô predsucc‚Ñ§ _ ‚Åª¬π
                      ‚àô ap pred‚Ñ§ (predsucc‚Ñ§ _ ‚Åª¬π)

downLeft-upRight : (b : ‚Ñ§) ‚Üí downLeft (upRight b) ‚â§‚Ñ§ b
downLeft-upRight
 = ‚Ñ§-elim _ downLeft-upRight-pos downLeft-upRight-negsucc
 where
  downLeft-upRight-pos : (b : ‚Ñï) ‚Üí downLeft (upRight (pos b)) ‚â§‚Ñ§ pos b
  downLeft-upRight-pos 0 = 0 , refl
  downLeft-upRight-pos 1 = 1 , refl
  downLeft-upRight-pos (succ (succ b))
   = transport (_‚â§‚Ñ§ succ‚Ñ§ (succ‚Ñ§ (pos b)))
      ((ap downLeft (upRight-suc (pos b))
        ‚àô dL-transform (upRight (pos b))) ‚Åª¬π)
      (‚Ñ§‚â§-succ‚Åø-inj _ _ 2 (downLeft-upRight-pos b))
  downLeft-upRight-negsucc
   : (b : ‚Ñï) ‚Üí downLeft (upRight (negsucc b)) ‚â§‚Ñ§ negsucc b
  downLeft-upRight-negsucc 0 = 1 , refl
  downLeft-upRight-negsucc 1 = 0 , refl
  downLeft-upRight-negsucc (succ (succ b))
   = transport (_‚â§‚Ñ§ pred‚Ñ§ (pred‚Ñ§ (negsucc b)))
       ((ap downLeft (upRight-pred (negsucc b))
         ‚àô dL-transform-pred (upRight (negsucc b))) ‚Åª¬π)
       (‚Ñ§‚â§-pred‚Åø-inj _ _ 2 (downLeft-upRight-negsucc b))

downLeft-upLeft  : (b : ‚Ñ§) ‚Üí downLeft (upLeft b) ‚â§‚Ñ§ b
downLeft-upLeft b
 = ‚Ñ§‚â§-trans _ _ _
     (downLeft-monotone _ _ (upLeft‚â§upRight b))
     (downLeft-upRight b)

downRight-upLeft-pos : (b : ‚Ñï) ‚Üí pos b ‚â§‚Ñ§ downRight (upLeft (pos b))
downRight-upLeft-pos 0 = 0 , refl
downRight-upLeft-pos 1 = 1 , refl
downRight-upLeft-pos (succ (succ b))
 = transport ((succ‚Ñ§ ^ 2) (pos b) ‚â§‚Ñ§_)
    ((ap downRight (upLeft-suc (pos b))
      ‚àô dR-transform (upLeft (pos b))) ‚Åª¬π)
    (‚Ñ§‚â§-succ‚Åø-inj _ _ 2 (downRight-upLeft-pos b))

downRight-upLeft-negsucc
 : (b : ‚Ñï) ‚Üí negsucc b ‚â§‚Ñ§ downRight (upLeft (negsucc b))
downRight-upLeft-negsucc 0 = 1 , refl
downRight-upLeft-negsucc 1 = 0 , refl
downRight-upLeft-negsucc (succ (succ b))
 = transport ((pred‚Ñ§ ^ 2) (negsucc b) ‚â§‚Ñ§_)
     ((ap downRight (upLeft-pred (negsucc b))
      ‚àô dR-transform-pred (upLeft (negsucc b)) (pos b)) ‚Åª¬π)
     (‚Ñ§‚â§-pred‚Åø-inj _ _ 2 (downRight-upLeft-negsucc b)) 
 
downRight-upLeft : (b : ‚Ñ§) ‚Üí b ‚â§‚Ñ§ downRight (upLeft b)
downRight-upLeft
 = ‚Ñ§-elim _ downRight-upLeft-pos downRight-upLeft-negsucc

downRight-upRight : (b : ‚Ñ§) ‚Üí b ‚â§‚Ñ§ downRight (upRight b)
downRight-upRight b
 = ‚Ñ§‚â§-trans _ _ _
     (downRight-upLeft b)
     (downRight-monotone _ _ (upLeft‚â§upRight b))
     
above-upRight : (b : ‚Ñ§) ‚Üí b below (upRight b)
above-upRight b = downLeft-upRight b , downRight-upRight b

above-upLeft : (b : ‚Ñ§) ‚Üí b below (upLeft b)
above-upLeft b = downLeft-upLeft  b , downRight-upLeft b

above'-implies-below : (a b : ‚Ñ§) ‚Üí a above' b ‚Üí b below a
above'-implies-below .(upLeft  b) b (inl refl) = above-upLeft b
above'-implies-below .(upRight b) b (inr refl) = above-upRight b

above-implies-below : (a b : ‚Ñ§) ‚Üí a above b ‚Üí b below a
above-implies-below a b
 = above'-implies-below a b ‚àò above-implies-above' a b

below-implies-above : (a b : ‚Ñ§) ‚Üí a below b ‚Üí b above a
below-implies-above a b
 = below'-implies-above a b ‚àò below-implies-below' a b

above-downLeft : (a : ‚Ñ§) ‚Üí a above (downLeft a)
above-downLeft a
 = below-implies-above (downLeft a) a (downLeft-below a)

above-downMid : (a : ‚Ñ§) ‚Üí a above (downMid a)
above-downMid a
 = below-implies-above (downMid a) a (downMid-below a)

above-downRight : (a : ‚Ñ§) ‚Üí a above (downRight a)
above-downRight a
 = below-implies-above (downRight a) a (downRight-below a)
\end{code}
