Brendan Hart 2019-2020

\begin{code}

{-# OPTIONS --safe --without-K #-}

open import MLTT.Spartan
open import UF.FunExt
open import UF.PropTrunc
open import UF.Subsingletons

module PCF.Lambda.ScottModelOfIfZero
       (pt : propositional-truncations-exist)
       (fe : โ {๐ค ๐ฅ} โ funext ๐ค ๐ฅ)
       (pe : propext ๐คโ)
       where

open PropositionalTruncation pt

open import DomainTheory.Basics.Curry pt fe ๐คโ
open import DomainTheory.Basics.Dcpo pt fe ๐คโ
open import DomainTheory.Basics.Exponential pt fe ๐คโ
open import DomainTheory.Basics.FunctionComposition pt fe ๐คโ
open import DomainTheory.Basics.Pointed pt fe ๐คโ
open import DomainTheory.Basics.Products pt fe
open import DomainTheory.Lifting.LiftingSet pt fe ๐คโ pe
open import PCF.Combinatory.PCFCombinators pt fe ๐คโ
open import PCF.Lambda.AbstractSyntax pt
open import PCF.Lambda.ScottModelOfContexts pt fe pe
open import UF.Subsingletons
open import UF.Subsingletons-FunExt

open DcpoProductsGeneral ๐คโ
open IfZeroDenotationalSemantics pe


โฆifZeroโฆ-uncurried' : DCPOโฅ[ ๐แตโ รแตแถแตแตโฅ ๐แตโ , ๐แตโ โนแตแถแตแตโฅ ๐แตโ ]
โฆifZeroโฆ-uncurried' = uncurryแตแถแตแตโฅ ๐แตโ ๐แตโ (๐แตโ โนแตแถแตแตโฅ ๐แตโ) โฆifZeroโฆ

โฆifZeroโฆ-uncurried : DCPOโฅ[ (๐แตโ รแตแถแตแตโฅ ๐แตโ) รแตแถแตแตโฅ ๐แตโ , ๐แตโ ]
โฆifZeroโฆ-uncurried = uncurryแตแถแตแตโฅ (๐แตโ รแตแถแตแตโฅ ๐แตโ) ๐แตโ ๐แตโ โฆifZeroโฆ-uncurried'

module _ {n : โ} (ฮ : Context n) where

  โฆifZeroโฆ-arguments : DCPOโฅ[ ใ ฮ ใ , ๐แตโ ]
                      โ DCPOโฅ[ ใ ฮ ใ , ๐แตโ ]
                      โ DCPOโฅ[ ใ ฮ ใ , ๐แตโ ]
                      โ DCPOโฅ[ ใ ฮ ใ , (๐แตโ รแตแถแตแตโฅ ๐แตโ) รแตแถแตแตโฅ ๐แตโ ]
  โฆifZeroโฆ-arguments a b c = to-ร-DCPOโฅ ใ ฮ ใ (๐แตโ รแตแถแตแตโฅ ๐แตโ) ๐แตโ f c
     where
      f : DCPOโฅ[ ใ ฮ ใ , ๐แตโ รแตแถแตแตโฅ ๐แตโ ]
      f = to-ร-DCPOโฅ ใ ฮ ใ ๐แตโ ๐แตโ a b

  โฆifZeroโฆฮ : DCPOโฅ[ ใ ฮ ใ , ๐แตโ ]
              โ DCPOโฅ[ ใ ฮ ใ , ๐แตโ ]
              โ DCPOโฅ[ ใ ฮ ใ , ๐แตโ ]
              โ DCPOโฅ[ ใ ฮ ใ , ๐แตโ ]
  โฆifZeroโฆฮ a b c = [ ใ ฮ ใ , (๐แตโ รแตแถแตแตโฅ ๐แตโ) รแตแถแตแตโฅ ๐แตโ , ๐แตโ ]
                       โฆifZeroโฆ-uncurried โแตแถแตแตโฅ (โฆifZeroโฆ-arguments a b c)
\end{code}
