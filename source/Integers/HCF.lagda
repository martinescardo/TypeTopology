Andrew Sneap, 27 April 2021

This file arises as a result of using an equivalence relation to facilitate
proofs of property of rational numbers. We can prove that two fractions which
are in lowest terms, and satisfy an equivalence relation are equal. This proof
relies on Bezout's lemma, particularly the version of Bezout's lemma which
involves the highest common factor of integers. This files defines such a
highest common factor, and proves the required property.

\begin{code}

{-# OPTIONS --safe --without-K #-}

open import MLTT.Spartan hiding (_+_)

open import Naturals.Addition renaming (_+_ to _‚Ñï+_)
open import Naturals.Order
open import Notation.Order
open import UF.Base
open import UF.Subsingletons
open import Integers.Type
open import Integers.Addition
open import Integers.Negation
open import Integers.Division
open import Integers.Multiplication
open import Integers.Abs
open import Naturals.Division renaming (_‚à£_ to _‚Ñï‚à£_)
open import Naturals.Multiplication renaming (_*_ to _‚Ñï*_)
open import Naturals.HCF

module Integers.HCF where

‚Ñ§-is-common-divisor : (d x y : ‚Ñ§) ‚Üí ùì§‚ÇÄ Ãá
‚Ñ§-is-common-divisor d x y = (d ‚à£ x) √ó (d ‚à£ y)

‚Ñ§-is-common-divisor-is-prop : (d x y : ‚Ñ§)
                            ‚Üí not-zero d
                            ‚Üí is-prop (‚Ñ§-is-common-divisor d x y)
‚Ñ§-is-common-divisor-is-prop d x y nz = √ó-is-prop Œ≥‚ÇÅ Œ≥‚ÇÇ
 where
  Œ≥‚ÇÅ : is-prop (d ‚à£ x)
  Œ≥‚ÇÅ = (d ‚Ñ§‚à£ x -is-prop) nz

  Œ≥‚ÇÇ : is-prop (d ‚à£ y)
  Œ≥‚ÇÇ = (d ‚Ñ§‚à£ y -is-prop) nz

‚Ñ§-is-hcf : (d : ‚Ñï) ‚Üí (x y : ‚Ñ§) ‚Üí ùì§‚ÇÄ Ãá
‚Ñ§-is-hcf d x y = ‚Ñ§-is-common-divisor (pos d) x y
               √ó ((f : ‚Ñï) ‚Üí ‚Ñ§-is-common-divisor (pos f) x y ‚Üí pos f ‚à£ pos d)

‚Ñ§-HCF : (a b : ‚Ñï)
      ‚Üí Œ£ h Íûâ ‚Ñï , (is-hcf h a b)
      √ó (Œ£ (x , y) Íûâ ‚Ñ§ √ó ‚Ñ§ , pos h Ôºù (pos a) * x + (pos b) * y)
‚Ñ§-HCF = course-of-values-induction
         (Œª a ‚Üí (b : ‚Ñï) ‚Üí Œ£ h Íûâ ‚Ñï , is-hcf h a b
                        √ó (Œ£ (x , y) Íûâ ‚Ñ§ √ó ‚Ñ§ , pos h Ôºù pos a * x + pos b * y))
          step
 where
  step : (n : ‚Ñï)
       ‚Üí ((a : ‚Ñï) ‚Üí a < n ‚Üí (b : ‚Ñï)
        ‚Üí Œ£ h Íûâ ‚Ñï , is-hcf h a b
        √ó (Œ£ (x , y) Íûâ ‚Ñ§ √ó ‚Ñ§ , pos h Ôºù pos a * x + pos b * y))
       ‚Üí (b : ‚Ñï)
       ‚Üí Œ£ h Íûâ ‚Ñï , is-hcf h n b
       √ó (Œ£ (x , y) Íûâ ‚Ñ§ √ó ‚Ñ§ , pos h Ôºù pos n * x + pos b * y)
  step 0 IH b = b , hcf-zero-left , (pos 0 , pos 1) , ‚Ñ§+-comm (pos b) (pos 0)
  step (succ n) IH b = Œ≥ (division b n)
   where
    Œ≥ : Œ£ q Íûâ ‚Ñï , Œ£ r Íûâ ‚Ñï , (b Ôºù q ‚Ñï* succ n ‚Ñï+ r) √ó (r < succ n)
      ‚Üí Œ£ h Íûâ ‚Ñï , is-hcf h (succ n) b
      √ó (Œ£ (x , y) Íûâ ‚Ñ§ √ó ‚Ñ§ , pos h Ôºù pos (succ n) * x + pos b * y)
    Œ≥ (q , r , e‚ÇÄ , l) = Œ≥' (IH r l (succ n))
     where
      Œ≥' : Œ£ h Íûâ ‚Ñï , is-hcf h r (succ n)
         √ó (Œ£ (x , y) Íûâ ‚Ñ§ √ó ‚Ñ§ , pos h Ôºù pos r * x + pos (succ n) * y)

         ‚Üí Œ£ h Íûâ ‚Ñï , is-hcf h (succ n) b
         √ó (Œ£ (x , y) Íûâ ‚Ñ§ √ó ‚Ñ§ , pos h Ôºù pos (succ n) * x + pos b * y)
      Œ≥' (h , (((Œ± , Œ±‚Çö) , Œ≤ , Œ≤‚Çö) , Œ≥) , (x , y) , e‚ÇÅ) = Œ≥''
       where
        I-lemma : h ‚Ñï* (q ‚Ñï* Œ≤ ‚Ñï+ Œ±) Ôºù b
        I-lemma = h ‚Ñï* (q ‚Ñï* Œ≤ ‚Ñï+ Œ±)      Ôºù‚ü® i     ‚ü©
                  h ‚Ñï* (q ‚Ñï* Œ≤) ‚Ñï+ h ‚Ñï* Œ± Ôºù‚ü® ii    ‚ü©
                  h ‚Ñï* (q ‚Ñï* Œ≤) ‚Ñï+ r      Ôºù‚ü® iii   ‚ü©
                  h ‚Ñï* q ‚Ñï* Œ≤ ‚Ñï+ r        Ôºù‚ü® iv    ‚ü©
                  q ‚Ñï* h ‚Ñï* Œ≤ ‚Ñï+ r        Ôºù‚ü® v     ‚ü©
                  q ‚Ñï* (h ‚Ñï* Œ≤) ‚Ñï+ r      Ôºù‚ü® vi    ‚ü©
                  q ‚Ñï* succ n ‚Ñï+ r        Ôºù‚ü® e‚ÇÄ ‚Åª¬π ‚ü©
                  b                       ‚àé
         where
          i   = distributivity-mult-over-addition h (q ‚Ñï* Œ≤) Œ±
          ii  = ap (Œª z ‚Üí h ‚Ñï* (q ‚Ñï* Œ≤) ‚Ñï+ z) Œ±‚Çö
          iii = ap (_‚Ñï+ r) (mult-associativity h q Œ≤) ‚Åª¬π
          iv  = ap (Œª z ‚Üí z ‚Ñï* Œ≤ ‚Ñï+ r) (mult-commutativity h q)
          v   = ap (_‚Ñï+ r) (mult-associativity q h Œ≤)
          vi  = ap (Œª z ‚Üí q ‚Ñï* z ‚Ñï+ r) Œ≤‚Çö

        I : h ‚Ñï‚à£ b
        I = (q ‚Ñï* Œ≤ ‚Ñï+ Œ±) , I-lemma

        II : (f : ‚Ñï) ‚Üí is-common-divisor f (succ n) b ‚Üí f ‚Ñï‚à£ h
        II f ((Œº , Œº‚Çö) , ŒΩ , ŒΩ‚Çö) = Œ≥ f (œà‚ÇÅ , œà‚ÇÇ)
         where
          œà : f ‚Ñï* ŒΩ Ôºù f ‚Ñï* (q ‚Ñï* Œº) ‚Ñï+ r
          œà = f ‚Ñï* ŒΩ             Ôºù‚ü® ŒΩ‚Çö  ‚ü©
              b                  Ôºù‚ü® e‚ÇÄ  ‚ü©
              q ‚Ñï* succ n ‚Ñï+ r   Ôºù‚ü® i   ‚ü©
              q ‚Ñï* (f ‚Ñï* Œº) ‚Ñï+ r Ôºù‚ü® ii  ‚ü©
              q ‚Ñï* f ‚Ñï* Œº ‚Ñï+ r   Ôºù‚ü® iii ‚ü©
              f ‚Ñï* q ‚Ñï* Œº ‚Ñï+ r   Ôºù‚ü® iv  ‚ü©
              f ‚Ñï* (q ‚Ñï* Œº) ‚Ñï+ r ‚àé
           where
            i   = ap (Œª z ‚Üí q ‚Ñï* z ‚Ñï+ r) (Œº‚Çö ‚Åª¬π)
            ii  = ap (_‚Ñï+ r) (mult-associativity q f Œº ‚Åª¬π)
            iii = ap (Œª z ‚Üí z ‚Ñï* Œº ‚Ñï+ r) (mult-commutativity q f)
            iv  = ap (_‚Ñï+ r ) (mult-associativity f q Œº)

          œà‚ÇÅ : f ‚Ñï‚à£ r
          œà‚ÇÅ = factor-of-sum-consequence f ŒΩ (q ‚Ñï* Œº) r œà

          œà‚ÇÇ : f ‚Ñï‚à£ succ n
          œà‚ÇÇ = Œº , Œº‚Çö

        III : Œ£ (x' , y') Íûâ ‚Ñ§ √ó ‚Ñ§ , pos h Ôºù pos (succ n) * x' + pos b * y'
        III = (y + (- pos q * x) , x) , V
         where
          n' = pos (succ n)
          q' = pos q
          r' = pos r

          IV : pos b Ôºù q' * n' + r'
          IV = pos b                  Ôºù‚ü® ap pos e‚ÇÄ ‚ü©
               pos (q ‚Ñï* succ n ‚Ñï+ r) Ôºù‚ü® i         ‚ü©
               pos (q ‚Ñï* succ n) + r' Ôºù‚ü® ii        ‚ü©
               q' * n' + r'           ‚àé
           where
            i = distributivity-pos-addition (q ‚Ñï* (succ n)) r ‚Åª¬π
            ii = ap (_+ r') (pos-multiplication-equiv-to-‚Ñï q (succ n)) ‚Åª¬π

          V : pos h Ôºù n' * (y + (- q' * x)) + pos b * x
          V = pos h                                            Ôºù‚ü® e‚ÇÅ   ‚ü©
              r' * x + n' * y                                  Ôºù‚ü® i    ‚ü©
              n' * y + r' * x                                  Ôºù‚ü® refl ‚ü©
              n' * (y + pos 0) + r' * x                        Ôºù‚ü® ii   ‚ü©
              n' * (y + (q' * x + (- q' * x))) + r' * x        Ôºù‚ü® iii  ‚ü©
              n' * (y + ((- q' * x) + q' * x)) + r' * x        Ôºù‚ü® iv   ‚ü©
              n' * (y + (- q' * x) + q' * x) + r' * x          Ôºù‚ü® v    ‚ü©
              n' * (y + (- q' * x) + x * q') + r' * x          Ôºù‚ü® vi   ‚ü©
              n' * (y + (- q' * x)) + n' * (x * q') + r' * x   Ôºù‚ü® vii  ‚ü©
              n' * (y + (- q' * x)) + (x * q') * n' + r' * x   Ôºù‚ü® viii ‚ü©
              n' * (y + (- q' * x)) + x * (q' * n') + r' * x   Ôºù‚ü® ix   ‚ü©
              n' * (y + (- q' * x)) + (q' * n') * x + r' * x   Ôºù‚ü® xi   ‚ü©
              n' * (y + (- q' * x)) + ((q' * n') * x + r' * x) Ôºù‚ü® xii  ‚ü©
              n' * (y + (- q' * x)) + (q' * n' + r') * x       Ôºù‚ü® xiii ‚ü©
              n' * (y + (- q' * x)) + pos b * x                ‚àé
           where
            ii‚Çê‚Çö : pos 0 Ôºù q' * x + (- q' * x)
            ii‚Çê‚Çö = ‚Ñ§-sum-of-inverse-is-zero (q' * x) ‚Åª¬π
            iii‚Çê‚Çö : q' * x - q' * x Ôºù (- q' * x) + q' * x
            iii‚Çê‚Çö = ‚Ñ§+-comm (q' * x) (- q' * x)
            iv‚Çê‚Çö : y + ((- q' * x) + q' * x) Ôºù y - q' * x + q' * x
            iv‚Çê‚Çö = ‚Ñ§+-assoc y (- q' * x) (q' * x) ‚Åª¬π
            v‚Çê‚Çö : q' * x Ôºù x * q'
            v‚Çê‚Çö = ‚Ñ§*-comm q' x
            vi‚Çê‚Çö : n' * (y - q' * x + x * q') Ôºù n' * (y - q' * x) + n' * (x * q')
            vi‚Çê‚Çö = distributivity-mult-over-‚Ñ§' (y + (- q' * x)) (x * q') n'
            vii‚Çê‚Çö : n' * (x * q') Ôºù x * q' * n'
            vii‚Çê‚Çö = ‚Ñ§*-comm n' (x * q')
            viii‚Çê‚Çö : x * q' * n' Ôºù x * (q' * n')
            viii‚Çê‚Çö = ‚Ñ§*-assoc x q' n'
            ix‚Çê‚Çö : x * (q' * n') Ôºù q' * n' * x
            ix‚Çê‚Çö = ‚Ñ§*-comm x (q' * n')
            xii‚Çê‚Çö : q' * n' * x + r' * x Ôºù (q' * n' + r') * x
            xii‚Çê‚Çö = distributivity-mult-over-‚Ñ§ (q' * n') r' x ‚Åª¬π

            i    = ‚Ñ§+-comm (r' * x) (n' * y)
            ii   = ap (Œª z ‚Üí n' * (y + z) + r' * x) ii‚Çê‚Çö
            iii  = ap (Œª z ‚Üí n' * (y + z) + r' * x) iii‚Çê‚Çö
            iv   = ap (Œª z ‚Üí n' * z + r' * x) iv‚Çê‚Çö
            v    = ap (Œª z ‚Üí n' * (y + (- q' * x) + z) + r' * x) v‚Çê‚Çö
            vi   = ap (_+ r' * x) vi‚Çê‚Çö
            vii  = ap (Œª z ‚Üí n' * (y + (- q' * x)) + z + r' * x ) vii‚Çê‚Çö
            viii = ap (Œª z ‚Üí n' * (y + (- q' * x)) + z + r' * x ) viii‚Çê‚Çö
            ix   = ap (Œª z ‚Üí n' * (y + (- q' * x)) + z + r' * x ) ix‚Çê‚Çö
            xi   = ‚Ñ§+-assoc (n' * (y + (- q' * x))) (q' * n' * x) (r' * x)
            xii  = ap (Œª z ‚Üí n' * (y + (- q' * x)) + z) xii‚Çê‚Çö
            xiii = ap (Œª z ‚Üí n' * (y + (- q' * x)) + z * x) (IV ‚Åª¬π)

        Œ≥'' : Œ£ h Íûâ ‚Ñï , is-hcf h (succ n) b
            √ó (Œ£ (x , y) Íûâ ‚Ñ§ √ó ‚Ñ§ , pos h Ôºù pos (succ n) * x + pos b * y)
        Œ≥'' = h , (((Œ≤ , Œ≤‚Çö) , I) , II) , III

‚Ñ§-HCF' : (a b : ‚Ñï) ‚Üí Œ£ h Íûâ ‚Ñï , is-hcf h a b
‚Ñ§-HCF' a b = I (‚Ñ§-HCF a b)
 where
  I : Œ£ h Íûâ ‚Ñï , is-hcf h a b
    √ó (Œ£ (x , y) Íûâ ‚Ñ§ √ó ‚Ñ§ , pos h Ôºù (pos a) * x + (pos b) * y)
    ‚Üí Œ£ h Íûâ ‚Ñï , is-hcf h a b
  I (h , is-hcf , _) = h , is-hcf

coprime-bezout : (a b : ‚Ñï)
               ‚Üí coprime a b
               ‚Üí Œ£ (x , y) Íûâ ‚Ñ§ √ó ‚Ñ§ , pos 1 Ôºù pos a * x + pos b * y
coprime-bezout a b = I (‚Ñ§-HCF a b)
 where
  I : Œ£ h Íûâ ‚Ñï , (is-hcf h a b)
    √ó (Œ£ (x , y) Íûâ ‚Ñ§ √ó ‚Ñ§ , pos h Ôºù (pos a) * x + (pos b) * y)
    ‚Üí coprime a b
    ‚Üí Œ£ (x , y) Íûâ ‚Ñ§ √ó ‚Ñ§ , pos 1 Ôºù pos a * x + pos b * y
  I (h , is-hcf , (x , y) , Œ±) h' = (x , y) , (III ‚Åª¬π ‚àô Œ±)
   where
    II : h Ôºù 1
    II = hcf-unique a b (h , is-hcf) (1 , h')

    III : pos h Ôºù pos 1
    III = ap pos II

coprime-with-division : (a b c : ‚Ñï) ‚Üí coprime a b ‚Üí a ‚Ñï‚à£ b ‚Ñï* c ‚Üí a ‚Ñï‚à£ c
coprime-with-division a b c coprime (Œ± , Œ±‚Çö) = I (coprime-bezout a b coprime)
 where
  a' = pos a
  b' = pos b
  c' = pos c

  I : Œ£ (x , y) Íûâ ‚Ñ§ √ó ‚Ñ§ , pos 1 Ôºù a' * x + b' * y ‚Üí a ‚Ñï‚à£ c
  I ((x , y) , e‚ÇÅ) = pos-div-to-nat-div a c IV
   where
    II : a' * (x * c') + (b' * c') * y Ôºù c'
    II = a' * (x * c') + (b' * c') * y Ôºù‚ü® i   ‚ü©
         a' * x * c' + y * (b' * c')   Ôºù‚ü® ii  ‚ü©
         a' * x * c' + y * b' * c'     Ôºù‚ü® iii ‚ü©
         (a' * x + y * b') * c'        Ôºù‚ü® iv  ‚ü©
         (a' * x + b' * y) * c'        Ôºù‚ü® v   ‚ü©
         pos 1 * c'                    Ôºù‚ü® vi  ‚ü©
         c'                            ‚àé
     where
      i   = ap‚ÇÇ _+_ (‚Ñ§*-assoc a' x c' ‚Åª¬π) (‚Ñ§*-comm (b' * c') y)
      ii  = ap (Œª - ‚Üí a' * x * c' + -) (‚Ñ§*-assoc y b' c' ‚Åª¬π)
      iii = distributivity-mult-over-‚Ñ§ (a' * x) (y * b') c' ‚Åª¬π
      iv  = ap (Œª - ‚Üí (a' * x + -) * c') (‚Ñ§*-comm y b')
      v   = ap (_* c') (e‚ÇÅ ‚Åª¬π)
      vi  = ‚Ñ§-mult-left-id c'

    III : a' ‚à£ a' * (x * c') + (b' * c') * y
    III = ‚Ñ§-‚à£-respects-addition-of-multiples a' a' (b' * c') (x * c') y i ii
     where
      i : a' ‚à£ a'
      i = pos 1 , refl

      ii : a' ‚à£ (b' * c')
      ii = pos Œ± , Œ¥
       where
        Œ¥ : a' * pos Œ± Ôºù b' * c'
        Œ¥ = a' * pos Œ±    Ôºù‚ü® pos-multiplication-equiv-to-‚Ñï a Œ±    ‚ü©
            pos (a ‚Ñï* Œ±)  Ôºù‚ü® ap pos Œ±‚Çö                            ‚ü©
            pos (b ‚Ñï* c)  Ôºù‚ü® pos-multiplication-equiv-to-‚Ñï b c ‚Åª¬π ‚ü©
            b' * c' ‚àé

    IV : a' ‚à£ c'
    IV = transport (a' ‚à£_) II III

\end{code}
