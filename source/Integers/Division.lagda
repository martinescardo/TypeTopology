Andrew Sneap, 27 April 2021

\begin{code}

{-# OPTIONS --safe --without-K #-}

open import MLTT.Spartan renaming (_+_ to _‚àî_)

open import Naturals.Addition renaming (_+_ to _‚Ñï+_)
open import Naturals.Properties
open import Naturals.Order
open import Notation.Order
open import UF.Base
open import UF.Subsingletons

open import Integers.Addition
open import Integers.Type
open import Integers.Abs
open import Integers.Negation
open import Integers.Order
open import Integers.Multiplication renaming (_*_ to _‚Ñ§*_)
open import Naturals.Division renaming (_‚à£_ to _‚Ñï‚à£_)
open import Naturals.Multiplication renaming (_*_ to _‚Ñï*_)

module Integers.Division where

_‚à£_ : ‚Ñ§ ‚Üí ‚Ñ§ ‚Üí ùì§‚ÇÄ Ãá
a ‚à£ b = Œ£ x Íûâ ‚Ñ§ , a ‚Ñ§* x Ôºù b

_‚Ñ§‚à£_-is-prop : (a b : ‚Ñ§) ‚Üí not-zero a ‚Üí is-prop (a ‚à£ b)
_‚Ñ§‚à£_-is-prop a b nz (x , p) (x' , p') = to-subtype-Ôºù (Œª _ ‚Üí ‚Ñ§-is-set) II
 where
  I : x ‚Ñ§* a Ôºù x' ‚Ñ§* a
  I = x ‚Ñ§* a   Ôºù‚ü® ‚Ñ§*-comm x a  ‚ü©
      a ‚Ñ§* x   Ôºù‚ü® p            ‚ü©
      b        Ôºù‚ü® p' ‚Åª¬π        ‚ü©
      a ‚Ñ§* x'  Ôºù‚ü® ‚Ñ§*-comm a x' ‚ü©
      x' ‚Ñ§* a  ‚àé

  II : x Ôºù x'
  II = ‚Ñ§-mult-right-cancellable x x' a nz I

div-equiv-to-pos-div : (a b : ‚Ñï) ‚Üí a ‚Ñï‚à£ b ‚Üí pos a ‚à£ pos b
div-equiv-to-pos-div a b (x , p) = pos x , goal
 where
  goal : pos a ‚Ñ§* pos x Ôºù pos b
  goal = pos a ‚Ñ§* pos x Ôºù‚ü® pos-multiplication-equiv-to-‚Ñï a x ‚ü©
         pos (a ‚Ñï* x)   Ôºù‚ü® ap pos p                          ‚ü©
         pos b          ‚àé

sign-split : (x : ‚Ñ§) ‚Üí positive x ‚àî negative x
sign-split (pos x)     = inl ‚ãÜ
sign-split (negsucc x) = inr ‚ãÜ

pos-div-to-nat-div : (a b : ‚Ñï) ‚Üí pos a ‚à£ pos b ‚Üí a ‚Ñï‚à£ b
pos-div-to-nat-div a b (pos x , p) = x , pos-lc I
 where
  I : pos (a ‚Ñï* x) Ôºù pos b
  I = pos (a ‚Ñï* x)   Ôºù‚ü® pos-multiplication-equiv-to-‚Ñï a x ‚Åª¬π ‚ü©
      pos a ‚Ñ§* pos x Ôºù‚ü® p                                    ‚ü©
      pos b          ‚àé
pos-div-to-nat-div a 0 (negsucc x , p) = 0 , refl
pos-div-to-nat-div 0 (succ b) (negsucc x , p) = ùüò-elim Œ≥
 where
  I : pos (succ b) Ôºù pos 0
  I = pos (succ b)        Ôºù‚ü® p ‚Åª¬π                         ‚ü©
      pos 0 ‚Ñ§* negsucc x  Ôºù‚ü® ‚Ñ§-zero-left-base (negsucc x) ‚ü©
      pos 0               ‚àé

  Œ≥ : ùüò
  Œ≥ = positive-not-zero b (pos-lc I)
pos-div-to-nat-div (succ a) (succ b) (negsucc x , p) = ùüò-elim Œ≥
 where
  Œ≥ : ùüò
  Œ≥ = product-positive-negative-not-positive (succ a) x b p

\end{code}

TODO : Break apart ‚Ñ§-division into 4 subproofs

\begin{code}

‚Ñ§-division : (a : ‚Ñ§) ‚Üí (d : ‚Ñï)
           ‚Üí Œ£ q Íûâ ‚Ñ§ , Œ£ r Íûâ ‚Ñï , (a Ôºù q ‚Ñ§* pos (succ d) + pos r) √ó r < succ d
‚Ñ§-division (pos a) d = f (division a d)
 where
  f : Œ£ q Íûâ ‚Ñï , Œ£ r Íûâ ‚Ñï , (a Ôºù q ‚Ñï* succ d ‚Ñï+ r) √ó r < succ d
    ‚Üí Œ£ q Íûâ ‚Ñ§ , Œ£ r Íûâ ‚Ñï , (pos a Ôºù q ‚Ñ§* pos (succ d) + pos r) √ó r < succ d
  f (q , r , e , l) = (pos q) , r , I , l
   where
    I : pos a Ôºù pos q ‚Ñ§* pos (succ d) + pos r
    I = pos a                         Ôºù‚ü® ap pos e ‚ü©
        pos (q ‚Ñï* succ d ‚Ñï+ r)        Ôºù‚ü® i        ‚ü©
        pos (q ‚Ñï* succ d) + pos r     Ôºù‚ü® ii       ‚ü©
        pos q ‚Ñ§* pos (succ d) + pos r ‚àé
     where
      i = distributivity-pos-addition (q ‚Ñï* (succ d)) r ‚Åª¬π
      ii = ap (_+ pos r) (pos-multiplication-equiv-to-‚Ñï q (succ d) ‚Åª¬π)
‚Ñ§-division (negsucc a) d = f (division (succ a) d)
 where
  a' = negsucc a
  d' = succ d

  f : Œ£ q Íûâ ‚Ñï , Œ£ r Íûâ ‚Ñï , (succ a Ôºù q ‚Ñï* d' ‚Ñï+ r) √ó r < d'
    ‚Üí Œ£ q Íûâ ‚Ñ§ , Œ£ r Íûâ ‚Ñï , (a' Ôºù q ‚Ñ§* pos d' + pos r) √ó r < d'
  f (0 , 0 , e , l) = ùüò-elim (positive-not-zero a I)
   where
    I : succ a Ôºù 0
    I = succ a       Ôºù‚ü® e                 ‚ü©
        0 ‚Ñï* d' ‚Ñï+ 0 Ôºù‚ü® zero-left-base d' ‚ü©
        0            ‚àé
  f (succ q , 0 , e , l) = negsucc q , 0 , I , l
   where
    I : a' Ôºù negsucc q ‚Ñ§* pos d'
    I = a'                         Ôºù‚ü® refl ‚ü©
        - pos (succ a)             Ôºù‚ü® i    ‚ü©
        - pos (succ q ‚Ñï* d')       Ôºù‚ü® ii   ‚ü©
        - pos (succ q) ‚Ñ§* pos d'   Ôºù‚ü® iii  ‚ü©
        (- pos (succ q)) ‚Ñ§* pos d' Ôºù‚ü® refl ‚ü©
        negsucc q ‚Ñ§* pos d'        ‚àé
     where
      i   = ap -_ (ap pos e)
      ii  = ap -_ (pos-multiplication-equiv-to-‚Ñï (succ q) d' ‚Åª¬π)
      iii = negation-dist-over-mult' (pos (succ q)) (pos d') ‚Åª¬π
  f (0 , succ r , e‚ÇÅ , l‚ÇÅ) = negsucc 0 , I (subtraction' (succ r) (succ d) l‚ÇÅ)
   where
    n1 : ‚Ñ§
    n1 = negsucc 0

    I : Œ£ k Íûâ ‚Ñï , k ‚Ñï+ succ r Ôºù succ d
      ‚Üí Œ£ r Íûâ ‚Ñï , (a' Ôºù n1 ‚Ñ§* pos (succ d) + pos r) √ó r < succ d
    I (k , e‚ÇÇ) = k , III (cosubtraction k d (r , succ-lc II))
     where
      k' = pos k
      II : succ (r ‚Ñï+ k) Ôºù succ d
      II = succ (r ‚Ñï+ k) Ôºù‚ü® ap succ (addition-commutativity r k) ‚ü©
           succ (k ‚Ñï+ r) Ôºù‚ü® e‚ÇÇ                                   ‚ü©
           succ d        ‚àé
      III : k < succ d
          ‚Üí (a' Ôºù n1 ‚Ñ§* pos (succ d) + k')
          √ó k < succ d
      III l‚ÇÇ = V , l‚ÇÇ
       where
        IV : succ a Ôºù succ r
        IV = succ a                Ôºù‚ü® e‚ÇÅ ‚ü©
             0 ‚Ñï* succ d ‚Ñï+ succ r Ôºù‚ü® i  ‚ü©
             succ (0 ‚Ñï+ r)         Ôºù‚ü® ii ‚ü©
             succ r                ‚àé
         where
         i  = ap succ (ap (_‚Ñï+ r) (zero-left-base (succ d)))
         ii = ap succ (zero-left-neutral r)

        V : a' Ôºù n1 ‚Ñ§* pos (succ d) + k'
        V = a'                                 Ôºù‚ü® i    ‚ü©
            negsucc r                          Ôºù‚ü® ii   ‚ü©
            pos 0 + negsucc r                  Ôºù‚ü® iii  ‚ü©
            k' + (- k') + negsucc r            Ôºù‚ü® iv   ‚ü©
            k' + ((- k') + negsucc r)          Ôºù‚ü® v    ‚ü©
            (- k') + negsucc r + k'            Ôºù‚ü® vi   ‚ü©
            n1 ‚Ñ§* k' + (- pos (succ r)) + k'   Ôºù‚ü® vii  ‚ü©
            n1 ‚Ñ§* k' + n1 ‚Ñ§* pos (succ r) + k' Ôºù‚ü® viii ‚ü©
            n1 ‚Ñ§* (k' + pos (succ r)) + k'     Ôºù‚ü® ix   ‚ü©
            n1 ‚Ñ§* pos (k ‚Ñï+ succ r) + k'       Ôºù‚ü® x    ‚ü©
            n1 ‚Ñ§* pos (succ d) + k'            ‚àé
         where
          i    = ap negsucc (succ-lc IV)
          ii   = ‚Ñ§-zero-left-neutral (negsucc r) ‚Åª¬π
          iii  = ap (_+ (negsucc r)) (‚Ñ§-sum-of-inverse-is-zero k' ‚Åª¬π)
          iv   = ‚Ñ§+-assoc k' (- k') (negsucc r)
          v    = ‚Ñ§+-comm k' ((- k') + negsucc r)
          vi   = ap (Œª z ‚Üí (z + negsucc r) + k') (mult-negation k')
          vii  = ap (Œª z ‚Üí  (n1 ‚Ñ§* k' + z) + k') (mult-negation (pos (succ r)))
          viii = ap (_+ k') (distributivity-mult-over-‚Ñ§' k' (pos (succ r)) n1 ‚Åª¬π)
          ix   = ap (Œª z ‚Üí n1 ‚Ñ§* z + k') (distributivity-pos-addition k (succ r))
          x    = ap (Œª z ‚Üí n1 ‚Ñ§* pos z + k') e‚ÇÇ

  f (succ q , succ r , e‚ÇÅ , l‚ÇÅ) = negsucc (succ q) , Œ≥
   where
    I : Œ£ k Íûâ ‚Ñï , k ‚Ñï+ succ r Ôºù d'
      ‚Üí Œ£ r Íûâ ‚Ñï , (a' Ôºù negsucc (succ q) ‚Ñ§* pos d' + pos r) √ó r < d'
    I (k , e‚ÇÇ) =  k , III (cosubtraction k d (r , succ-lc II))
     where
      k' = pos k
      q' = pos (succ q)

      II : succ (r ‚Ñï+ k) Ôºù d'
      II = succ (r ‚Ñï+ k) Ôºù‚ü® ap succ (addition-commutativity r k) ‚ü©
           succ (k ‚Ñï+ r) Ôºù‚ü® e‚ÇÇ                                   ‚ü©
           d'        ‚àé
      III : k < d' ‚Üí (a' Ôºù negsucc (succ q) ‚Ñ§* pos d' + k') √ó k < d'
      III l‚ÇÇ = V , l‚ÇÇ
       where
        IV : - pos (succ r) Ôºù k' - pos d'
        IV = - pos (succ r)               Ôºù‚ü® refl ‚ü©
             negsucc r                    Ôºù‚ü® i    ‚ü©
             pos 0 + negsucc r            Ôºù‚ü® ii   ‚ü©
             k' + (- k') + negsucc r      Ôºù‚ü® iii  ‚ü©
             k' + ((- k') - pos (succ r)) Ôºù‚ü® iv   ‚ü©
             k' - (k' + pos (succ r))     Ôºù‚ü® v    ‚ü©
             k' - pos (k ‚Ñï+ succ r)       Ôºù‚ü® vi   ‚ü©
             k' - pos d'                  ‚àé
         where
          i   = ‚Ñ§-zero-left-neutral (negsucc r) ‚Åª¬π
          ii  = ap (_+  negsucc r) (‚Ñ§-sum-of-inverse-is-zero k' ‚Åª¬π)
          iii = ‚Ñ§+-assoc k' (- k') (negsucc r)
          iv  = ap (k' +_) (negation-dist k' (pos (succ r)))
          v   = ap (Œª z ‚Üí k' - z) (distributivity-pos-addition k (succ r))
          vi  = ap (Œª z ‚Üí k' - pos z) e‚ÇÇ

        V : a' Ôºù negsucc (succ q) ‚Ñ§* pos d' + k'
        V = a'                                      Ôºù‚ü® refl               ‚ü©
            - pos (succ a)                          Ôºù‚ü® ap -_ (ap pos e‚ÇÅ)  ‚ü©
            - pos (succ q ‚Ñï* d' ‚Ñï+ succ r)          Ôºù‚ü® i                  ‚ü©
            - (pos (succ q ‚Ñï* d') + pos (succ r))   Ôºù‚ü® ii                 ‚ü©
            (- pos (succ q ‚Ñï* d')) - pos (succ r)   Ôºù‚ü® iii                ‚ü©
            (- q' ‚Ñ§* pos d') - pos (succ r)         Ôºù‚ü® iv                 ‚ü©
            (- q' ‚Ñ§* pos d') + (k' - pos d')        Ôºù‚ü® v                  ‚ü©
            (- q' ‚Ñ§* pos d') - pos d' + k'          Ôºù‚ü® vi                 ‚ü©
            (- pos d' ‚Ñ§* q') - pos d' + k'          Ôºù‚ü® vii                ‚ü©
            (- pos d') ‚Ñ§* q' - pos d' + k'          Ôºù‚ü® viii               ‚ü©
            (- pos d') ‚Ñ§* q' - pos d' ‚Ñ§* pos 1 + k' Ôºù‚ü® ix                 ‚ü©
            (- pos d') ‚Ñ§* (q' + pos 1) + k'         Ôºù‚ü® refl               ‚ü©
            (- pos d') ‚Ñ§* pos (succ (succ q)) + k'  Ôºù‚ü® x                  ‚ü©
            (- pos d' ‚Ñ§* pos (succ (succ q))) + k'  Ôºù‚ü® xi                 ‚ü©
            (- pos (succ (succ q)) ‚Ñ§* pos d') + k'  Ôºù‚ü® xii                ‚ü©
            negsucc (succ q) ‚Ñ§* pos d' + k'         ‚àé
             where
              i‚Çê‚Çö    = distributivity-pos-addition (succ q ‚Ñï* d') (succ r) ‚Åª¬π
              iii‚Çê‚Çö  = pos-multiplication-equiv-to-‚Ñï (succ q) d' ‚Åª¬π
              vii‚Çê‚Çö  = negation-dist-over-mult' (pos d') q' ‚Åª¬π
              viii‚Çê‚Çö = ‚Ñ§-mult-right-id (- pos d')
              ix‚Çê‚Çö   = distributivity-mult-over-‚Ñ§' q' (pos 1) (- pos d') ‚Åª¬π
              x‚Çê‚Çö    = negation-dist-over-mult' (pos d') (pos (succ (succ q)))
              xi‚Çê‚Çö   = ‚Ñ§*-comm (pos d') (pos (succ (succ q)))
              xii‚Çê‚Çö  = negation-dist-over-mult' (pos (succ (succ q))) (pos d') ‚Åª¬π

              i    = ap -_ i‚Çê‚Çö
              ii   = negation-dist (pos (succ q ‚Ñï* d')) (pos (succ r)) ‚Åª¬π
              iii  = ap (Œª z ‚Üí (- z) - pos (succ r)) iii‚Çê‚Çö
              iv   = ap ((- q' ‚Ñ§* pos d') +_) IV
              v    = ‚Ñ§+-rearrangement (- (q' ‚Ñ§* pos d')) k' (- pos d') ‚Åª¬π
              vi   = ap (Œª z ‚Üí ((- z) + (- pos d')) + k') (‚Ñ§*-comm q' (pos d'))
              vii  = ap (Œª z ‚Üí (z + (- pos d')) + k') vii‚Çê‚Çö
              viii = ap (Œª z ‚Üí ((- pos d') ‚Ñ§* q' + z) + k') viii‚Çê‚Çö ‚Åª¬π
              ix   = ap (_+ k') ix‚Çê‚Çö
              x    = ap (_+ k') x‚Çê‚Çö
              xi   = ap (Œª z ‚Üí (- z) + k') xi‚Çê‚Çö
              xii  = ap (_+ k') xii‚Çê‚Çö

    Œ≥ : Œ£ r Íûâ ‚Ñï , (a' Ôºù negsucc (succ q) ‚Ñ§* pos d' + pos r) √ó r < d'
    Œ≥ = I (subtraction' (succ r) (succ d) l‚ÇÅ)

‚Ñ§-‚à£-respects-addition : (x y z : ‚Ñ§) ‚Üí x ‚à£ y ‚Üí x ‚à£ z ‚Üí x ‚à£ y + z
‚Ñ§-‚à£-respects-addition x y z (Œ± , Œ±‚Çö) (Œ≤ , Œ≤‚Çö) = Œ± + Œ≤ , I
 where
  I : x ‚Ñ§* (Œ± + Œ≤) Ôºù y + z
  I = x ‚Ñ§* (Œ± + Œ≤)    Ôºù‚ü® distributivity-mult-over-‚Ñ§' Œ± Œ≤ x ‚ü©
      x ‚Ñ§* Œ± + x ‚Ñ§* Œ≤ Ôºù‚ü® ap‚ÇÇ _+_ Œ±‚Çö Œ≤‚Çö                      ‚ü©
      y + z           ‚àé

‚Ñ§-‚à£-respects-addition-of-multiples : (x y z k l : ‚Ñ§)
                                  ‚Üí x ‚à£ y
                                  ‚Üí x ‚à£ z
                                  ‚Üí x ‚à£ (y ‚Ñ§* k + z ‚Ñ§* l)
‚Ñ§-‚à£-respects-addition-of-multiples x y z k l (Œ± , Œ±‚Çö) (Œ≤ , Œ≤‚Çö) = Œ≥
 where
  I : x ‚Ñ§* (Œ± ‚Ñ§* k + Œ≤ ‚Ñ§* l) Ôºù y ‚Ñ§* k + z ‚Ñ§* l
  I = x ‚Ñ§* (Œ± ‚Ñ§* k + Œ≤ ‚Ñ§* l)        Ôºù‚ü® i   ‚ü©
      x ‚Ñ§* (Œ± ‚Ñ§* k) + x ‚Ñ§* (Œ≤ ‚Ñ§* l) Ôºù‚ü® ii  ‚ü©
      x ‚Ñ§* Œ± ‚Ñ§* k + x ‚Ñ§* Œ≤ ‚Ñ§* l     Ôºù‚ü® iii ‚ü©
      y ‚Ñ§* k + z ‚Ñ§* l               ‚àé
   where
    i   = distributivity-mult-over-‚Ñ§' (Œ± ‚Ñ§* k) (Œ≤ ‚Ñ§* l) x
    ii  = ap‚ÇÇ _+_ (‚Ñ§*-assoc x Œ± k ‚Åª¬π) (‚Ñ§*-assoc x Œ≤ l ‚Åª¬π)
    iii = ap‚ÇÇ _+_ (ap (_‚Ñ§* k) Œ±‚Çö) (ap (_‚Ñ§* l) Œ≤‚Çö)

  Œ≥ : Œ£ v Íûâ ‚Ñ§ , x ‚Ñ§* v Ôºù y ‚Ñ§* k + z ‚Ñ§* l
  Œ≥ = Œ± ‚Ñ§* k + Œ≤ ‚Ñ§* l , I

\end{code}
