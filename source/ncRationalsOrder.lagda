Andrew Sneap

\begin{code}

{-# OPTIONS --without-K --exact-split --safe #-}

open import SpartanMLTT renaming (_+_ to _‚àî_) --TypeTopology

open import NaturalNumbers-Properties --Type Topology
open import OrderNotation
open import UF-Base --TypeTopology
open import UF-Subsingletons --TypeTopology

open import IntegersAbs
open import IntegersAddition renaming (_+_ to _‚Ñ§+_)
open import IntegersB
open import IntegersMultiplication renaming (_*_ to _‚Ñ§*_)
open import IntegersOrder 
open import MoreNaturalProperties
open import NaturalsAddition renaming (_+_ to _‚Ñï+_)
open import NaturalsMultiplication renaming (_*_ to _‚Ñï*_)
open import ncRationals
open import ncRationalsOperations

_‚Ñö‚Çô‚â§_ _‚Ñö‚Çô‚â•_ : ‚Ñö‚Çô ‚Üí ‚Ñö‚Çô ‚Üí ùì§‚ÇÄ Ãá
(x , a) ‚Ñö‚Çô‚â§ (y , b) = (x ‚Ñ§* pos (succ b)) ‚â§ (y ‚Ñ§* pos (succ a))
p ‚Ñö‚Çô‚â• q = q ‚Ñö‚Çô‚â§ p

‚Ñö‚Çô‚â§-is-prop : (p q : ‚Ñö‚Çô) ‚Üí is-prop (p ‚Ñö‚Çô‚â§ q)
‚Ñö‚Çô‚â§-is-prop (x , a) (y , b) = ‚Ñ§‚â§-is-prop (x ‚Ñ§* pos (succ b)) (y ‚Ñ§* pos (succ a))

_‚Ñö‚Çô<_ _‚Ñö‚Çô>_ : ‚Ñö‚Çô ‚Üí ‚Ñö‚Çô ‚Üí ùì§‚ÇÄ Ãá
(x , a) ‚Ñö‚Çô< (y , b) = (x ‚Ñ§* pos (succ b)) < (y ‚Ñ§* pos (succ a))
p ‚Ñö‚Çô> q = q ‚Ñö‚Çô< p

‚Ñö‚Çô<-coarser-than-‚â§ : (p q : ‚Ñö‚Çô) ‚Üí p ‚Ñö‚Çô< q ‚Üí p ‚Ñö‚Çô‚â§ q
‚Ñö‚Çô<-coarser-than-‚â§ (x , a) (y , b) l = <-is-‚â§ (x ‚Ñ§* pos (succ b)) (y ‚Ñ§* pos (succ a)) l

‚Ñö‚Çô<-is-prop : (p q : ‚Ñö‚Çô) ‚Üí is-prop (p ‚Ñö‚Çô< q)
‚Ñö‚Çô<-is-prop (x , a) (y , b) = ‚Ñ§<-is-prop (x ‚Ñ§* pos (succ b)) (y ‚Ñ§* pos (succ a))

‚Ñö‚Çô<-trans : (p q r : ‚Ñö‚Çô) ‚Üí p ‚Ñö‚Çô< q ‚Üí q ‚Ñö‚Çô< r ‚Üí p ‚Ñö‚Çô< r
‚Ñö‚Çô<-trans (x , a) (y , b) (z , c) Œ± Œ≤ = ordering-right-cancellable (x ‚Ñ§* c') (z ‚Ñ§* a') b' ‚ãÜ I
 where
  a' = pos (succ a)
  b' = pos (succ b)
  c' = pos (succ c)
  
  I : x ‚Ñ§* c' ‚Ñ§* b' < z ‚Ñ§* a' ‚Ñ§* b'
  I = ‚Ñ§<-trans ((x ‚Ñ§* c') ‚Ñ§* b') ((y ‚Ñ§* a') ‚Ñ§* c') ((z ‚Ñ§* a') ‚Ñ§* b') i ii
   where
    i : x ‚Ñ§* c' ‚Ñ§* b' < y ‚Ñ§* a' ‚Ñ§* c'
    i = transport (_< ((y ‚Ñ§* a') ‚Ñ§* c')) œï Œ∏
     where
      œï : x ‚Ñ§* b' ‚Ñ§* c' ‚â° x ‚Ñ§* c' ‚Ñ§* b'
      œï = ‚Ñ§-mult-rearrangement x b' c'

      Œ∏ : x ‚Ñ§* b' ‚Ñ§* c' < y ‚Ñ§* a' ‚Ñ§* c'
      Œ∏ = positive-multiplication-preserves-order (x ‚Ñ§* b') (y ‚Ñ§* a') c' ‚ãÜ Œ±
    ii : y ‚Ñ§* a' ‚Ñ§* c' < z ‚Ñ§* a' ‚Ñ§* b'
    ii = transport‚ÇÇ _<_ Œ≥‚ÇÅ Œ≥‚ÇÇ Œ≥‚ÇÉ
     where
      Œ≥‚ÇÅ : y ‚Ñ§* c' ‚Ñ§* a' ‚â° y ‚Ñ§* a' ‚Ñ§* c'
      Œ≥‚ÇÅ = ‚Ñ§-mult-rearrangement y c' a'

      Œ≥‚ÇÇ : z ‚Ñ§* b' ‚Ñ§* a' ‚â° z ‚Ñ§* a' ‚Ñ§* b'
      Œ≥‚ÇÇ = ‚Ñ§-mult-rearrangement z b' a'

      Œ≥‚ÇÉ : y ‚Ñ§* c' ‚Ñ§* a' < z ‚Ñ§* b' ‚Ñ§* a'
      Œ≥‚ÇÉ = positive-multiplication-preserves-order (y ‚Ñ§* c') (z ‚Ñ§* b') a' ‚ãÜ Œ≤

‚Ñö‚Çô<-addition-preserves-order : (p q r : ‚Ñö‚Çô) ‚Üí p ‚Ñö‚Çô< q ‚Üí (p + r) ‚Ñö‚Çô< (q + r)
‚Ñö‚Çô<-addition-preserves-order (x , a) (y , b) (z , c) (n , e) = pred (succ c ‚Ñï* succ c ‚Ñï* succ n) , III
 where
  a' = pos (succ a)
  b' = pos (succ b)
  c' = pos (succ c)
  n' = pos (succ n)

  I : ¬¨ (succ c ‚Ñï* succ c ‚Ñï* succ n ‚â° 0)
  I Œ± = positive-not-zero n (mult-left-cancellable (succ n) 0 c ii)
   where
    i : succ c ‚Ñï* (succ c ‚Ñï* succ n) ‚â° succ c ‚Ñï* (succ c ‚Ñï* 0)
    i = succ c ‚Ñï* (succ c ‚Ñï* succ n) ‚â°‚ü® mult-associativity (succ c) (succ c) (succ n) ‚Åª¬π ‚ü©
        succ c ‚Ñï* succ c ‚Ñï* succ n   ‚â°‚ü® Œ± ‚ü©
        0                            ‚â°‚ü® zero-right-is-zero (succ c) ‚Åª¬π ‚ü©
        succ c ‚Ñï* 0                  ‚â°‚ü® ap (succ c ‚Ñï*_) (zero-right-is-zero (succ c) ‚Åª¬π) ‚ü©
        succ c ‚Ñï* (succ c ‚Ñï* 0)      ‚àé
    ii : succ c ‚Ñï* succ n ‚â° succ c ‚Ñï* 0
    ii = mult-left-cancellable (succ c ‚Ñï* succ n) (succ c ‚Ñï* 0) c i
  
  II : succ‚Ñ§ (pos (pred (succ c ‚Ñï* succ c ‚Ñï* succ n))) ‚â° c' ‚Ñ§* c' ‚Ñ§* n' 
  II = succ‚Ñ§ (pos (pred (succ c ‚Ñï* succ c ‚Ñï* succ n))) ‚â°‚ü® by-definition ‚ü©
      pos (succ (pred (succ c ‚Ñï* succ c ‚Ñï* succ n)))  ‚â°‚ü® ap pos (succ-pred' (succ c ‚Ñï* succ c ‚Ñï* succ n) I)‚ü©
      pos (succ c ‚Ñï* succ c ‚Ñï* succ n)                ‚â°‚ü® pos-multiplication-equiv-to-‚Ñï (succ c ‚Ñï* succ c) (succ n) ‚Åª¬π ‚ü©
      pos (succ c ‚Ñï* succ c) ‚Ñ§* pos (succ n)          ‚â°‚ü® ap (_‚Ñ§* pos (succ n)) (pos-multiplication-equiv-to-‚Ñï (succ c) (succ c) ‚Åª¬π) ‚ü©
      pos (succ c) ‚Ñ§* pos (succ c) ‚Ñ§* pos (succ n)    ‚â°‚ü® by-definition ‚ü©
      c' ‚Ñ§* c' ‚Ñ§* n' ‚àé
      
  III : succ‚Ñ§ ((x ‚Ñ§* c' ‚Ñ§+ z ‚Ñ§* a') ‚Ñ§* pos (succ (pred (succ b ‚Ñï* succ c)))) ‚Ñ§+ pos (pred (succ c ‚Ñï* succ c ‚Ñï* succ n)) ‚â° (y ‚Ñ§* c' ‚Ñ§+ z ‚Ñ§* b') ‚Ñ§* pos (succ (pred (succ a ‚Ñï* succ c)))
  III = succ‚Ñ§ ((x ‚Ñ§* c' ‚Ñ§+ z ‚Ñ§* a') ‚Ñ§* pos (succ (pred (succ b ‚Ñï* succ c)))) ‚Ñ§+ pos (pred (succ c ‚Ñï* succ c ‚Ñï* succ n)) ‚â°‚ü® ‚Ñ§-left-succ ((x ‚Ñ§* c' ‚Ñ§+ z ‚Ñ§* a') ‚Ñ§* pos (succ (pred (succ b ‚Ñï* succ c)))) (pos (pred (succ c ‚Ñï* succ c ‚Ñï* succ n))) ‚ü©
      succ‚Ñ§ ((x ‚Ñ§* c' ‚Ñ§+ z ‚Ñ§* a') ‚Ñ§* pos (succ (pred (succ b ‚Ñï* succ c))) ‚Ñ§+ pos (pred (succ c ‚Ñï* succ c ‚Ñï* succ n))) ‚â°‚ü® ‚Ñ§-right-succ ((x ‚Ñ§* c' ‚Ñ§+ z ‚Ñ§* a') ‚Ñ§* pos (succ (pred (succ b ‚Ñï* succ c)))) (pos (pred (succ c ‚Ñï* succ c ‚Ñï* succ n))) ‚Åª¬π ‚ü©
      (x ‚Ñ§* c' ‚Ñ§+ z ‚Ñ§* a') ‚Ñ§* pos (succ (pred (succ b ‚Ñï* succ c))) ‚Ñ§+ succ‚Ñ§ (pos (pred (succ c ‚Ñï* succ c ‚Ñï* succ n))) ‚â°‚ü® ap ((x ‚Ñ§* c' ‚Ñ§+ z ‚Ñ§* a') ‚Ñ§* pos (succ (pred (succ b ‚Ñï* succ c))) ‚Ñ§+_) II ‚ü©
      (x ‚Ñ§* c' ‚Ñ§+ z ‚Ñ§* a') ‚Ñ§* pos (succ (pred (succ b ‚Ñï* succ c))) ‚Ñ§+ c' ‚Ñ§* c' ‚Ñ§* n'            ‚â°‚ü® ap (Œª - ‚Üí ((x ‚Ñ§* c' ‚Ñ§+ z ‚Ñ§* a') ‚Ñ§* -) ‚Ñ§+  c' ‚Ñ§* c' ‚Ñ§* n') (denom-setup b c ) ‚ü©
      (x ‚Ñ§* c' ‚Ñ§+ z ‚Ñ§* a') ‚Ñ§* (b' ‚Ñ§* c') ‚Ñ§+ c' ‚Ñ§* c' ‚Ñ§* n'                                      ‚â°‚ü® ap (Œª - ‚Üí - ‚Ñ§+ c' ‚Ñ§* c' ‚Ñ§* n') (distributivity-mult-over-‚Ñ§ (x ‚Ñ§* c') (z ‚Ñ§* a') (b' ‚Ñ§* c')) ‚ü©
      x ‚Ñ§* c' ‚Ñ§* (b' ‚Ñ§* c') ‚Ñ§+ z ‚Ñ§* a' ‚Ñ§* (b' ‚Ñ§* c') ‚Ñ§+ c' ‚Ñ§* c' ‚Ñ§* n'                          ‚â°‚ü® ‚Ñ§+-assoc ( x ‚Ñ§* c' ‚Ñ§* (b' ‚Ñ§* c')) (z ‚Ñ§* a' ‚Ñ§* (b' ‚Ñ§* c')) (c' ‚Ñ§* c' ‚Ñ§* n' ) ‚ü©
      x ‚Ñ§* c' ‚Ñ§* (b' ‚Ñ§* c') ‚Ñ§+ (z ‚Ñ§* a' ‚Ñ§* (b' ‚Ñ§* c') ‚Ñ§+ c' ‚Ñ§* c' ‚Ñ§* n')                        ‚â°‚ü® ap (x ‚Ñ§* c' ‚Ñ§* (b' ‚Ñ§* c') ‚Ñ§+_) (‚Ñ§+-comm (z ‚Ñ§* a' ‚Ñ§* (b' ‚Ñ§* c')) ( c' ‚Ñ§* c' ‚Ñ§* n')) ‚ü©
      x ‚Ñ§* c' ‚Ñ§* (b' ‚Ñ§* c') ‚Ñ§+ (c' ‚Ñ§* c' ‚Ñ§* n' ‚Ñ§+ z ‚Ñ§* a' ‚Ñ§* (b' ‚Ñ§* c'))                        ‚â°‚ü® ‚Ñ§+-assoc (x ‚Ñ§* c' ‚Ñ§* (b' ‚Ñ§* c')) (c' ‚Ñ§* c' ‚Ñ§* n') (z ‚Ñ§* a' ‚Ñ§* (b' ‚Ñ§* c')) ‚Åª¬π ‚ü©
      x ‚Ñ§* c' ‚Ñ§* (b' ‚Ñ§* c') ‚Ñ§+ c' ‚Ñ§* c' ‚Ñ§* n' ‚Ñ§+ z ‚Ñ§* a' ‚Ñ§* (b' ‚Ñ§* c')                          ‚â°‚ü® ap‚ÇÇ (Œª Œ± Œ≤ ‚Üí Œ± ‚Ñ§+ Œ≤ ‚Ñ§+ z ‚Ñ§* a' ‚Ñ§* (b' ‚Ñ§* c')) (‚Ñ§-mult-rearrangement x c' (b' ‚Ñ§* c')) (‚Ñ§*-comm (c' ‚Ñ§* c') n') ‚ü©
      x ‚Ñ§* (b' ‚Ñ§* c') ‚Ñ§* c' ‚Ñ§+ n' ‚Ñ§* (c' ‚Ñ§* c') ‚Ñ§+ z ‚Ñ§* a' ‚Ñ§* (b' ‚Ñ§* c')                        ‚â°‚ü® ap (Œª - ‚Üí - ‚Ñ§* c'  ‚Ñ§+ n' ‚Ñ§* (c' ‚Ñ§* c') ‚Ñ§+ z ‚Ñ§* a' ‚Ñ§* (b' ‚Ñ§* c')) (‚Ñ§*-assoc x b' c' ‚Åª¬π) ‚ü©
      x ‚Ñ§* b' ‚Ñ§* c' ‚Ñ§* c' ‚Ñ§+ n' ‚Ñ§* (c' ‚Ñ§* c') ‚Ñ§+ z ‚Ñ§* a' ‚Ñ§* (b' ‚Ñ§* c')                          ‚â°‚ü® ap (Œª - ‚Üí - ‚Ñ§+ n' ‚Ñ§* (c' ‚Ñ§* c') ‚Ñ§+ z ‚Ñ§* a' ‚Ñ§* (b' ‚Ñ§* c')) (‚Ñ§*-assoc (x ‚Ñ§* b') c' c') ‚ü©
      x ‚Ñ§* b' ‚Ñ§* (c' ‚Ñ§* c') ‚Ñ§+ n' ‚Ñ§* (c' ‚Ñ§* c') ‚Ñ§+ z ‚Ñ§* a' ‚Ñ§* (b' ‚Ñ§* c')                        ‚â°‚ü® ap (Œª - ‚Üí - ‚Ñ§+ z ‚Ñ§* a' ‚Ñ§* (b' ‚Ñ§* c')) (distributivity-mult-over-‚Ñ§ ( x ‚Ñ§* b') n' (c' ‚Ñ§* c') ‚Åª¬π) ‚ü©
      (x ‚Ñ§* b' ‚Ñ§+ n') ‚Ñ§* (c' ‚Ñ§* c') ‚Ñ§+ z ‚Ñ§* a' ‚Ñ§* (b' ‚Ñ§* c')                                    ‚â°‚ü® ap (Œª - ‚Üí - ‚Ñ§+ z ‚Ñ§* a' ‚Ñ§* (b' ‚Ñ§* c') ) (‚Ñ§*-assoc ((x ‚Ñ§* b' ‚Ñ§+ n')) c' c' ‚Åª¬π) ‚ü©
      (x ‚Ñ§* b' ‚Ñ§+ n') ‚Ñ§* c' ‚Ñ§* c' ‚Ñ§+ z ‚Ñ§* a' ‚Ñ§* (b' ‚Ñ§* c')                                      ‚â°‚ü® ap (Œª - ‚Üí - ‚Ñ§* c' ‚Ñ§* c' ‚Ñ§+ z ‚Ñ§* a' ‚Ñ§* (b' ‚Ñ§* c')) (‚Ñ§-right-succ (x ‚Ñ§* b') (pos n)) ‚ü©
      (succ‚Ñ§ (x ‚Ñ§* b' ‚Ñ§+ pos n)) ‚Ñ§* c' ‚Ñ§* c' ‚Ñ§+ z ‚Ñ§* a' ‚Ñ§* (b' ‚Ñ§* c')                           ‚â°‚ü® ap (Œª - ‚Üí - ‚Ñ§* c' ‚Ñ§* c' ‚Ñ§+ z ‚Ñ§* a' ‚Ñ§* (b' ‚Ñ§* c')) (‚Ñ§-left-succ (x ‚Ñ§* b') (pos n) ‚Åª¬π) ‚ü©
      (succ‚Ñ§ (x ‚Ñ§* b') ‚Ñ§+ pos n) ‚Ñ§* c' ‚Ñ§* c' ‚Ñ§+ z ‚Ñ§* a' ‚Ñ§* (b' ‚Ñ§* c')                           ‚â°‚ü® ap (Œª - ‚Üí - ‚Ñ§* c' ‚Ñ§* c' ‚Ñ§+ z ‚Ñ§* a' ‚Ñ§* (b' ‚Ñ§* c')) e ‚ü©
      y ‚Ñ§* a' ‚Ñ§* c' ‚Ñ§* c' ‚Ñ§+ z ‚Ñ§* a' ‚Ñ§* (b' ‚Ñ§* c')                                              ‚â°‚ü® ap‚ÇÇ (Œª Œ± Œ≤ ‚Üí Œ± ‚Ñ§* c' ‚Ñ§+ Œ≤) (‚Ñ§-mult-rearrangement y a' c') (‚Ñ§*-assoc z a' (b' ‚Ñ§* c')) ‚ü©
      y ‚Ñ§* c' ‚Ñ§* a' ‚Ñ§* c' ‚Ñ§+ z ‚Ñ§* (a' ‚Ñ§* (b' ‚Ñ§* c'))                                            ‚â°‚ü® ap‚ÇÇ (Œª Œ± Œ≤ ‚Üí Œ± ‚Ñ§+ z ‚Ñ§* Œ≤) (‚Ñ§*-assoc (y ‚Ñ§* c') a' c') (‚Ñ§-mult-rearrangement''' a' b' c') ‚ü©
      y ‚Ñ§* c' ‚Ñ§* (a' ‚Ñ§* c') ‚Ñ§+ z ‚Ñ§* (b' ‚Ñ§* (a' ‚Ñ§* c'))                                          ‚â°‚ü® ap (Œª - ‚Üí y ‚Ñ§* c' ‚Ñ§* (a' ‚Ñ§* c') ‚Ñ§+ -) (‚Ñ§*-assoc z b' (a' ‚Ñ§* c') ‚Åª¬π) ‚ü©
      y ‚Ñ§* c' ‚Ñ§* (a' ‚Ñ§* c') ‚Ñ§+ z ‚Ñ§* b' ‚Ñ§* (a' ‚Ñ§* c')                                            ‚â°‚ü® distributivity-mult-over-‚Ñ§ (y ‚Ñ§* c') (z ‚Ñ§* b') (a' ‚Ñ§* c') ‚Åª¬π ‚ü©
      (y ‚Ñ§* c' ‚Ñ§+ z ‚Ñ§* b') ‚Ñ§* (pos (succ a) ‚Ñ§* pos (succ c))                                    ‚â°‚ü® ap (Œª - ‚Üí (y ‚Ñ§* c' ‚Ñ§+ z ‚Ñ§* b') ‚Ñ§* -) (denom-setup a c ‚Åª¬π)  ‚ü©
      (y ‚Ñ§* c' ‚Ñ§+ z ‚Ñ§* b') ‚Ñ§* pos (succ (pred (succ a ‚Ñï* succ c)))                              ‚àé

‚Ñö‚Çô<-adding : (p q r s : ‚Ñö‚Çô) ‚Üí p ‚Ñö‚Çô< q ‚Üí r ‚Ñö‚Çô< s ‚Üí p + r ‚Ñö‚Çô< q + s
‚Ñö‚Çô<-adding p q r s l‚ÇÅ l‚ÇÇ = ‚Ñö‚Çô<-trans (p + r) (q + r) (q + s) I III
 where
  I : (p + r) ‚Ñö‚Çô< (q + r)
  I = ‚Ñö‚Çô<-addition-preserves-order p q r l‚ÇÅ 

  II : (r + q) ‚Ñö‚Çô< (s + q)
  II = ‚Ñö‚Çô<-addition-preserves-order r s q l‚ÇÇ

  III : (q + r) ‚Ñö‚Çô< (q + s)
  III = transport‚ÇÇ _‚Ñö‚Çô<_ (‚Ñö‚Çô+-comm r q) (‚Ñö‚Çô+-comm s q) II

‚Ñö‚Çô<-adding-zero : (p q : ‚Ñö‚Çô) ‚Üí (pos 0 , 0) ‚Ñö‚Çô< p ‚Üí (pos 0 , 0) ‚Ñö‚Çô< q ‚Üí (pos 0 , 0) ‚Ñö‚Çô< (p + q)
‚Ñö‚Çô<-adding-zero p q l‚ÇÅ l‚ÇÇ = ‚Ñö‚Çô<-adding (pos 0 , 0) p (pos 0 , 0) q l‚ÇÅ l‚ÇÇ

‚Ñö‚Çô-pos-multiplication-preserves-order : (p q : ‚Ñö‚Çô) ‚Üí (pos 0 , 0) ‚Ñö‚Çô< p ‚Üí (pos 0 , 0) ‚Ñö‚Çô< q ‚Üí (pos 0 , 0) ‚Ñö‚Çô< (p * q)
‚Ñö‚Çô-pos-multiplication-preserves-order (x , a) (y , b) (n‚ÇÅ , e‚ÇÅ) (n‚ÇÇ , e‚ÇÇ) = pred (succ n‚ÇÅ ‚Ñï* succ n‚ÇÇ) , I
 where
  Œ± : pos (succ n‚ÇÅ) ‚â° x
  Œ± = pos (succ n‚ÇÅ)                                 ‚â°‚ü® ‚Ñ§-zero-left-neutral (pos (succ n‚ÇÅ)) ‚Åª¬π ‚ü©
      pos 0 ‚Ñ§+ pos (succ n‚ÇÅ)                        ‚â°‚ü® by-definition ‚ü©
      pos 0 ‚Ñ§+ succ‚Ñ§ (pos n‚ÇÅ)                       ‚â°‚ü® ‚Ñ§-right-succ (pos 0) (pos n‚ÇÅ)  ‚ü©
      succ‚Ñ§ (pos 0 ‚Ñ§+ pos n‚ÇÅ)                       ‚â°‚ü® ‚Ñ§-left-succ (pos 0) (pos n‚ÇÅ) ‚Åª¬π ‚ü©
      succ‚Ñ§ (pos 0) ‚Ñ§+ pos n‚ÇÅ                       ‚â°‚ü® ap (Œª - ‚Üí succ‚Ñ§ - ‚Ñ§+ pos n‚ÇÅ) (‚Ñ§-zero-left-is-zero (pos (succ a)) ‚Åª¬π) ‚ü©
      succ‚Ñ§ (pos 0 ‚Ñ§* pos (succ a)) ‚Ñ§+ pos n‚ÇÅ       ‚â°‚ü® e‚ÇÅ ‚ü©
      x ‚àé

  Œ≤ : pos (succ n‚ÇÇ) ‚â° y
  Œ≤ = pos (succ n‚ÇÇ)                           ‚â°‚ü® ‚Ñ§-zero-left-neutral (pos (succ n‚ÇÇ)) ‚Åª¬π ‚ü©
      pos 0 ‚Ñ§+ pos (succ n‚ÇÇ)                  ‚â°‚ü® by-definition ‚ü©
      pos 0 ‚Ñ§+ succ‚Ñ§ (pos n‚ÇÇ)                 ‚â°‚ü® ‚Ñ§-right-succ (pos 0) (pos n‚ÇÇ) ‚ü©
      succ‚Ñ§ (pos 0 ‚Ñ§+ pos n‚ÇÇ)                 ‚â°‚ü® ‚Ñ§-left-succ (pos 0) (pos n‚ÇÇ) ‚Åª¬π ‚ü©
      succ‚Ñ§ (pos 0) ‚Ñ§+ pos n‚ÇÇ                 ‚â°‚ü® ap (Œª - ‚Üí succ‚Ñ§ - ‚Ñ§+ pos n‚ÇÇ) (‚Ñ§-zero-left-is-zero (pos (succ b)) ‚Åª¬π) ‚ü©
      succ‚Ñ§ (pos 0 ‚Ñ§* pos (succ b)) ‚Ñ§+ pos n‚ÇÇ ‚â°‚ü® e‚ÇÇ ‚ü©
      y ‚àé
  
  I : succ‚Ñ§ (pos 0 ‚Ñ§* pos (succ (pred (succ a ‚Ñï* succ b)))) ‚Ñ§+ pos (pred (succ n‚ÇÅ ‚Ñï* succ n‚ÇÇ)) ‚â° x ‚Ñ§* y ‚Ñ§* pos 1
  I = succ‚Ñ§ (pos 0 ‚Ñ§* pos (succ (pred (succ a ‚Ñï* succ b)))) ‚Ñ§+ pos (pred (succ n‚ÇÅ ‚Ñï* succ n‚ÇÇ)) ‚â°‚ü® ap (Œª - ‚Üí succ‚Ñ§ - ‚Ñ§+  pos (pred (succ n‚ÇÅ ‚Ñï* succ n‚ÇÇ))) (‚Ñ§-zero-left-is-zero (pos (succ (pred (succ a ‚Ñï* succ b))))) ‚ü©
      succ‚Ñ§ (pos 0) ‚Ñ§+ pos (pred (succ n‚ÇÅ ‚Ñï* succ n‚ÇÇ)) ‚â°‚ü® ‚Ñ§-left-succ (pos 0) (pos (pred (succ n‚ÇÅ ‚Ñï* succ n‚ÇÇ))) ‚ü©
      succ‚Ñ§ (pos 0 ‚Ñ§+ pos (pred (succ n‚ÇÅ ‚Ñï* succ n‚ÇÇ))) ‚â°‚ü® ap succ‚Ñ§ (‚Ñ§-zero-left-neutral (pos (pred (succ n‚ÇÅ ‚Ñï* succ n‚ÇÇ)))) ‚ü©
      succ‚Ñ§ (pos (pred (succ n‚ÇÅ ‚Ñï* succ n‚ÇÇ)))          ‚â°‚ü® by-definition ‚ü© 
      pos (succ (pred (succ n‚ÇÅ ‚Ñï* succ n‚ÇÇ)))           ‚â°‚ü® ap pos (succ-pred' (succ n‚ÇÅ ‚Ñï* succ n‚ÇÇ) (‚Ñï-positive-multiplication-not-zero n‚ÇÅ n‚ÇÇ)) ‚ü©
      pos (succ n‚ÇÅ ‚Ñï* succ n‚ÇÇ)                         ‚â°‚ü® pos-multiplication-equiv-to-‚Ñï (succ n‚ÇÅ) (succ n‚ÇÇ) ‚Åª¬π ‚ü©
      pos (succ n‚ÇÅ) ‚Ñ§* pos (succ n‚ÇÇ)                   ‚â°‚ü® ap‚ÇÇ _‚Ñ§*_ Œ± Œ≤ ‚ü©
      x ‚Ñ§* y                                           ‚â°‚ü® ‚Ñ§-mult-right-id (x ‚Ñ§* y) ‚ü©
      x ‚Ñ§* y ‚Ñ§* pos 1 ‚àé

‚Ñö‚Çô‚â§-pos-multiplication-preserves-order : (p q : ‚Ñö‚Çô) ‚Üí (pos 0 , 0) ‚Ñö‚Çô‚â§ p ‚Üí (pos 0 , 0) ‚Ñö‚Çô‚â§ q ‚Üí (pos 0 , 0) ‚Ñö‚Çô‚â§ (p * q)
‚Ñö‚Çô‚â§-pos-multiplication-preserves-order (x , a) (y , b) (n‚ÇÅ , e‚ÇÅ) (n‚ÇÇ , e‚ÇÇ) = n‚ÇÅ ‚Ñï* n‚ÇÇ , I
 where
  I : pos 0 ‚Ñ§* pos (succ (pred (succ a ‚Ñï* succ b))) ‚Ñ§+ pos (n‚ÇÅ ‚Ñï* n‚ÇÇ) ‚â° x ‚Ñ§* y ‚Ñ§* pos 1
  I = pos 0 ‚Ñ§* pos (succ (pred (succ a ‚Ñï* succ b))) ‚Ñ§+ pos (n‚ÇÅ ‚Ñï* n‚ÇÇ)        ‚â°‚ü® ap‚ÇÇ _‚Ñ§+_ (‚Ñ§-zero-left-is-zero (pos (succ (pred (succ a ‚Ñï* succ b))))) (pos-multiplication-equiv-to-‚Ñï n‚ÇÅ n‚ÇÇ ‚Åª¬π) ‚ü©
      pos 0 ‚Ñ§+ pos n‚ÇÅ ‚Ñ§* pos n‚ÇÇ                                              ‚â°‚ü® ‚Ñ§-zero-left-neutral (pos n‚ÇÅ ‚Ñ§* pos n‚ÇÇ) ‚ü©
      pos n‚ÇÅ ‚Ñ§* pos n‚ÇÇ                                                       ‚â°‚ü® ap‚ÇÇ _‚Ñ§*_ (‚Ñ§-zero-left-neutral (pos n‚ÇÅ) ‚Åª¬π) (‚Ñ§-zero-left-neutral (pos n‚ÇÇ) ‚Åª¬π) ‚ü©
      (pos 0 ‚Ñ§+ pos n‚ÇÅ) ‚Ñ§* (pos 0 ‚Ñ§+ pos n‚ÇÇ) ‚â°‚ü® ap‚ÇÇ _‚Ñ§*_ (ap (_‚Ñ§+ pos n‚ÇÅ) (‚Ñ§-zero-left-is-zero (pos (succ a)) ‚Åª¬π )) (ap (_‚Ñ§+ pos n‚ÇÇ) (‚Ñ§-zero-left-is-zero (pos (succ b)) ‚Åª¬π)) ‚ü©
      (pos 0 ‚Ñ§* pos (succ a) ‚Ñ§+ pos n‚ÇÅ) ‚Ñ§* (pos 0 ‚Ñ§* pos (succ b) ‚Ñ§+ pos n‚ÇÇ) ‚â°‚ü® ap‚ÇÇ _‚Ñ§*_ e‚ÇÅ e‚ÇÇ ‚ü©
      x ‚Ñ§* pos 1 ‚Ñ§* (y ‚Ñ§* pos 1)                                             ‚â°‚ü® ap (_‚Ñ§* (y ‚Ñ§* pos 1)) (‚Ñ§-mult-right-id x) ‚ü©
      x ‚Ñ§* (y ‚Ñ§* pos 1)                                                      ‚â°‚ü® ‚Ñ§*-assoc x y (pos 1) ‚ü©
      x ‚Ñ§* y ‚Ñ§* pos 1 ‚àé

0‚Ñö‚Çô‚â§1 : (pos 0 , 0) ‚Ñö‚Çô‚â§ (pos 1 , 0)
0‚Ñö‚Çô‚â§1 = 1 , refl

1‚Ñö‚Çô‚â§1 : (pos 1 , 0) ‚Ñö‚Çô‚â§ (pos 1 , 0)
1‚Ñö‚Çô‚â§1 = 0 , refl

2/3‚Ñö‚Çô‚â§1 : (pos 2 , 2) ‚Ñö‚Çô‚â§ (pos 1 , 0)
2/3‚Ñö‚Çô‚â§1 = 1 , refl

negative-not-greater-than-zero : (x a : ‚Ñï) ‚Üí ¬¨ ((pos 0 , 0) ‚Ñö‚Çô<( negsucc x , a)) 
negative-not-greater-than-zero x a (n , l) = neg-not-positive (I ‚Åª¬π)
 where
  I : pos (succ n) ‚â° negsucc x ‚Ñ§* pos 1
  I = pos (succ n) ‚â°‚ü® ‚Ñ§-zero-left-neutral (pos (succ n)) ‚Åª¬π ‚ü©
      pos 0 ‚Ñ§+ pos (succ n) ‚â°‚ü® ap (_‚Ñ§+ pos (succ n)) (‚Ñ§-zero-left-is-zero (pos (succ a)) ‚Åª¬π) ‚ü©
      pos 0 ‚Ñ§* pos (succ a) ‚Ñ§+ pos (succ n) ‚â°‚ü® ‚Ñ§-right-succ (pos 0 ‚Ñ§* pos (succ a)) (pos n) ‚ü©
      succ‚Ñ§ (pos 0 ‚Ñ§* pos (succ a) ‚Ñ§+ pos n) ‚â°‚ü® ‚Ñ§-left-succ (pos 0 ‚Ñ§* pos (succ a)) (pos n) ‚Åª¬π ‚ü©
      succ‚Ñ§ (pos 0 ‚Ñ§* pos (succ a)) ‚Ñ§+ pos n ‚â°‚ü® l ‚ü©
      negsucc x ‚Ñ§* pos 1 ‚àé




