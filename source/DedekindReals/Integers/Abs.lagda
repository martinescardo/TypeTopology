Andrew Sneap, 26 November 2021

In this file I define absolute values of integers and some properties
of abs, along with positive and negative properties of integers.

\begin{code}

{-# OPTIONS --without-K --exact-split --safe #-}

open import MLTT.Spartan renaming (_+_ to _‚àî_) 

open import TypeTopology.DiscreteAndSeparated 
open import Naturals.Properties 
open import UF.Miscelanea 
open import UF.Subsingletons 

open import Naturals.Multiplication renaming (_*_ to _‚Ñï*_)
open import DedekindReals.Integers.Multiplication
open import DedekindReals.Integers.Negation
open import DedekindReals.Integers.Addition
open import DedekindReals.Integers.Integers

module DedekindReals.Integers.Abs where

abs‚Ñ§ : ‚Ñ§ ‚Üí ‚Ñ§
abs‚Ñ§ (pos x)     = pos x
abs‚Ñ§ (negsucc x) = pos (succ x)

abs-removes-neg-sign : (x : ‚Ñ§) ‚Üí abs x Ôºù abs (- x)
abs-removes-neg-sign (pos zero)     = refl
abs-removes-neg-sign (pos (succ x)) = refl
abs-removes-neg-sign (negsucc x)    = refl

abs‚Ñ§-removes-neg-sign : (x : ‚Ñ§) ‚Üí abs‚Ñ§ x Ôºù abs‚Ñ§ (- x)
abs‚Ñ§-removes-neg-sign (pos zero)     = refl
abs‚Ñ§-removes-neg-sign (pos (succ x)) = refl
abs‚Ñ§-removes-neg-sign (negsucc x)    = refl

abs-over-mult : (a b : ‚Ñ§) ‚Üí abs (a * b) Ôºù abs a ‚Ñï* abs b
abs-over-mult (pos x) (pos b) = I
 where
  I : abs (pos x * pos b) Ôºù abs (pos x) ‚Ñï* abs (pos b)
  I = abs (pos x * pos b)        Ôºù‚ü® ap abs (pos-multiplication-equiv-to-‚Ñï x b) ‚ü©
      abs (pos (x ‚Ñï* b))         Ôºù‚ü® refl ‚ü©
      abs (pos x) ‚Ñï* abs (pos b) ‚àé
abs-over-mult (pos zero) (negsucc b) = I
 where
  I : abs (pos zero * negsucc b) Ôºù abs (pos zero) ‚Ñï* abs (negsucc b)
  I = abs (pos zero * negsucc b) Ôºù‚ü® ap abs (‚Ñ§-zero-left-base (negsucc b)) ‚ü©
      abs (pos 0)                Ôºù‚ü® zero-left-base (abs (negsucc b)) ‚Åª¬π ‚ü©
      abs (pos zero) ‚Ñï* abs (negsucc b) ‚àé
abs-over-mult (pos (succ x)) (negsucc b) = I
 where
  I : abs (pos (succ x) * negsucc b) Ôºù abs (pos (succ x)) ‚Ñï* abs (negsucc b)
  I = abs (pos (succ x) * negsucc b)           Ôºù‚ü® ap abs (subtraction-dist-over-mult (pos (succ x)) (pos (succ b))) ‚ü©
      abs (- ((pos (succ x) * pos (succ b))))  Ôºù‚ü® ap (Œª z ‚Üí (abs (- z))) (pos-multiplication-equiv-to-‚Ñï (succ x) (succ b)) ‚ü©
      abs (- pos (succ x ‚Ñï* succ b))           Ôºù‚ü® abs-removes-neg-sign ( pos (succ x ‚Ñï* succ b)) ‚Åª¬π ‚ü©
      abs (pos (succ x ‚Ñï* succ b))             Ôºù‚ü® refl ‚ü©
      succ x ‚Ñï* succ b                         Ôºù‚ü® refl ‚ü©
      abs (pos (succ x)) ‚Ñï* abs (negsucc b)    ‚àé
abs-over-mult (negsucc x) (pos b) = I
 where
  I : abs (negsucc x * pos b) Ôºù abs (negsucc x) ‚Ñï* abs (pos b)
  I = abs (negsucc x * pos b)        Ôºù‚ü® ap abs (subtraction-dist-over-mult' (pos (succ x)) (pos b)) ‚ü©
      abs (- pos (succ x) * pos b)   Ôºù‚ü® ap (Œª z ‚Üí abs (- z)) (pos-multiplication-equiv-to-‚Ñï (succ x) b) ‚ü©
      abs (- pos (succ x ‚Ñï* b))      Ôºù‚ü® abs-removes-neg-sign (pos (succ x ‚Ñï* b)) ‚Åª¬π ‚ü©
      (succ x) ‚Ñï* b                  Ôºù‚ü® refl ‚ü©
      abs (negsucc x) ‚Ñï* abs (pos b) ‚àé
abs-over-mult (negsucc x) (negsucc b) = I
 where
  I : abs (negsucc x * negsucc b) Ôºù abs (negsucc x) ‚Ñï* abs (negsucc b)
  I = abs (negsucc x * negsucc b)               Ôºù‚ü® ap abs (subtraction-dist-over-mult (negsucc x) (pos (succ b))) ‚ü©
      abs (- negsucc x * pos (succ b) )         Ôºù‚ü® ap (Œª z ‚Üí abs (- z)) (subtraction-dist-over-mult' (pos (succ x)) (pos (succ b))) ‚ü©
      abs (- (- pos (succ x) * pos (succ b)))   Ôºù‚ü® ap abs (minus-minus-is-plus (pos (succ x) * pos (succ b))) ‚ü©
      abs (pos (succ x) * pos (succ b))         Ôºù‚ü® ap abs (pos-multiplication-equiv-to-‚Ñï (succ x) (succ b)) ‚ü©
      (succ x) ‚Ñï* (succ b)                      Ôºù‚ü® refl ‚ü©
      abs (negsucc x) ‚Ñï* abs (negsucc b)       ‚àé

pos-abs-is-equal : (x : ‚Ñï) ‚Üí abs‚Ñ§ (pos x) Ôºù pos x
pos-abs-is-equal x = refl

abs-over-mult' : (x y : ‚Ñ§) ‚Üí abs‚Ñ§ (x * y) Ôºù abs‚Ñ§ x * abs‚Ñ§ y
abs-over-mult' (pos x) (pos y) = I
 where
  I : abs‚Ñ§ (pos x * pos y) Ôºù abs‚Ñ§ (pos x) * abs‚Ñ§ (pos y)
  I = abs‚Ñ§ (pos x * pos y) Ôºù‚ü® ap abs‚Ñ§ (pos-multiplication-equiv-to-‚Ñï x y) ‚ü©
      abs‚Ñ§ (pos (x ‚Ñï* y))  Ôºù‚ü® by-definition ‚ü©
      pos (x ‚Ñï* y)         Ôºù‚ü® pos-multiplication-equiv-to-‚Ñï x y ‚Åª¬π ‚ü©
      pos x * pos y        Ôºù‚ü® by-definition ‚ü©
      abs‚Ñ§ (pos x) * abs‚Ñ§ (pos y) ‚àé
abs-over-mult' (pos x) (negsucc y) = I
 where
  I : abs‚Ñ§ (pos x * negsucc y) Ôºù abs‚Ñ§ (pos x) * abs‚Ñ§ (negsucc y)
  I = abs‚Ñ§ (pos x * negsucc y)        Ôºù‚ü® ap abs‚Ñ§ (subtraction-dist-over-mult (pos x) (pos (succ y))) ‚ü©
      abs‚Ñ§ (- pos x * pos (succ y))   Ôºù‚ü® ap (Œª z ‚Üí abs‚Ñ§ (- z)) (pos-multiplication-equiv-to-‚Ñï x (succ y)) ‚ü©
      abs‚Ñ§ (- pos (x ‚Ñï* succ y))      Ôºù‚ü® abs‚Ñ§-removes-neg-sign (pos (x ‚Ñï* succ y)) ‚Åª¬π ‚ü©
      abs‚Ñ§ (pos (x ‚Ñï* succ y))        Ôºù‚ü® by-definition ‚ü©
      pos (x ‚Ñï* succ y)               Ôºù‚ü® pos-multiplication-equiv-to-‚Ñï x (succ y) ‚Åª¬π ‚ü©
      pos x * pos (succ y)            Ôºù‚ü® by-definition ‚ü©
      abs‚Ñ§ (pos x) * abs‚Ñ§ (negsucc y) ‚àé
abs-over-mult' (negsucc x) (pos y) = I
 where
  I : abs‚Ñ§ (negsucc x * pos y) Ôºù abs‚Ñ§ (negsucc x) * abs‚Ñ§ (pos y)
  I = abs‚Ñ§ (negsucc x * pos y)      Ôºù‚ü® ap abs‚Ñ§ (‚Ñ§*-comm (negsucc x) (pos y)) ‚ü©
      abs‚Ñ§ (pos y * negsucc x)      Ôºù‚ü® ap abs‚Ñ§ (subtraction-dist-over-mult (pos y) (pos (succ x))) ‚ü©
      abs‚Ñ§ (- pos y * pos (succ x)) Ôºù‚ü® ap (Œª z ‚Üí abs‚Ñ§ (- z)) (pos-multiplication-equiv-to-‚Ñï y (succ x)) ‚ü©
      abs‚Ñ§ (- pos (y ‚Ñï* succ x))    Ôºù‚ü® abs‚Ñ§-removes-neg-sign (pos (y ‚Ñï* succ x)) ‚Åª¬π ‚ü©
      abs‚Ñ§ (pos (y ‚Ñï* succ x))      Ôºù‚ü® by-definition ‚ü©
      pos (y ‚Ñï* succ x)             Ôºù‚ü® pos-multiplication-equiv-to-‚Ñï y (succ x) ‚Åª¬π ‚ü©
      pos y * pos (succ x)          Ôºù‚ü® ‚Ñ§*-comm (pos y) (pos (succ x)) ‚ü©
      pos (succ x) * pos y          Ôºù‚ü® by-definition ‚ü© 
      abs‚Ñ§ (negsucc x) * abs‚Ñ§ (pos y) ‚àé
abs-over-mult' (negsucc x) (negsucc y) = I
 where
  I : abs‚Ñ§ (negsucc x * negsucc y) Ôºù abs‚Ñ§ (negsucc x) * abs‚Ñ§ (negsucc y)
  I = abs‚Ñ§ (negsucc x * negsucc y)        Ôºù‚ü® ap abs‚Ñ§ (minus-times-minus-is-positive (pos (succ x)) (pos (succ y))) ‚ü©
      abs‚Ñ§ (pos (succ x) * pos (succ y))  Ôºù‚ü® ap abs‚Ñ§ (pos-multiplication-equiv-to-‚Ñï (succ x) (succ y)) ‚ü©
      abs‚Ñ§ (pos (succ x ‚Ñï* succ y))       Ôºù‚ü® by-definition ‚ü©
      pos (succ x ‚Ñï* succ y)              Ôºù‚ü® pos-multiplication-equiv-to-‚Ñï (succ x) (succ y) ‚Åª¬π ‚ü©
      pos (succ x) * pos (succ y)         Ôºù‚ü® by-definition ‚ü©
      abs‚Ñ§ (negsucc x) * abs‚Ñ§ (negsucc y) ‚àé

gtz‚ÇÄ : (x : ‚Ñ§) ‚Üí (y : ‚Ñï) ‚Üí is-pos-succ x ‚Üí is-pos-succ (pos y) ‚Üí is-pos-succ (x + (pos y))
gtz‚ÇÄ x = induction base step
 where
  base : is-pos-succ x
       ‚Üí is-pos-succ (pos 0)
       ‚Üí is-pos-succ (x + pos 0)
  base l r = ùüò-elim r

  step : (k : ‚Ñï)
       ‚Üí (is-pos-succ x ‚Üí is-pos-succ (pos k) ‚Üí is-pos-succ (x + pos k))
       ‚Üí is-pos-succ x
       ‚Üí is-pos-succ (pos (succ k))
       ‚Üí is-pos-succ (x + pos (succ k))
  step 0        IH l r = is-pos-succ-succ‚Ñ§ x l
  step (succ k) IH l r = is-pos-succ-succ‚Ñ§ (x + pos (succ k)) (IH l r)

is-pos-succ-trans : (x y : ‚Ñ§) ‚Üí is-pos-succ x ‚Üí is-pos-succ y ‚Üí is-pos-succ (x + y)
is-pos-succ-trans x (pos y)         = gtz‚ÇÄ x y
is-pos-succ-trans x (negsucc y) l r = ùüò-elim r

gtzmt‚ÇÄ : (x : ‚Ñ§) ‚Üí (y : ‚Ñï) ‚Üí is-pos-succ x ‚Üí is-pos-succ (pos y) ‚Üí is-pos-succ (x * pos y)
gtzmt‚ÇÄ x = induction base step
 where
  base : is-pos-succ x ‚Üí is-pos-succ (pos 0) ‚Üí is-pos-succ (x * pos 0)
  base l r = ùüò-elim r

  step : (k : ‚Ñï)
       ‚Üí (is-pos-succ x ‚Üí is-pos-succ (pos k) ‚Üí is-pos-succ (x * pos k))
       ‚Üí is-pos-succ x
       ‚Üí is-pos-succ (pos (succ k))
       ‚Üí is-pos-succ (x * pos (succ k))
  step zero IH l r = l
  step (succ k) IH l r = is-pos-succ-trans x (x * pos (succ k)) l (IH l r)

is-pos-succ-mult-trans : (x y : ‚Ñ§) ‚Üí is-pos-succ x ‚Üí is-pos-succ y ‚Üí is-pos-succ (x * y)
is-pos-succ-mult-trans x (negsucc y) l r = ùüò-elim r
is-pos-succ-mult-trans x (pos y)     l r = gtzmt‚ÇÄ x y l r

{-
‚Ñ§-not-equal-to-succ : (x : ‚Ñ§) ‚Üí ¬¨ (x Ôºù succ‚Ñ§ x)
‚Ñ§-not-equal-to-succ = ‚Ñ§-induction base step‚ÇÅ step‚ÇÇ
 where
  base : ¬¨ (pos 0 Ôºù succ‚Ñ§ (pos 0))
  base e = pos-int-not-zero 0 (e ‚Åª¬π)
  step‚ÇÅ : (k : ‚Ñ§) ‚Üí ¬¨ (k Ôºù succ‚Ñ§ k) ‚Üí ¬¨ (succ‚Ñ§ k Ôºù succ‚Ñ§ (succ‚Ñ§ k))
  step‚ÇÅ k IH e = IH II
   where
    I : pred‚Ñ§ (succ‚Ñ§ k) Ôºù pred‚Ñ§ (succ‚Ñ§ (succ‚Ñ§ k))
    I = ap pred‚Ñ§ e
    II : k Ôºù succ‚Ñ§ k
    II = k                       Ôºù‚ü® predsucc‚Ñ§ k ‚Åª¬π ‚ü©
         pred‚Ñ§ (succ‚Ñ§ k)         Ôºù‚ü® I ‚ü©
         pred‚Ñ§ (succ‚Ñ§ (succ‚Ñ§ k)) Ôºù‚ü® predsucc‚Ñ§ (succ‚Ñ§ k) ‚ü©
         succ‚Ñ§ k ‚àé
  step‚ÇÇ : (k : ‚Ñ§) ‚Üí ¬¨ (succ‚Ñ§ k Ôºù succ‚Ñ§ (succ‚Ñ§ k)) ‚Üí ¬¨ (k Ôºù succ‚Ñ§ k)
  step‚ÇÇ k IH e = IH (ap succ‚Ñ§ e)
-}
