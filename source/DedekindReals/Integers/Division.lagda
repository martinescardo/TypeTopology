Andrew Sneap, 27 April 2021

\begin{code}

{-# OPTIONS --without-K --exact-split --safe #-}

open import MLTT.Spartan renaming (_+_ to _‚àî_) 

open import Naturals.Addition renaming (_+_ to _‚Ñï+_) 
open import Naturals.Properties 
open import Naturals.Order 
open import Notation.Order 
open import UF.Base 
open import UF.Subsingletons 

open import DedekindReals.Integers.Addition
open import DedekindReals.Integers.Integers
open import DedekindReals.Integers.Abs
open import DedekindReals.Integers.Negation
open import DedekindReals.Integers.Order
open import DedekindReals.Integers.Multiplication renaming (_*_ to _‚Ñ§*_) 
open import Naturals.Division renaming (_‚à£_ to _‚Ñï‚à£_)
open import Naturals.Multiplication renaming (_*_ to _‚Ñï*_)

module DedekindReals.Integers.Division where

ppnnp-lemma : (a b : ‚Ñï) ‚Üí Œ£ c Íûâ ‚Ñï , negsucc a + negsucc b Ôºù negsucc c
ppnnp-lemma a = induction base step
 where
  base : Œ£ c Íûâ ‚Ñï , negsucc a + negsucc 0 Ôºù negsucc c
  base = succ a , refl

  step : (k : ‚Ñï) ‚Üí Œ£ c Íûâ ‚Ñï , negsucc a + negsucc k Ôºù negsucc c
                 ‚Üí Œ£ c Íûâ ‚Ñï , negsucc a + negsucc (succ k) Ôºù negsucc c
  step k (c , IH) = succ c , ap pred‚Ñ§ IH

product-positive-negative-not-positive : (a b c : ‚Ñï) ‚Üí ¬¨ (pos a ‚Ñ§* negsucc b Ôºù pos (succ c))
product-positive-negative-not-positive 0 0 c e        = ùüò-elim (positive-not-zero c (pos-lc e ‚Åª¬π))
product-positive-negative-not-positive 0 (succ b) c e = ùüò-elim (positive-not-zero c (pos-lc I ‚Åª¬π))
 where
  I : pos 0 Ôºù pos (succ c)
  I = pos 0                     Ôºù‚ü® ‚Ñ§-zero-left-base (negsucc (succ b)) ‚Åª¬π ‚ü©
      pos 0 ‚Ñ§* negsucc (succ b) Ôºù‚ü® e                                         ‚ü©
      pos (succ c)              ‚àé
product-positive-negative-not-positive (succ a) (succ b) c e‚ÇÅ = I (pos-mult-is-succ a b)
  where
   I : ¬¨ (Œ£ z Íûâ ‚Ñï , succ z Ôºù succ a ‚Ñï* succ b)
   I (z , e‚ÇÇ) = II (ppnnp-lemma a z)
    where
     II : ¬¨ (Œ£ d Íûâ ‚Ñï , negsucc a + negsucc z Ôºù negsucc d)
     II (d , e‚ÇÉ) = negsucc-not-pos IV
      where
       III : negsucc z Ôºù pos (succ a) ‚Ñ§* negsucc b
       III = negsucc z                      Ôºù‚ü® refl                                                        ‚ü©
             - pos (succ z)                 Ôºù‚ü® ap (Œª Œ± ‚Üí -_ (pos Œ±)) e‚ÇÇ                                    ‚ü©
             - pos (succ a ‚Ñï* succ b)       Ôºù‚ü® ap -_ (pos-multiplication-equiv-to-‚Ñï (succ a) (succ b)) ‚Åª¬π  ‚ü©
             - pos (succ a) ‚Ñ§* pos (succ b) Ôºù‚ü® subtraction-dist-over-mult (pos (succ a)) (pos (succ b)) ‚Åª¬π ‚ü©
             pos (succ a) ‚Ñ§* negsucc b      ‚àé
       IV : negsucc d Ôºù pos (succ c)
       IV = negsucc d                                 Ôºù‚ü® e‚ÇÉ ‚Åª¬π                 ‚ü©
            negsucc a + negsucc z                     Ôºù‚ü® ap (negsucc a +_) III ‚ü©
            negsucc a + pos (succ a) ‚Ñ§* negsucc b     Ôºù‚ü® refl                  ‚ü©
            pos (succ a) ‚Ñ§* negsucc (succ b)          Ôºù‚ü® e‚ÇÅ                    ‚ü©
            pos (succ c)                              ‚àé

_‚à£_ : ‚Ñ§ ‚Üí ‚Ñ§ ‚Üí ùì§‚ÇÄ Ãá
a ‚à£ b = Œ£ x Íûâ ‚Ñ§ , a ‚Ñ§* x Ôºù b

_‚Ñ§‚à£_-is-prop : (a b : ‚Ñ§) ‚Üí not-zero a ‚Üí is-prop (a ‚à£ b)
_‚Ñ§‚à£_-is-prop a b nz (x , p) (x' , p') = to-subtype-Ôºù (Œª _ ‚Üí ‚Ñ§-is-set) II
 where
  I : x ‚Ñ§* a Ôºù x' ‚Ñ§* a
  I = x ‚Ñ§* a   Ôºù‚ü® ‚Ñ§*-comm x a  ‚ü©
      a ‚Ñ§* x   Ôºù‚ü® p            ‚ü©
      b        Ôºù‚ü® p' ‚Åª¬π        ‚ü©
      a ‚Ñ§* x'  Ôºù‚ü® ‚Ñ§*-comm a x' ‚ü©
      x' ‚Ñ§* a  ‚àé
 
  II : x Ôºù x'
  II = ‚Ñ§-mult-right-cancellable x x' a nz I

div-equiv-to-pos-div : (a b : ‚Ñï) ‚Üí a ‚Ñï‚à£ b ‚Üí pos a ‚à£ pos b
div-equiv-to-pos-div a b (x , p) = pos x , goal
 where
  goal : pos a ‚Ñ§* pos x Ôºù pos b
  goal = pos a ‚Ñ§* pos x Ôºù‚ü® pos-multiplication-equiv-to-‚Ñï a x ‚ü©
         pos (a ‚Ñï* x)   Ôºù‚ü® ap pos p                          ‚ü©
         pos b          ‚àé

sign-split : (x : ‚Ñ§) ‚Üí positive x ‚àî negative x
sign-split (pos x)     = inl ‚ãÜ
sign-split (negsucc x) = inr ‚ãÜ

pos-div-to-nat-div : (a b : ‚Ñï) ‚Üí pos a ‚à£ pos b ‚Üí a ‚Ñï‚à£ b
pos-div-to-nat-div a b (pos x , p) = x , pos-lc I
 where
  I : pos (a ‚Ñï* x) Ôºù pos b
  I = pos (a ‚Ñï* x)   Ôºù‚ü® pos-multiplication-equiv-to-‚Ñï a x ‚Åª¬π ‚ü©
      pos a ‚Ñ§* pos x Ôºù‚ü® p                                    ‚ü©
      pos b          ‚àé
pos-div-to-nat-div a 0 (negsucc x , p) = 0 , refl
pos-div-to-nat-div 0 (succ b) (negsucc x , p) = ùüò-elim (positive-not-zero b (pos-lc I))
 where
  I : pos (succ b) Ôºù pos 0
  I = pos (succ b)        Ôºù‚ü® p ‚Åª¬π                            ‚ü©
      pos 0 ‚Ñ§* negsucc x  Ôºù‚ü® ‚Ñ§-zero-left-base (negsucc x) ‚ü©
      pos 0 ‚àé
pos-div-to-nat-div (succ a) (succ b) (negsucc x , p) = ùüò-elim (product-positive-negative-not-positive (succ a) x b p)

‚Ñ§-division : (a : ‚Ñ§) ‚Üí (d : ‚Ñï) ‚Üí Œ£ q Íûâ ‚Ñ§ , Œ£ r Íûâ ‚Ñï , (a Ôºù q ‚Ñ§* pos (succ d) + pos r) √ó r < succ d
‚Ñ§-division (pos a) d = f (division a d)
 where
  f : Œ£ q Íûâ ‚Ñï , Œ£ r Íûâ ‚Ñï , (a Ôºù q ‚Ñï* succ d ‚Ñï+ r) √ó r < succ d
    ‚Üí Œ£ q Íûâ ‚Ñ§ , Œ£ r Íûâ ‚Ñï , (pos a Ôºù q ‚Ñ§* pos (succ d) + pos r) √ó r < succ d
  f (q , r , e , l) = (pos q) , r , I , l
   where
    I : pos a Ôºù pos q ‚Ñ§* pos (succ d) + pos r
    I = pos a                         Ôºù‚ü® ap pos e                                                    ‚ü©
        pos (q ‚Ñï* succ d ‚Ñï+ r)        Ôºù‚ü® distributivity-pos-addition (q ‚Ñï* (succ d)) r ‚Åª¬π                ‚ü©
        pos (q ‚Ñï* succ d) + pos r     Ôºù‚ü® ap (_+ pos r) (pos-multiplication-equiv-to-‚Ñï q (succ d) ‚Åª¬π) ‚ü©
        pos q ‚Ñ§* pos (succ d) + pos r ‚àé
‚Ñ§-division (negsucc a) d = f (division (succ a) d)
 where
  f : Œ£ q Íûâ ‚Ñï , Œ£ r Íûâ ‚Ñï , (succ a Ôºù q ‚Ñï* succ d ‚Ñï+ r) √ó r < succ d
    ‚Üí Œ£ q Íûâ ‚Ñ§ , Œ£ r Íûâ ‚Ñï , (negsucc a Ôºù q ‚Ñ§* pos (succ d) + pos r) √ó r < succ d
  f (0 , 0 , e , l) = ùüò-elim (positive-not-zero a I)
   where
    I : succ a Ôºù 0
    I = succ a           Ôºù‚ü® e                          ‚ü©
        0 ‚Ñï* succ d ‚Ñï+ 0 Ôºù‚ü® zero-left-base (succ d) ‚ü©
        0                ‚àé
  f (succ q , 0 , e , l) = negsucc q , 0 , I , l
   where
    I : negsucc a Ôºù negsucc q ‚Ñ§* pos (succ d)
    I = negsucc a                        Ôºù‚ü® refl                                                         ‚ü©
        - pos (succ a)                   Ôºù‚ü® ap -_ (ap pos e)                                             ‚ü©
        - pos (succ q ‚Ñï* succ d)         Ôºù‚ü® ap -_ (pos-multiplication-equiv-to-‚Ñï (succ q) (succ d) ‚Åª¬π)   ‚ü©
        - pos (succ q) ‚Ñ§* pos (succ d)   Ôºù‚ü® subtraction-dist-over-mult' (pos (succ q)) (pos (succ d)) ‚Åª¬π ‚ü©
        (- pos (succ q)) ‚Ñ§* pos (succ d) Ôºù‚ü® refl                                                         ‚ü©
        negsucc q ‚Ñ§* pos (succ d)        ‚àé
  f (0 , succ r , e‚ÇÅ , l‚ÇÅ) = negsucc 0 , I (subtraction' (succ r) (succ d) l‚ÇÅ)
   where
    I : Œ£ k Íûâ ‚Ñï , k ‚Ñï+ succ r Ôºù succ d
      ‚Üí Œ£ r Íûâ ‚Ñï , (negsucc a Ôºù negsucc 0 ‚Ñ§* pos (succ d) + pos r) √ó r < succ d
    I (k , e‚ÇÇ) = k , III (cosubtraction k d (r , succ-lc II))
     where
      II : succ (r ‚Ñï+ k) Ôºù succ d
      II = succ (r ‚Ñï+ k) Ôºù‚ü® ap succ (addition-commutativity r k) ‚ü©
           succ (k ‚Ñï+ r) Ôºù‚ü® e‚ÇÇ                                   ‚ü©
           succ d        ‚àé
      III : k < succ d ‚Üí (negsucc a Ôºù negsucc 0 ‚Ñ§* pos (succ d) + pos k) √ó k < succ d
      III l‚ÇÇ = V , l‚ÇÇ
       where
        IV : succ a Ôºù succ r
        IV = succ a                Ôºù‚ü® e‚ÇÅ                                                ‚ü©
             0 ‚Ñï* succ d ‚Ñï+ succ r Ôºù‚ü® ap succ (ap (_‚Ñï+ r) (zero-left-base (succ d))) ‚ü©
             succ (0 ‚Ñï+ r)         Ôºù‚ü® ap succ (zero-left-neutral r)                     ‚ü©
             succ r                ‚àé
     
        V : negsucc a Ôºù negsucc 0 ‚Ñ§* pos (succ d) + pos k
        V = negsucc a                                              Ôºù‚ü® ap negsucc (succ-lc IV)                                                            ‚ü©
            negsucc r                                              Ôºù‚ü® ‚Ñ§-zero-left-neutral (negsucc r) ‚Åª¬π                                                 ‚ü©
            pos 0 + negsucc r                                      Ôºù‚ü® ap (_+ (negsucc r)) (‚Ñ§-sum-of-inverse-is-zero (pos k) ‚Åª¬π)                          ‚ü©
            pos k + (- pos k) + negsucc r                          Ôºù‚ü® ‚Ñ§+-assoc (pos k) (- pos k) (negsucc r)                                             ‚ü©
            pos k + ((- pos k) + negsucc r)                        Ôºù‚ü® ‚Ñ§+-comm (pos k) ((- pos k) + negsucc r)                                            ‚ü©
            (- pos k) + negsucc r + pos k                          Ôºù‚ü® ap (Œª z ‚Üí (z + negsucc r) + pos k) (mult-inverse (pos k))                          ‚ü©
            negsucc 0 ‚Ñ§* pos k + (- pos (succ r)) + pos k          Ôºù‚ü® ap (Œª z ‚Üí  (negsucc 0 ‚Ñ§* pos k + z) + pos k) (mult-inverse (pos (succ r)))         ‚ü©
            negsucc 0 ‚Ñ§* pos k + negsucc 0 ‚Ñ§* pos (succ r) + pos k Ôºù‚ü® ap (_+ pos k) (distributivity-mult-over-‚Ñ§' (pos k) (pos (succ r)) (negsucc 0) ‚Åª¬π)  ‚ü©
            negsucc 0 ‚Ñ§* (pos k + pos (succ r)) + pos k            Ôºù‚ü® ap (Œª z ‚Üí negsucc 0 ‚Ñ§* z + pos k) (distributivity-pos-addition k (succ r))             ‚ü©
            negsucc 0 ‚Ñ§* pos (k ‚Ñï+ succ r) + pos k                 Ôºù‚ü® ap (Œª z ‚Üí negsucc 0 ‚Ñ§* pos z + pos k) e‚ÇÇ                                           ‚ü©
            negsucc 0 ‚Ñ§* pos (succ d) + pos k                      ‚àé
 
  f (succ q , succ r , e‚ÇÅ , l‚ÇÅ) = negsucc (succ q) , I (subtraction' (succ r) (succ d) l‚ÇÅ)
   where
    I : Œ£ k Íûâ ‚Ñï , k ‚Ñï+ succ r Ôºù succ d
      ‚Üí Œ£ r Íûâ ‚Ñï , (negsucc a Ôºù negsucc (succ q) ‚Ñ§* pos (succ d) + pos r) √ó r < succ d
    I (k , e‚ÇÇ) =  k , III (cosubtraction k d (r , succ-lc II))
     where
      II : succ (r ‚Ñï+ k) Ôºù succ d
      II = succ (r ‚Ñï+ k) Ôºù‚ü® ap succ (addition-commutativity r k) ‚ü©
           succ (k ‚Ñï+ r) Ôºù‚ü® e‚ÇÇ                                   ‚ü©
           succ d        ‚àé
      III : k < succ d ‚Üí (negsucc a Ôºù negsucc (succ q) ‚Ñ§* pos (succ d) + pos k) √ó k < (succ d)
      III l‚ÇÇ = V , l‚ÇÇ
       where
        IV : - pos (succ r) Ôºù pos k - pos (succ d)
        IV = - pos (succ r)                     Ôºù‚ü® refl                                                      ‚ü©
             negsucc r                          Ôºù‚ü® ‚Ñ§-zero-left-neutral (negsucc r) ‚Åª¬π                        ‚ü©
             pos 0 + negsucc r                  Ôºù‚ü® ap (_+  negsucc r) (‚Ñ§-sum-of-inverse-is-zero (pos k) ‚Åª¬π)  ‚ü©
             pos k + (- pos k) + negsucc r      Ôºù‚ü® ‚Ñ§+-assoc (pos k) (- pos k) (negsucc r)                    ‚ü©
             pos k + ((- pos k) - pos (succ r)) Ôºù‚ü® ap (pos k +_) (negation-dist (pos k) (pos (succ r)))      ‚ü©
             pos k - (pos k + pos (succ r))     Ôºù‚ü® ap (Œª z ‚Üí pos k - z) (distributivity-pos-addition k (succ r)) ‚ü©
             pos k - pos (k ‚Ñï+ succ r)          Ôºù‚ü® ap (Œª z ‚Üí pos k - pos z) e‚ÇÇ ‚ü©
             pos k - pos (succ d)               ‚àé
        V : negsucc a Ôºù negsucc (succ q) ‚Ñ§* pos (succ d) + pos k
        V = negsucc a                                                          Ôºù‚ü® refl               ‚ü©
            - pos (succ a)                                                     Ôºù‚ü® ap -_ (ap pos e‚ÇÅ)  ‚ü©
            - pos (succ q ‚Ñï* succ d ‚Ñï+ succ r)                                 Ôºù‚ü® i                  ‚ü©
            - (pos (succ q ‚Ñï* succ d) + pos (succ r))                          Ôºù‚ü® ii                 ‚ü©
            (- pos (succ q ‚Ñï* succ d)) - pos (succ r)                          Ôºù‚ü® iii                ‚ü©
            (- pos (succ q) ‚Ñ§* pos (succ d)) - pos (succ r)                    Ôºù‚ü® iv                 ‚ü©
            (- pos (succ q) ‚Ñ§* pos (succ d)) + (pos k - pos (succ d))          Ôºù‚ü® v                  ‚ü©
            (- pos (succ q) ‚Ñ§* pos (succ d)) - pos (succ d) + pos k            Ôºù‚ü® vi                 ‚ü©
            (- pos (succ d) ‚Ñ§* pos (succ q)) - pos (succ d) + pos k            Ôºù‚ü® vii                ‚ü©             
            (- pos (succ d)) ‚Ñ§* pos (succ q) - pos (succ d) + pos k            Ôºù‚ü® viii               ‚ü©
            (- pos (succ d)) ‚Ñ§* pos (succ q) - pos (succ d) ‚Ñ§* pos 1 + pos k   Ôºù‚ü® ix                 ‚ü©
            (- pos (succ d)) ‚Ñ§* (pos (succ q) + pos 1) + pos k                 Ôºù‚ü® refl               ‚ü©
            (- pos (succ d)) ‚Ñ§* pos (succ (succ q)) + pos k                    Ôºù‚ü® x                  ‚ü©
            (- pos (succ d) ‚Ñ§* pos (succ (succ q))) + pos k                    Ôºù‚ü® xi                 ‚ü©
            (- pos (succ (succ q)) ‚Ñ§* pos (succ d)) + pos k                    Ôºù‚ü® xii                ‚ü©
            negsucc (succ q) ‚Ñ§* pos (succ d) + pos k                           ‚àé
             where
              i    = ap -_ (distributivity-pos-addition (succ q ‚Ñï* (succ d)) (succ r) ‚Åª¬π)
              ii   = negation-dist (pos (succ q ‚Ñï* succ d)) (pos (succ r)) ‚Åª¬π
              iii  = ap (Œª z ‚Üí (- z) - pos (succ r)) (pos-multiplication-equiv-to-‚Ñï (succ q) (succ d) ‚Åª¬π)
              iv   = ap ((- pos (succ q) ‚Ñ§* pos (succ d)) +_) IV
              v    = ‚Ñ§+-rearrangement (- (pos (succ q) ‚Ñ§* pos (succ d))) (pos k) (- pos (succ d)) ‚Åª¬π
              vi   = ap (Œª z ‚Üí ((- z) + (- pos (succ d))) + pos k) (‚Ñ§*-comm (pos (succ q)) (pos (succ d)))
              vii  = ap (Œª z ‚Üí (z + (- pos (succ d))) + pos k) (subtraction-dist-over-mult' (pos (succ d)) (pos (succ q)) ‚Åª¬π)
              viii = ap (Œª z ‚Üí ((- pos (succ d)) ‚Ñ§* pos (succ q) + z) + pos k) (‚Ñ§-mult-right-id (- pos (succ d))) ‚Åª¬π
              ix   = ap (_+ pos k) (distributivity-mult-over-‚Ñ§' (pos (succ q)) (pos 1) (- pos (succ d)) ‚Åª¬π)
              x    = ap (_+ pos k) (subtraction-dist-over-mult' (pos (succ d)) (pos (succ (succ q))))
              xi   = ap (Œª z ‚Üí (- z) + pos k) (‚Ñ§*-comm (pos (succ d)) (pos (succ (succ q))))
              xii  = ap (_+ pos k) (subtraction-dist-over-mult' (pos (succ (succ q))) (pos (succ d)) ‚Åª¬π)

‚Ñ§-‚à£-respects-addition : (x y z : ‚Ñ§) ‚Üí x ‚à£ y ‚Üí x ‚à£ z ‚Üí x ‚à£ y + z
‚Ñ§-‚à£-respects-addition x y z (Œ± , Œ±‚Çö) (Œ≤ , Œ≤‚Çö) = Œ± + Œ≤ , I
 where
  I : x ‚Ñ§* (Œ± + Œ≤) Ôºù y + z
  I = x ‚Ñ§* (Œ± + Œ≤)    Ôºù‚ü® distributivity-mult-over-‚Ñ§' Œ± Œ≤ x ‚ü©
      x ‚Ñ§* Œ± + x ‚Ñ§* Œ≤ Ôºù‚ü® ap‚ÇÇ _+_ Œ±‚Çö Œ≤‚Çö                      ‚ü©  
      y + z           ‚àé

‚Ñ§-‚à£-respects-addition-of-multiples : (x y z k l : ‚Ñ§) ‚Üí x ‚à£ y ‚Üí x ‚à£ z ‚Üí x ‚à£ (y ‚Ñ§* k + z ‚Ñ§* l)
‚Ñ§-‚à£-respects-addition-of-multiples x y z k l (Œ± , Œ±‚Çö) (Œ≤ , Œ≤‚Çö) = Œ± ‚Ñ§* k + Œ≤ ‚Ñ§* l , I
 where
  I : x ‚Ñ§* (Œ± ‚Ñ§* k + Œ≤ ‚Ñ§* l) Ôºù y ‚Ñ§* k + z ‚Ñ§* l
  I = x ‚Ñ§* (Œ± ‚Ñ§* k + Œ≤ ‚Ñ§* l)        Ôºù‚ü® distributivity-mult-over-‚Ñ§' (Œ± ‚Ñ§* k) (Œ≤ ‚Ñ§* l) x ‚ü©
      x ‚Ñ§* (Œ± ‚Ñ§* k) + x ‚Ñ§* (Œ≤ ‚Ñ§* l) Ôºù‚ü® ap‚ÇÇ _+_ (‚Ñ§*-assoc x Œ± k ‚Åª¬π) (‚Ñ§*-assoc x Œ≤ l ‚Åª¬π) ‚ü©
      x ‚Ñ§* Œ± ‚Ñ§* k + x ‚Ñ§* Œ≤ ‚Ñ§* l     Ôºù‚ü® ap‚ÇÇ _+_ (ap (_‚Ñ§* k) Œ±‚Çö) (ap (_‚Ñ§* l) Œ≤‚Çö)          ‚ü©
      y ‚Ñ§* k + z ‚Ñ§* l               ‚àé

\end{code}
