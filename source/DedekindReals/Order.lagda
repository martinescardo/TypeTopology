Andrew Sneap, March 2021
Updated March 2022

In this file I define order of Dedekind Reals, and prove
some key properties.

\begin{code}
{-# OPTIONS --safe --without-K #-}

open import MLTT.Spartan renaming (_+_ to _‚àî_)

open import Notation.CanonicalMap
open import Notation.Order
open import Rationals.Order

open import UF.FunExt
open import UF.PropTrunc
open import UF.Powerset
open import UF.Subsingletons
open import UF.Subsingletons-FunExt

open import Rationals.Type

module DedekindReals.Order
         (fe : Fun-Ext)
         (pe : Prop-Ext)
         (pt : propositional-truncations-exist)
       where

open import DedekindReals.Type fe pe pt
open PropositionalTruncation pt

_<‚Ñù_ : ‚Ñù ‚Üí ‚Ñù ‚Üí ùì§‚ÇÄ Ãá
x <‚Ñù y = ‚àÉ q Íûâ ‚Ñö , (x < q) √ó (q < y)

instance
 Strict-Order-‚Ñù-‚Ñù : Strict-Order ‚Ñù ‚Ñù
 _<_ {{Strict-Order-‚Ñù-‚Ñù}} = _<‚Ñù_

 Strict-Order-Chain-‚Ñù-‚Ñù-‚Ñù : Strict-Order-Chain ‚Ñù ‚Ñù ‚Ñù _<_ _<_
 _<_<_ {{Strict-Order-Chain-‚Ñù-‚Ñù-‚Ñù}} p q r = (p < q) √ó (q < r)

<-is-prop : (x y : ‚Ñù) ‚Üí is-prop (x < y)
<-is-prop x y = ‚àÉ-is-prop

‚Ñù<-trans : (x y z : ‚Ñù) ‚Üí x < y ‚Üí y < z ‚Üí x < z
‚Ñù<-trans x y z x<y y<z = ‚à•‚à•-functor I (binary-choice x<y y<z)
 where
  I : (Œ£ k Íûâ ‚Ñö , x < k < y)
    √ó (Œ£ l Íûâ ‚Ñö , y < l < z)
    ‚Üí  Œ£ m Íûâ ‚Ñö , x < m < z
  I ((k , (x<k , k<y)) , l , (y<l , l<z)) = k , (x<k , k<z)
   where
    k<l : k < l
    k<l = disjoint-from-real y k l (k<y , y<l)
    k<z : k < z
    k<z = rounded-left-c (lower-cut-of z) (rounded-from-real-L z) k l k<l l<z

_‚â§‚Ñù_ : ‚Ñù ‚Üí ‚Ñù ‚Üí ùì§‚ÇÄ Ãá
x ‚â§‚Ñù y = (q : ‚Ñö) ‚Üí q < x ‚Üí q < y

instance
 Order-‚Ñù-‚Ñù : Order ‚Ñù ‚Ñù
 _‚â§_ {{Order-‚Ñù-‚Ñù}} = _‚â§‚Ñù_

‚â§-is-prop : (x y : ‚Ñù) ‚Üí is-prop (x ‚â§ y)
‚â§-is-prop ((Lx , Rx) , isCutx) ((Ly , Ry) , isCuty) = Œ†‚ÇÇ-is-prop fe (Œª q _ ‚Üí ‚àà-is-prop Ly q)

‚Ñù‚â§-trans : (x y z : ‚Ñù) ‚Üí x ‚â§ y ‚Üí y ‚â§ z ‚Üí x ‚â§ z
‚Ñù‚â§-trans ((Lx , Rx) , _) ((Ly , Ry) , _) ((Lz , Rz) , _) f g = Œª q qLx ‚Üí g q (f q qLx)

‚Ñù-archimedean : (x y : ‚Ñù)
              ‚Üí x < y
              ‚Üí ‚àÉ q Íûâ ‚Ñö , (x < q) √ó (q < y)
‚Ñù-archimedean x y l = l

weak-linearity : (x y z : ‚Ñù) ‚Üí x < y ‚Üí (x < z) ‚à® (z < y)
weak-linearity x y z l = ‚à•‚à•-rec ‚à®-is-prop I l
 where
  I : Œ£ q Íûâ ‚Ñö , q > x √ó q < y ‚Üí (x < z) ‚à® (z < y)
  I (q , qRx , qLy) = ‚à•‚à•-rec ‚à®-is-prop II (binary-choice exists-r exists-s)
   where
    exists-r : ‚àÉ r Íûâ ‚Ñö , r < q √ó r > x
    exists-r = rounded-right-b (upper-cut-of x) (rounded-from-real-R x) q qRx
    exists-s : ‚àÉ s Íûâ ‚Ñö , q < s < y
    exists-s = rounded-left-b (lower-cut-of y) (rounded-from-real-L y) q qLy
    II : (Œ£ r Íûâ ‚Ñö , r < q √ó r > x) √ó (Œ£ s Íûâ ‚Ñö , q < s < y) ‚Üí (x < z) ‚à® (z < y)
    II ((r , r<q , rRx) , s , q<s , sLy) = ‚à•‚à•-rec ‚à®-is-prop IV III
     where
      III : (r < z) ‚à® (z < s)
      III = ‚Ñù-locatedness z r s (‚Ñö<-trans r q s r<q q<s)
      IV : (r < z) ‚àî (z < s) ‚Üí (x < z) ‚à® (z < y)
      IV (inl rLz) = ‚à£ inl ‚à£ r , rRx , rLz ‚à£ ‚à£
      IV (inr sRz) = ‚à£ inr ‚à£ s , sRz , sLy ‚à£ ‚à£

weak-linearity' : (x y z : ‚Ñù) ‚Üí x < y ‚Üí (x < z) ‚à® (z < y)
weak-linearity' x y z l = do
 (q , x<q , q<y) ‚Üê l
 (r , r<q , x<r) ‚Üê rounded-right-b (upper-cut-of x) (rounded-from-real-R x) q x<q
 (s , q<s , s<y) ‚Üê rounded-left-b (lower-cut-of y) (rounded-from-real-L y) q q<y
 t               ‚Üê ‚Ñù-locatedness z r s (‚Ñö<-trans r q s r<q q<s)
 Cases t (Œª r<z ‚Üí ‚à£ inl ‚à£ r , x<r , r<z ‚à£ ‚à£)
         (Œª z<s ‚Üí ‚à£ inr ‚à£ s , z<s , s<y ‚à£ ‚à£)

_‚ôØ_ : (x y : ‚Ñù) ‚Üí ùì§‚ÇÄ Ãá
x ‚ôØ y = (x < y) ‚à® (y < x)

apartness-gives-inequality : (x y : ‚Ñù) ‚Üí x ‚ôØ y ‚Üí ¬¨ (x Ôºù y)
apartness-gives-inequality x y apart e = ‚à•‚à•-rec ùüò-is-prop I apart
 where
  I : ¬¨ ((x < y) ‚àî (y < x))
  I (inl l) = ‚à•‚à•-rec ùüò-is-prop III II
   where
    II : x < x
    II = transport (x <_) (e ‚Åª¬π) l
    III : ¬¨ (Œ£ q Íûâ ‚Ñö , (x < q) √ó (q < x))
    III (q , x<q , q<x) = ‚Ñö<-not-itself-from-‚Ñù q x (q<x , x<q)
  I (inr r) = ‚à•‚à•-rec ùüò-is-prop III II
   where
    II : y < y
    II = transport (y <_) e r
    III : ¬¨ (Œ£ p Íûâ ‚Ñö , (p > y) √ó (p < y))
    III (p , y<p , p<y) = ‚Ñö<-not-itself-from-‚Ñù p y (p<y , y<p)

‚Ñù<-‚â§-trans : (x y z : ‚Ñù) ‚Üí x < y ‚Üí y ‚â§ z ‚Üí x < z
‚Ñù<-‚â§-trans x y z x<y y‚â§z = ‚à•‚à•-functor I x<y
 where
  I : Œ£ q Íûâ ‚Ñö , q > x √ó q < y ‚Üí Œ£ q' Íûâ ‚Ñö , q' > x √ó q' < z
  I (q , qRx , qLy) = q , qRx , y‚â§z q qLy

‚Ñù-less-than-or-equal-not-greater : (x y : ‚Ñù) ‚Üí x ‚â§ y ‚Üí ¬¨ (y < x)
‚Ñù-less-than-or-equal-not-greater x y x‚â§y y<x = ‚à•‚à•-rec ùüò-is-prop I y<x
 where
  I : ¬¨ (Œ£ q Íûâ ‚Ñö , y < q < x)
  I (q , y<q , q<x) = ‚Ñö<-not-itself-from-‚Ñù q y (x‚â§y q q<x , y<q)

‚Ñù-less-than-not-greater-or-equal : (x y : ‚Ñù) ‚Üí x < y ‚Üí ¬¨ (y ‚â§ x)
‚Ñù-less-than-not-greater-or-equal x y l‚ÇÅ l‚ÇÇ = ‚Ñù-less-than-or-equal-not-greater y x l‚ÇÇ l‚ÇÅ

‚Ñù-not-less-is-greater-or-equal : (x y : ‚Ñù) ‚Üí ¬¨ (x < y) ‚Üí y ‚â§ x
‚Ñù-not-less-is-greater-or-equal x y nl p pLy = ‚à•‚à•-rec (‚àà-is-prop (lower-cut-of x) p) I (rounded-left-b (lower-cut-of y) (rounded-from-real-L y) p pLy)
 where
  I : Œ£ q Íûâ ‚Ñö , p < q < y ‚Üí p < x
  I (q , l , q<y) = ‚à•‚à•-rec (‚àà-is-prop (lower-cut-of x) p) II (‚Ñù-locatedness x p q l)
   where
    II : p < x ‚àî q > x ‚Üí p < x
    II (inl p<x) = p<x
    II (inr x<q) = ùüò-elim (nl ‚à£ q , (x<q , q<y) ‚à£)

‚Ñù‚â§-<-trans : (x y z : ‚Ñù) ‚Üí x ‚â§ y ‚Üí y < z ‚Üí x < z
‚Ñù‚â§-<-trans x y z x‚â§y y<z = ‚à•‚à•-functor I y<z
 where
  I : Œ£ q Íûâ ‚Ñö , q > y √ó q < z
    ‚Üí Œ£ q' Íûâ ‚Ñö , q' > x √ó q' < z
  I (q , qRy , qLz) = q , ‚à•‚à•-rec (‚àà-is-prop (upper-cut-of x) q) III II , qLz
   where
    II : ‚àÉ k Íûâ ‚Ñö , k < q √ó k > y
    II = rounded-right-b (upper-cut-of y) (rounded-from-real-R y) q qRy

    III : Œ£ k Íûâ ‚Ñö , k < q √ó k > y ‚Üí q > x
    III (k , k<q , kRy) = ‚à•‚à•-rec (‚àà-is-prop (upper-cut-of x) q) IV (‚Ñù-locatedness x k q k<q)
     where
      IV : k < x ‚àî q > x ‚Üí q > x
      IV (inl kLx) = ùüò-elim (‚Ñö<-irrefl k (disjoint-from-real y k k (x‚â§y k kLx , kRy)))
      IV (inr qRx) = qRx

<‚Ñù-irreflexive : (x : ‚Ñù) ‚Üí x ‚âÆ x
<‚Ñù-irreflexive x l = ‚à•‚à•-rec ùüò-is-prop I l
 where
  I : ¬¨ (Œ£ k Íûâ ‚Ñö , x < k < x)
  I (k , x<k , k<x) = ‚Ñö<-not-itself-from-‚Ñù k x (k<x , x<k)

‚Ñù-zero-less-than-one : 0‚Ñù < 1‚Ñù
‚Ñù-zero-less-than-one = ‚à£ 1/2 , 0<1/2 , 1/2<1 ‚à£

‚Ñù-zero-apart-from-one : 0‚Ñù ‚ôØ 1‚Ñù
‚Ñù-zero-apart-from-one = ‚à£ inl ‚Ñù-zero-less-than-one ‚à£

embedding-preserves-order : (p q : ‚Ñö) ‚Üí p < q ‚Üí Œπ p < Œπ q
embedding-preserves-order p q l = I (use-rationals-density)
 where
  use-rationals-density : Œ£ k Íûâ ‚Ñö , p < k < q
  use-rationals-density = ‚Ñö-dense p q l

  I : (Œ£ k Íûâ ‚Ñö , p < k < q) ‚Üí ‚àÉ k Íûâ ‚Ñö , p < k < q
  I (k , p<k , k<q) = ‚à£ k , p<k , k<q ‚à£

\end{code}

Added by Martin Escardo 24th August 2023, adapted from Various.Dedekind.

\begin{code}

‚â§-‚Ñù-‚Ñù-antisym : (x y : ‚Ñù) ‚Üí x ‚â§ y ‚Üí y ‚â§ x ‚Üí x Ôºù y
‚â§-‚Ñù-‚Ñù-antisym = ‚Ñù-equality-from-left-cut'

‚ôØ-is-tight : (x y : ‚Ñù) ‚Üí ¬¨ (x ‚ôØ y) ‚Üí x Ôºù y
‚ôØ-is-tight x y ŒΩ = ‚â§-‚Ñù-‚Ñù-antisym x y III IV
 where
  I : x ‚âÆ y
  I ‚Ñì = ŒΩ ‚à£ inl ‚Ñì ‚à£

  II : y ‚âÆ x
  II ‚Ñì = ŒΩ ‚à£ inr ‚Ñì ‚à£

  III : x ‚â§ y
  III = ‚Ñù-not-less-is-greater-or-equal y x II

  IV : y ‚â§ x
  IV = ‚Ñù-not-less-is-greater-or-equal x y I

‚Ñù-is-¬¨¬¨-separated : (x y : ‚Ñù) ‚Üí ¬¨¬¨ (x Ôºù y) ‚Üí x Ôºù y
‚Ñù-is-¬¨¬¨-separated x y œï = ‚ôØ-is-tight x y (c œï)
 where
  c : ¬¨¬¨ (x Ôºù y) ‚Üí ¬¨ (x ‚ôØ y)
  c = contrapositive (apartness-gives-inequality x y)

\end{code}
