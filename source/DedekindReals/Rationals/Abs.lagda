Andrew Sneap, 10 March 2022

In this file I define the absolute value for rational numbers,
and prove properties of the absolute value.

\begin{code}
{-# OPTIONS --without-K --exact-split --safe #-}

open import MLTT.Spartan renaming (_+_ to _‚àî_) 

open import Notation.Order 
open import UF.FunExt 
open import UF.Base hiding (_‚âà_) 
open import UF.Subsingletons 

open import DedekindReals.Integers.Abs
open import DedekindReals.Integers.Addition renaming (_+_ to _‚Ñ§+_) hiding (_-_)
open import DedekindReals.Integers.Integers hiding (abs)
open import DedekindReals.Integers.Multiplication renaming (_*_ to _‚Ñ§*_)
open import DedekindReals.Integers.Order 
open import Naturals.Multiplication renaming (_*_ to _‚Ñï*_)
open import DedekindReals.Rationals.Fractions
open import DedekindReals.Rationals.FractionsOperations renaming (abs to ‚Ñö‚Çô-abs) renaming (-_ to ‚Ñö‚Çô-_) hiding (_+_) hiding (_*_)
open import DedekindReals.Rationals.Rationals
open import DedekindReals.Rationals.Addition
open import DedekindReals.Rationals.Negation
open import DedekindReals.Rationals.Order
open import DedekindReals.Rationals.Multiplication

module DedekindReals.Rationals.Abs where

abs : ‚Ñö ‚Üí ‚Ñö
abs (q , _) = to‚Ñö (‚Ñö‚Çô-abs q)

‚Ñö-abs-zero : 0‚Ñö Ôºù abs 0‚Ñö
‚Ñö-abs-zero = by-definition

to‚Ñö-abs : Fun-Ext ‚Üí (q : ‚Ñö‚Çô) ‚Üí abs (to‚Ñö q) Ôºù to‚Ñö (‚Ñö‚Çô-abs q) 
to‚Ñö-abs fe (x , a) = conclusion
 where
  rational-q : Œ£ ((x' , a') , lxp) Íûâ ‚Ñö , Œ£ h Íûâ ‚Ñï , (x Ôºù pos (succ h) ‚Ñ§* x') √ó (succ a Ôºù succ h ‚Ñï* succ a')
  rational-q = to‚Ñölemma (x , a)
  lx : ‚Ñö
  lx = pr‚ÇÅ rational-q
  x' : ‚Ñ§
  x' = pr‚ÇÅ (pr‚ÇÅ lx)
  a' : ‚Ñï
  a' = pr‚ÇÇ (pr‚ÇÅ lx)
  lxp = pr‚ÇÇ lx
  h = pr‚ÇÅ (pr‚ÇÇ (rational-q))
  e‚ÇÅ : succ a Ôºù succ h ‚Ñï* succ a'
  e‚ÇÅ = pr‚ÇÇ (pr‚ÇÇ (pr‚ÇÇ rational-q))
  e‚ÇÇ : x Ôºù pos (succ h) ‚Ñ§* x'
  e‚ÇÇ = pr‚ÇÅ (pr‚ÇÇ (pr‚ÇÇ rational-q))

  sa = succ a
  psa = pos (succ a)
  sh = succ h
  psh = pos (succ h)
  sa' = succ a'
  psa' = pos (succ a')
    
  helper : ‚Ñö‚Çô-abs (x' , a') ‚âà ‚Ñö‚Çô-abs (x , a) ‚Üí to‚Ñö (‚Ñö‚Çô-abs (x' , a')) Ôºù to‚Ñö (‚Ñö‚Çô-abs (x , a))
  helper = equiv‚Üíequality fe (‚Ñö‚Çô-abs (x' , a')) (‚Ñö‚Çô-abs (x , a))

  I : ‚Ñö‚Çô-abs (x' , a') ‚âà ‚Ñö‚Çô-abs (x , a)
  I = ‚Ñ§-mult-left-cancellable (abs‚Ñ§ x' ‚Ñ§* psa) (abs‚Ñ§ x ‚Ñ§* psa') psh id II
   where
    II : psh ‚Ñ§* (abs‚Ñ§ x' ‚Ñ§* psa) Ôºù psh ‚Ñ§* (abs‚Ñ§ x ‚Ñ§* psa')
    II = psh ‚Ñ§* (abs‚Ñ§ x' ‚Ñ§* psa)       Ôºù‚ü® ‚Ñ§*-assoc psh (abs‚Ñ§ x') psa ‚Åª¬π                             ‚ü©
         psh ‚Ñ§* abs‚Ñ§ x' ‚Ñ§* psa         Ôºù‚ü® by-definition                                             ‚ü©
         abs‚Ñ§ psh ‚Ñ§* abs‚Ñ§ x' ‚Ñ§* psa    Ôºù‚ü® ap (_‚Ñ§* psa) (abs-over-mult' psh x' ‚Åª¬π)                   ‚ü©
         abs‚Ñ§ (psh ‚Ñ§* x') ‚Ñ§* psa       Ôºù‚ü® ap (Œª z ‚Üí abs‚Ñ§ z ‚Ñ§* psa) (e‚ÇÇ ‚Åª¬π)                          ‚ü©
         abs‚Ñ§ x ‚Ñ§* psa                 Ôºù‚ü® ap (Œª z ‚Üí abs‚Ñ§ x ‚Ñ§* pos z) e‚ÇÅ                             ‚ü©
         abs‚Ñ§ x ‚Ñ§* pos (sh ‚Ñï* sa')     Ôºù‚ü® ap (abs‚Ñ§ x ‚Ñ§*_) (pos-multiplication-equiv-to-‚Ñï sh sa' ‚Åª¬π) ‚ü©
         abs‚Ñ§ x ‚Ñ§* (psh ‚Ñ§* psa')       Ôºù‚ü® ‚Ñ§-mult-rearrangement''' (abs‚Ñ§ x) psh psa'                 ‚ü©
         psh ‚Ñ§* (abs‚Ñ§ x ‚Ñ§* psa')       ‚àé
  
  conclusion : abs (to‚Ñö (x , a)) Ôºù to‚Ñö (‚Ñö‚Çô-abs (x , a))
  conclusion = helper I

abs-of-pos-is-pos : Fun-Ext ‚Üí (p : ‚Ñö) ‚Üí 0‚Ñö ‚â§ p ‚Üí abs p Ôºù p
abs-of-pos-is-pos fe ((pos x , a) , Œ±) l = I
 where
  I : abs ((pos x , a) , Œ±) Ôºù (pos x , a) , Œ±
  I = abs ((pos x , a) , Œ±)    Ôºù‚ü® by-definition ‚ü©
      to‚Ñö (‚Ñö‚Çô-abs (pos x , a)) Ôºù‚ü® by-definition ‚ü©
      to‚Ñö (pos x , a)          Ôºù‚ü® to‚Ñö-to‚Ñö‚Çô fe ((pos x , a) , Œ±) ‚Åª¬π ‚ü©
      ((pos x , a) , Œ±) ‚àé
abs-of-pos-is-pos fe ((negsucc x , a) , Œ±) l = ùüò-elim (III II)
 where
  I : pos 0 ‚Ñ§* pos (succ a) ‚â§ negsucc x ‚Ñ§* pos 1
  I = l
  II : pos 0 ‚â§ negsucc x
  II = transport‚ÇÇ _‚â§_ (‚Ñ§-zero-left-base (pos (succ a))) (‚Ñ§-zero-right-neutral (negsucc x)) I
  III : ¬¨ (pos 0 ‚â§ negsucc x) 
  III (k , e) = pos-not-negsucc (‚Ñ§-zero-left-neutral (pos k) ‚Åª¬π ‚àô e)

abs-of-pos-is-pos' : Fun-Ext ‚Üí (p : ‚Ñö) ‚Üí 0‚Ñö < p ‚Üí abs p Ôºù p
abs-of-pos-is-pos' fe p l = abs-of-pos-is-pos fe p (‚Ñö<-coarser-than-‚â§ 0‚Ñö p l)

‚Ñö-abs-neg-equals-pos : Fun-Ext ‚Üí (q : ‚Ñö) ‚Üí abs q Ôºù abs (- q)
‚Ñö-abs-neg-equals-pos fe (q , p) = conclusion
 where
  helper : ‚Ñö‚Çô-abs q ‚âà ‚Ñö‚Çô-abs (‚Ñö‚Çô- q) ‚Üí to‚Ñö (‚Ñö‚Çô-abs q) Ôºù to‚Ñö (‚Ñö‚Çô-abs (‚Ñö‚Çô- q))
  helper = equiv‚Üíequality fe (‚Ñö‚Çô-abs q) (‚Ñö‚Çô-abs (‚Ñö‚Çô- q))

  I : ‚Ñö‚Çô-abs q ‚âà ‚Ñö‚Çô-abs (‚Ñö‚Çô- q)
  I = ‚Ñö‚Çô-abs-neg-equals-pos q
  
  conclusion : abs (q , p) Ôºù abs (- (q , p))
  conclusion = abs (q , p)           Ôºù‚ü® by-definition ‚ü©
               to‚Ñö (‚Ñö‚Çô-abs q)         Ôºù‚ü® helper I ‚ü©
               to‚Ñö (‚Ñö‚Çô-abs (‚Ñö‚Çô- q))   Ôºù‚ü® to‚Ñö-abs fe (‚Ñö‚Çô- q) ‚Åª¬π ‚ü©
               abs (to‚Ñö (‚Ñö‚Çô- q))      Ôºù‚ü® by-definition ‚ü©
               abs (- (q , p)) ‚àé

‚Ñö-abs-inverse : Fun-Ext ‚Üí (q : ‚Ñö) ‚Üí (abs q Ôºù q) ‚àî (abs q Ôºù - q)
‚Ñö-abs-inverse fe ((pos x , a) , q) = inl conclusion
 where
  I : (pos x , a) ‚âà to‚Ñö‚Çô (to‚Ñö (pos x , a))
  I = ‚âà-to‚Ñö (pos x , a)
  II : Œ£ (x' , a') Íûâ ‚Ñö‚Çô , ((pos x , a) , q Ôºù to‚Ñö (x' , a')) 
  II = q-has-qn fe ((pos x , a) , q)
  x' = pr‚ÇÅ (pr‚ÇÅ II)
  a' = pr‚ÇÇ (pr‚ÇÅ II)

  helper : (pos x , a) ‚âà (x' , a') ‚Üí to‚Ñö (pos x , a) Ôºù to‚Ñö (x' , a')
  helper = equiv‚Üíequality fe (pos x , a) (x' , a')

  III : (pos x , a) ‚âà (x' , a')
  III = refl

  conclusion : abs ((pos x , a) , q) Ôºù (pos x , a) , q
  conclusion = abs ((pos x , a) , q)   Ôºù‚ü® by-definition ‚ü©
               to‚Ñö (pos x , a)         Ôºù‚ü® helper III ‚ü©
               to‚Ñö (x' , a')           Ôºù‚ü® pr‚ÇÇ II ‚Åª¬π ‚ü©
               (pos x , a) , q         ‚àé
‚Ñö-abs-inverse fe ((negsucc x , a) , q) = inr conclusion
 where
  conclusion : abs ((negsucc x , a) , q) Ôºù - ((negsucc x , a) , q)
  conclusion = abs ((negsucc x , a) , q)     Ôºù‚ü® by-definition ‚ü©
               to‚Ñö ((abs‚Ñ§ (negsucc x)) , a)  Ôºù‚ü® by-definition ‚ü©
               to‚Ñö (pos (succ x) , a)        Ôºù‚ü® by-definition ‚ü©
               to‚Ñö (‚Ñö‚Çô- (negsucc x , a))     Ôºù‚ü® by-definition ‚ü©
               - ((negsucc x , a) , q)      ‚àé

‚Ñö-positive-not-zero : Fun-Ext ‚Üí (x a : ‚Ñï) ‚Üí ¬¨ (to‚Ñö (pos (succ x) , a) Ôºù 0‚Ñö)
‚Ñö-positive-not-zero fe x a e = pos-succ-not-zero x III
 where
  I : (pos (succ x) , a) ‚âà (pos 0 , 0)
  I = equality‚Üíequiv fe (pos (succ x) , a) (pos 0 , 0) e

  II : pos (succ x) ‚Ñ§* pos 1 Ôºù pos 0 ‚Ñ§* pos (succ a)
  II = I

  III : pos (succ x) Ôºù pos 0
  III = pos (succ x)            Ôºù‚ü® by-definition ‚ü©
        pos (succ x) ‚Ñ§* (pos 1) Ôºù‚ü® II ‚ü©
        pos 0 ‚Ñ§* pos (succ a)   Ôºù‚ü® ‚Ñ§-zero-left-base (pos (succ a))  ‚ü©
        pos 0 ‚àé


‚Ñö-abs-is-positive : (q : ‚Ñö) ‚Üí 0‚Ñö ‚â§ abs q
‚Ñö-abs-is-positive ((pos zero , a) , _)     = 0 , I
 where
  I : pos 0 ‚Ñ§* pos 0 ‚Ñ§+ pos 0 Ôºù pos 0 ‚Ñ§* pos (succ 0)
  I = pos 0 ‚Ñ§* pos 0 ‚Ñ§+ pos 0 Ôºù‚ü® by-definition ‚ü©
      pos 0 ‚Ñ§* pos 0          Ôºù‚ü® by-definition ‚ü©
      pos 0                   Ôºù‚ü® by-definition ‚ü©
      pos 0 ‚Ñ§* pos 1          ‚àé
‚Ñö-abs-is-positive ((pos (succ x) , a) , q) = ‚Ñö<-coarser-than-‚â§ 0‚Ñö (abs ((pos (succ x) , a) , q)) (‚Ñö-zero-less-than-positive x a)
‚Ñö-abs-is-positive ((negsucc x , a) , q)    = ‚Ñö<-coarser-than-‚â§ 0‚Ñö (abs (((negsucc x , a) , q))) (‚Ñö-zero-less-than-positive x a)

‚Ñö-abs-zero-is-zero : Fun-Ext ‚Üí (q : ‚Ñö) ‚Üí abs q Ôºù 0‚Ñö ‚Üí q Ôºù 0‚Ñö
‚Ñö-abs-zero-is-zero fe ((pos 0 , a) , p) e = numerator-zero-is-zero fe ((pos 0 , a) , p) refl
‚Ñö-abs-zero-is-zero fe ((pos (succ x) , a) , p) e = ùüò-elim (‚Ñö-positive-not-zero fe x a e)
‚Ñö-abs-zero-is-zero fe ((negsucc x , a) , p) e = ùüò-elim (‚Ñö-positive-not-zero fe x a e)

‚Ñö-abs-‚â§ : Fun-Ext ‚Üí (q : ‚Ñö) ‚Üí (- (abs q) ‚â§ q) √ó (q ‚â§ abs q)
‚Ñö-abs-‚â§ fe q = locate-q (‚Ñö-abs-inverse fe q)
 where
  i : 0‚Ñö ‚â§ abs q
  i = ‚Ñö-abs-is-positive q
  ii : 0‚Ñö - abs q ‚â§ abs q - abs q
  ii = ‚Ñö‚â§-addition-preserves-order fe 0‚Ñö (abs q) (- abs q) i
  iii : - abs q ‚â§ 0‚Ñö
  iii = transport‚ÇÇ _‚â§_ (‚Ñö-zero-left-neutral fe (- abs q)) (‚Ñö-inverse-sum-to-zero fe (abs q)) ii
  iv : - abs q ‚â§ abs q
  iv = ‚Ñö‚â§-trans fe (- abs q) 0‚Ñö (abs q) iii i
  
  locate-q : (abs q Ôºù q) ‚àî (abs q Ôºù - q) ‚Üí - abs q ‚â§ q √ó q ‚â§ abs q
  locate-q (inl e) = I , II
   where
    I : - abs q ‚â§ q
    I = transport (- abs q ‚â§_) e iv

    II : q ‚â§ abs q
    II = transport (q ‚â§_) (e ‚Åª¬π) (‚Ñö‚â§-refl q)
  locate-q (inr r) = I , II
   where
    Œ± : q Ôºù - abs q
    Œ± = q         Ôºù‚ü® ‚Ñö-minus-minus fe q ‚ü©
        - (- q)   Ôºù‚ü® ap -_ (r ‚Åª¬π) ‚ü©
        - abs q   ‚àé
        
    I : - abs q ‚â§ q
    I = transport (_‚â§ q) Œ± (‚Ñö‚â§-refl q)

    II : q ‚â§ abs q 
    II = transport (_‚â§ abs q) (Œ± ‚Åª¬π) iv

‚Ñö-abs-‚â§-unpack : Fun-Ext ‚Üí (q Œµ : ‚Ñö) ‚Üí abs q ‚â§ Œµ ‚Üí (- Œµ ‚â§ q) √ó (q ‚â§ Œµ)
‚Ñö-abs-‚â§-unpack fe q Œµ l = locate-q (‚Ñö-abs-inverse fe q)
 where
  abs-q-positive : 0‚Ñö ‚â§ abs q
  abs-q-positive = ‚Ñö-abs-is-positive q

  Œµ-positive : 0‚Ñö ‚â§ Œµ
  Œµ-positive = ‚Ñö‚â§-trans fe 0‚Ñö (abs q) Œµ abs-q-positive l

  neg-epsilon-negative : - Œµ ‚â§ 0‚Ñö
  neg-epsilon-negative = ‚Ñö‚â§-swap fe 0‚Ñö Œµ Œµ-positive
  
  locate-q : (abs q Ôºù q) ‚àî (abs q Ôºù - q) ‚Üí - Œµ ‚â§ q √ó q ‚â§ Œµ
  locate-q (inl i) = ‚Ñö‚â§-trans fe (- Œµ) 0‚Ñö q neg-epsilon-negative (transport (0‚Ñö ‚â§_) i abs-q-positive) , (transport (_‚â§ Œµ) i l)
  locate-q (inr i) = transport (- Œµ ‚â§_) (‚Ñö-minus-minus fe q ‚Åª¬π) Œ≤ , ‚Ñö‚â§-trans fe q 0‚Ñö Œµ Œ¥ Œµ-positive
   where
    Œ± : - q ‚â§ Œµ
    Œ± = transport (_‚â§ Œµ) i l
    Œ≤ : - Œµ ‚â§ - (- q)
    Œ≤ = ‚Ñö‚â§-swap fe (- q) Œµ Œ±
    Œ≥ : - (- q) ‚â§ 0‚Ñö
    Œ≥ = transport (Œª z ‚Üí - z ‚â§ 0‚Ñö) i (‚Ñö‚â§-swap fe 0‚Ñö (abs q) abs-q-positive)
    Œ¥ : q ‚â§ 0‚Ñö
    Œ¥ = transport (_‚â§ 0‚Ñö) (‚Ñö-minus-minus fe q ‚Åª¬π) Œ≥

‚Ñö‚â§-to-abs : Fun-Ext ‚Üí (x y : ‚Ñö) ‚Üí (- y ‚â§ x) √ó (x ‚â§ y) ‚Üí abs x ‚â§ y
‚Ñö‚â§-to-abs fe x y (l‚ÇÅ , l‚ÇÇ) = I (‚Ñö-abs-inverse fe x)
 where
  Œ± : - x ‚â§ - (- y)
  Œ± = ‚Ñö‚â§-swap fe (- y) x l‚ÇÅ
  I : (abs x Ôºù x) ‚àî (abs x Ôºù - x) ‚Üí abs x ‚â§ y
  I (inl l) = transport (_‚â§ y) (l ‚Åª¬π) l‚ÇÇ
  I (inr r) = transport‚ÇÇ _‚â§_ (r ‚Åª¬π) (‚Ñö-minus-minus fe y ‚Åª¬π) Œ±

‚Ñö<-to-abs : Fun-Ext ‚Üí (x y : ‚Ñö) ‚Üí (- y < x) √ó (x < y) ‚Üí abs x < y
‚Ñö<-to-abs fe x y (l‚ÇÅ , l‚ÇÇ) = II (‚Ñö‚â§-split fe (abs x) y I) 
 where
  I : abs x ‚â§ y
  I = ‚Ñö‚â§-to-abs fe x y (‚Ñö<-coarser-than-‚â§ (- y) x l‚ÇÅ , ‚Ñö<-coarser-than-‚â§ x y l‚ÇÇ)
  II : abs x < y ‚àî (abs x Ôºù y) ‚Üí abs x < y
  II (inl l) = l
  II (inr r) = III (‚Ñö-abs-inverse fe x)
   where
    
    III : (abs x Ôºù x) ‚àî (abs x Ôºù - x) ‚Üí abs x < y
    III (inl s) = ùüò-elim (‚Ñö<-not-itself x (transport (x <_) (r ‚Åª¬π ‚àô s) l‚ÇÇ))
    III (inr s) = ùüò-elim (‚Ñö<-not-itself x (transport (_< x) IV l‚ÇÅ))
     where
      IV : - y Ôºù x
      IV = - y     Ôºù‚ü® ap -_ (r ‚Åª¬π ‚àô s) ‚ü©
           - (- x) Ôºù‚ü® ‚Ñö-minus-minus fe x ‚Åª¬π ‚ü©
           x ‚àé

‚Ñö-abs-<-unpack :  Fun-Ext ‚Üí (q Œµ : ‚Ñö) ‚Üí abs q < Œµ ‚Üí (- Œµ < q) √ó (q < Œµ)
‚Ñö-abs-<-unpack fe q Œµ l = locate-q (‚Ñö-abs-inverse fe q)
 where
  abs-q-positive : 0‚Ñö ‚â§ abs q
  abs-q-positive = ‚Ñö-abs-is-positive q
  
  Œµ-positive : 0‚Ñö < Œµ
  Œµ-positive = ‚Ñö‚â§-<-trans fe 0‚Ñö (abs q) Œµ abs-q-positive l

  neg-epsilon-negative : - Œµ < 0‚Ñö
  neg-epsilon-negative = ‚Ñö<-swap fe 0‚Ñö Œµ Œµ-positive

  locate-q : (abs q Ôºù q) ‚àî (abs q Ôºù - q) ‚Üí - Œµ < q √ó q < Œµ
  locate-q (inl i) = ‚Ñö<-‚â§-trans fe (- Œµ) 0‚Ñö q neg-epsilon-negative (transport (0‚Ñö ‚â§_) i abs-q-positive) , (transport (_< Œµ) i l)
  locate-q (inr i) = transport (- Œµ <_) (‚Ñö-minus-minus fe q ‚Åª¬π) Œ≤ , ‚Ñö‚â§-<-trans fe q 0‚Ñö Œµ Œ¥ Œµ-positive
   where
    Œ± : - q < Œµ
    Œ± = transport (_< Œµ) i l
    Œ≤ : - Œµ < - (- q)
    Œ≤ = ‚Ñö<-swap fe (- q) Œµ Œ±
    Œ≥ : - (- q) ‚â§ 0‚Ñö
    Œ≥ = transport (Œª z ‚Üí - z ‚â§ 0‚Ñö) i (‚Ñö‚â§-swap fe 0‚Ñö (abs q) abs-q-positive)
    Œ¥ : q ‚â§ 0‚Ñö
    Œ¥ = transport (_‚â§ 0‚Ñö) (‚Ñö-minus-minus fe q ‚Åª¬π) Œ≥

‚Ñö-triangle-inequality : Fun-Ext ‚Üí (x y : ‚Ñö) ‚Üí abs (x + y) ‚â§ abs x + abs y
‚Ñö-triangle-inequality fe x y = ‚Ñö‚â§-to-abs fe (x + y) (abs x + abs y) (I (‚Ñö-abs-‚â§ fe x) (‚Ñö-abs-‚â§ fe y))
 where
  I : - (abs x) ‚â§ x √ó x ‚â§ abs x ‚Üí - abs y ‚â§ y √ó y ‚â§ abs y ‚Üí - (abs x + abs y) ‚â§ x + y √ó x + y ‚â§ abs x + abs y
  I (l‚ÇÅ , l‚ÇÇ) (l‚ÇÉ , l‚ÇÑ) = transport (_‚â§ x + y) Œ≥ Œ± , Œ≤
   where
    Œ± : (- abs x) - abs y ‚â§ x + y
    Œ± = ‚Ñö‚â§-adding fe (- abs x) x (- abs y) y l‚ÇÅ l‚ÇÉ
    Œ≥ : (- abs x) - abs y Ôºù - (abs x + abs y)
    Œ≥ = ‚Ñö-minus-dist fe (abs x) (abs y)
    Œ≤ : x + y ‚â§ abs x + abs y
    Œ≤ = ‚Ñö‚â§-adding fe x (abs x) y (abs y) l‚ÇÇ l‚ÇÑ

pos-abs-no-increase : Fun-Ext ‚Üí (q Œµ : ‚Ñö) ‚Üí (0‚Ñö < q) √ó (q < Œµ) ‚Üí abs q < Œµ
pos-abs-no-increase fe q Œµ (l‚ÇÅ , l‚ÇÇ) = IV
 where
  I : 0‚Ñö < Œµ 
  I = ‚Ñö<-trans 0‚Ñö q Œµ l‚ÇÅ l‚ÇÇ
  II : - Œµ < 0‚Ñö
  II = transport (- Œµ <_) ‚Ñö-minus-zero-is-zero i
   where
    i : - Œµ < - 0‚Ñö
    i = ‚Ñö<-swap fe 0‚Ñö Œµ I
  III : - Œµ < q
  III = ‚Ñö<-trans (- Œµ) 0‚Ñö q II l‚ÇÅ
  IV : abs q < Œµ
  IV = ‚Ñö<-to-abs fe q Œµ (III , l‚ÇÇ)

abs-mult : Fun-Ext ‚Üí (x y : ‚Ñö) ‚Üí abs x * abs y Ôºù abs (x * y)
abs-mult fe x y = case-split (‚Ñö-dichotomous' fe x 0‚Ñö) (‚Ñö-dichotomous' fe y 0‚Ñö)
 where
  case1 : 0‚Ñö ‚â§ x ‚Üí 0‚Ñö ‚â§ y ‚Üí abs x * abs y Ôºù abs (x * y)
  case1 l‚ÇÅ l‚ÇÇ = abs x * abs y  Ôºù‚ü® ap (_* abs y) (abs-of-pos-is-pos fe x l‚ÇÅ)                                         ‚ü©
                x * abs y      Ôºù‚ü® ap (x *_) (abs-of-pos-is-pos fe y l‚ÇÇ)                                             ‚ü©
                x * y          Ôºù‚ü® abs-of-pos-is-pos fe (x * y) (‚Ñö‚â§-pos-multiplication-preserves-order x y l‚ÇÅ l‚ÇÇ) ‚Åª¬π ‚ü©
                abs (x * y)    ‚àé

  case2 : (0‚Ñö > x) ‚Üí (0‚Ñö > y) ‚Üí abs x * abs y Ôºù abs (x * y)
  case2 l‚ÇÅ l‚ÇÇ = goal
   where
    0<-x : 0‚Ñö < - x
    0<-x = ‚Ñö<-swap'' fe x l‚ÇÅ
    0<-y : 0‚Ñö < - y
    0<-y = ‚Ñö<-swap'' fe y l‚ÇÇ

    remove-negatives : (- x) * (- y) Ôºù x * y
    remove-negatives = (- x) * (- y)     Ôºù‚ü® ‚Ñö-subtraction-dist-over-mult fe x (- y)     ‚ü©
                       - x * (- y)       Ôºù‚ü® ap -_ (‚Ñö*-comm x (- y))                     ‚ü©
                       - (- y) * x       Ôºù‚ü® ap -_ (‚Ñö-subtraction-dist-over-mult fe y x) ‚ü©
                       - (- y * x)       Ôºù‚ü® ‚Ñö-minus-minus fe (y * x) ‚Åª¬π                 ‚ü©
                       y * x             Ôºù‚ü® ‚Ñö*-comm y x                                 ‚ü©
                       x * y             ‚àé

    0<x*y : 0‚Ñö < x * y
    0<x*y = transport (0‚Ñö <_) remove-negatives (‚Ñö<-pos-multiplication-preserves-order (- x) (- y) 0<-x 0<-y)
    
    goal : abs x * abs y Ôºù abs (x * y)
    goal = abs x * abs y     Ôºù‚ü® ap (_* abs y) (‚Ñö-abs-neg-equals-pos fe x)        ‚ü©
           abs (- x) * abs y Ôºù‚ü® ap (_* abs y) (abs-of-pos-is-pos' fe (- x) 0<-x) ‚ü©
           (- x) * abs y     Ôºù‚ü® ap ((- x) *_) (‚Ñö-abs-neg-equals-pos fe y)        ‚ü©
           (- x) * abs (- y) Ôºù‚ü® ap ((- x) *_) (abs-of-pos-is-pos' fe (- y) 0<-y) ‚ü©
           (- x) * (- y)     Ôºù‚ü® remove-negatives                                 ‚ü©
           x * y             Ôºù‚ü® abs-of-pos-is-pos' fe (x * y) 0<x*y ‚Åª¬π           ‚ü©
           abs (x * y)       ‚àé

  case3 : (a b : ‚Ñö) ‚Üí 0‚Ñö ‚â§ a ‚Üí b < 0‚Ñö ‚Üí abs a * abs b Ôºù abs (a * b)
  case3 a b l‚ÇÅ l‚ÇÇ = abs a * abs b Ôºù‚ü® ap (_* abs b) (abs-of-pos-is-pos fe a l‚ÇÅ)                   ‚ü©
                    a * abs b     Ôºù‚ü® ap (a *_) (‚Ñö-abs-neg-equals-pos fe b)                       ‚ü©
                    a * abs (- b) Ôºù‚ü® ap (a *_) (abs-of-pos-is-pos' fe (- b) (‚Ñö<-swap'' fe b l‚ÇÇ)) ‚ü©
                    a * (- b)     Ôºù‚ü® ‚Ñö*-comm a (- b)                                             ‚ü©
                    (- b) * a     Ôºù‚ü® ‚Ñö-subtraction-dist-over-mult fe b a                         ‚ü©
                    - b * a       Ôºù‚ü® ap -_ (‚Ñö*-comm b a)                                         ‚ü©
                    - a * b       Ôºù‚ü® abs-of-pos-is-pos fe (- a * b) (‚Ñö‚â§-swap' fe (a * b) I) ‚Åª¬π   ‚ü©
                    abs (- a * b) Ôºù‚ü® ‚Ñö-abs-neg-equals-pos fe (a * b) ‚Åª¬π                          ‚ü©
                    abs (a * b)   ‚àé

   where
    first : 0‚Ñö ‚â§ - b
    first = ‚Ñö‚â§-swap' fe b (‚Ñö<-coarser-than-‚â§ b 0‚Ñö l‚ÇÇ)
    second : 0‚Ñö ‚â§ a * (- b)
    second = ‚Ñö‚â§-pos-multiplication-preserves-order a (- b) l‚ÇÅ first
    third : - (a * (- b)) ‚â§ - 0‚Ñö
    third = ‚Ñö‚â§-swap fe 0‚Ñö (a * (- b)) second
    I : a * b ‚â§ 0‚Ñö
    I = transport‚ÇÇ _‚â§_ II ‚Ñö-minus-zero-is-zero third
     where
      II : - (a * (- b)) Ôºù a * b
      II = - a * (- b) Ôºù‚ü® ap -_ (‚Ñö*-comm a (- b))                     ‚ü©
           - (- b) * a Ôºù‚ü® ap -_ (‚Ñö-subtraction-dist-over-mult fe b a) ‚ü©
           - (- b * a) Ôºù‚ü® ‚Ñö-minus-minus fe (b * a) ‚Åª¬π                 ‚ü©
           b * a       Ôºù‚ü® ‚Ñö*-comm b a                                 ‚ü©
           a * b       ‚àé

  case-split : x < 0‚Ñö ‚àî 0‚Ñö ‚â§ x ‚Üí y < 0‚Ñö ‚àî 0‚Ñö ‚â§ y ‚Üí abs x * abs y Ôºù abs (x * y)
  case-split (inl l‚ÇÅ) (inl l‚ÇÇ) = case2 l‚ÇÅ l‚ÇÇ
  case-split (inl l‚ÇÅ) (inr l‚ÇÇ) = goal
   where
    goal : abs x * abs y Ôºù abs (x * y)
    goal = abs x * abs y Ôºù‚ü® ‚Ñö*-comm (abs x) (abs y) ‚ü©
           abs y * abs x Ôºù‚ü® case3 y x l‚ÇÇ l‚ÇÅ         ‚ü©
           abs (y * x)   Ôºù‚ü® ap abs (‚Ñö*-comm y x)    ‚ü©
           abs (x * y)   ‚àé
  case-split (inr l‚ÇÅ) (inl l‚ÇÇ) = case3 x y l‚ÇÅ l‚ÇÇ
  case-split (inr l‚ÇÅ) (inr l‚ÇÇ) = case1 l‚ÇÅ l‚ÇÇ

\end{code}

