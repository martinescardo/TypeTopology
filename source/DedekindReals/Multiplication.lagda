Andrew Sneap

\begin{code}
{-# OPTIONS --safe --without-K #-}

open import MLTT.Spartan renaming (_+_ to _‚àî_)

open import Notation.Order
open import UF.PropTrunc
open import UF.Subsingletons
open import UF.FunExt
open import UF.Powerset

open import Rationals.Type
open import Rationals.Order

module DedekindReals.Multiplication
         (fe : Fun-Ext)
         (pe : Prop-Ext)
         (pt : propositional-truncations-exist)
       where

open import Rationals.Multiplication renaming (_*_ to _‚Ñö*_)
open import Rationals.MinMax
open import DedekindReals.Type fe pe pt
open PropositionalTruncation pt


\end{code}

Multiplication is defined as in the HoTT Book. It reminds of interval multiplication of rational numbers.

Inhabitedness: by inhabitedness of x and y, we find values
on both sides of each. Then using the property that rationals have no
least element, then using the relevant min/max calculation we
trivially find a p which inhabits each cut of the product.

Roundedness: roundedness in the left to right direction follows
directly from density of rationals, and transitivity of rationals
order. In the right to left, transivity alone completes the proof.

\begin{code}
{-
_*_ : ‚Ñù ‚Üí ‚Ñù ‚Üí ‚Ñù
_*_ ((Lx , Rx) , inhabited-left-x , inhabited-right-x , rounded-left-x , rounded-right-x , disjoint-x , located-x)
    ((Ly , Ry) , inhabited-left-y , inhabited-right-y , rounded-left-y , rounded-right-y , disjoint-y , located-y)
  = (L , R) , inhabited-L , {!!} , rounded-left-L , {!!} , is-disjoint , {!!}
 where
  L : ùìü ‚Ñö
  L p = (‚àÉ (a , b , c , d) Íûâ ‚Ñö √ó ‚Ñö √ó ‚Ñö √ó ‚Ñö , a ‚àà Lx √ó b ‚àà Rx √ó c ‚àà Ly √ó d ‚àà Ry √ó p < min‚ÇÑ (a ‚Ñö* c) (a ‚Ñö* d) (b ‚Ñö* c) (b ‚Ñö* d)) , ‚àÉ-is-prop
  R : ùìü ‚Ñö
  R q = (‚àÉ (a , b , c , d) Íûâ ‚Ñö √ó ‚Ñö √ó ‚Ñö √ó ‚Ñö , a ‚àà Lx √ó b ‚àà Rx √ó c ‚àà Ly √ó d ‚àà Ry √ó max‚ÇÑ (a ‚Ñö* c) (a ‚Ñö* d) (b ‚Ñö* c) (b ‚Ñö* d) < q) , ‚àÉ-is-prop

  x-values : ‚à• (Œ£ a Íûâ ‚Ñö , a ‚àà Lx) √ó (Œ£ b Íûâ ‚Ñö , b ‚àà Rx) ‚à•
  x-values = binary-choice inhabited-left-x inhabited-right-x

  y-values : ‚à• (Œ£ c Íûâ ‚Ñö , c ‚àà Ly) √ó (Œ£ d Íûâ ‚Ñö , d ‚àà Ry) ‚à•
  y-values = binary-choice inhabited-left-y inhabited-right-y

  xy-values : ‚à• ((Œ£ a Íûâ ‚Ñö , a ‚àà Lx) √ó (Œ£ b Íûâ ‚Ñö , b ‚àà Rx)) √ó ((Œ£ c Íûâ ‚Ñö , c ‚àà Ly) √ó (Œ£ d Íûâ ‚Ñö , d ‚àà Ry)) ‚à•
  xy-values = binary-choice x-values y-values

  inhabited-L : inhabited-left L
  inhabited-L = ‚à•‚à•-rec ‚àÉ-is-prop I xy-values
   where
    I : ((Œ£ a Íûâ ‚Ñö , a ‚àà Lx) √ó (Œ£ b Íûâ ‚Ñö , b ‚àà Rx)) √ó ((Œ£ c Íûâ ‚Ñö , c ‚àà Ly) √ó (Œ£ d Íûâ ‚Ñö , d ‚àà Ry))
      ‚Üí ‚àÉ p Íûâ ‚Ñö , ‚àÉ (a , b , c , d) Íûâ ‚Ñö √ó ‚Ñö √ó ‚Ñö √ó ‚Ñö , a ‚àà Lx √ó b ‚àà Rx √ó c ‚àà Ly √ó d ‚àà Ry √ó p < min‚ÇÑ (a ‚Ñö* c) (a ‚Ñö* d) (b ‚Ñö* c) (b ‚Ñö* d)
    I (((a , a<x) , (b , x<b)) , ((c , c<y) , (d , y<d))) = II (‚Ñö-no-least-element (min‚ÇÑ (a ‚Ñö* c) (a ‚Ñö* d) (b ‚Ñö* c) (b ‚Ñö* d)))
     where
      II : Œ£ p Íûâ ‚Ñö , p < min‚ÇÑ (a ‚Ñö* c) (a ‚Ñö* d) (b ‚Ñö* c) (b ‚Ñö* d)
         ‚Üí _
      II (p , p<MIN) = ‚à£ p , ‚à£ (a , b , c , d) , a<x , x<b , c<y , y<d , p<MIN ‚à£ ‚à£

  rounded-left-L : rounded-left L
  rounded-left-L p = ltr , rtl
   where
    ltr : p ‚àà L ‚Üí ‚àÉ p' Íûâ ‚Ñö , (p < p') √ó p' ‚àà L
    ltr p<xy = ‚à•‚à•-functor I p<xy
     where
      I : (Œ£ (a , b , c , d) Íûâ ‚Ñö √ó ‚Ñö √ó ‚Ñö √ó ‚Ñö , a ‚àà Lx √ó b ‚àà Rx √ó c ‚àà Ly √ó d ‚àà Ry √ó p < min‚ÇÑ (a ‚Ñö* c) (a ‚Ñö* d) (b ‚Ñö* c) (b ‚Ñö* d))
        ‚Üí Œ£ p' Íûâ ‚Ñö , p < p' √ó p' ‚àà L
      I ((a , b , c , d) , a<x , x<b , c<y , y<d , p<MIN) = II (‚Ñö-dense fe p (min‚ÇÑ (a ‚Ñö* c) (a ‚Ñö* d) (b ‚Ñö* c) (b ‚Ñö* d)) p<MIN)
       where
        II : (Œ£ p' Íûâ ‚Ñö , p < p' √ó p' < min‚ÇÑ (a ‚Ñö* c) (a ‚Ñö* d) (b ‚Ñö* c) (b ‚Ñö* d))
           ‚Üí Œ£ p' Íûâ ‚Ñö , p < p' √ó p' ‚àà L
        II (p' , p<p' , p'<MIN) = p' , (p<p' , ‚à£ (a , b , c , d) , (a<x , x<b , c<y , y<d , p'<MIN) ‚à£)
    rtl : ‚àÉ p' Íûâ ‚Ñö , (p < p') √ó p' ‚àà L ‚Üí p ‚àà L
    rtl p'-info = ‚à•‚à•-rec ‚àÉ-is-prop I p'-info
     where
      I : Œ£ p' Íûâ ‚Ñö , (p < p') √ó p' ‚àà L ‚Üí p ‚àà L
      I (p' , p<p' , p'<xy) = ‚à•‚à•-functor II p'<xy
       where
        II : Œ£ (a , b , c , d) Íûâ ‚Ñö √ó ‚Ñö √ó ‚Ñö √ó ‚Ñö , a ‚àà Lx √ó b ‚àà Rx √ó c ‚àà Ly √ó d ‚àà Ry √ó p' < min‚ÇÑ (a ‚Ñö* c) (a ‚Ñö* d) (b ‚Ñö* c) (b ‚Ñö* d)
           ‚Üí Œ£ (a , b , c , d) Íûâ ‚Ñö √ó ‚Ñö √ó ‚Ñö √ó ‚Ñö , a ‚àà Lx √ó b ‚àà Rx √ó c ‚àà Ly √ó d ‚àà Ry √ó p  < min‚ÇÑ (a ‚Ñö* c) (a ‚Ñö* d) (b ‚Ñö* c) (b ‚Ñö* d)
        II ((a , b , c , d) , a<x , x<b , c<x , x<d , p'<MIN) = (a , b , c , d) , a<x , x<b , c<x , x<d , ‚Ñö<-trans p p' (min‚ÇÑ (a ‚Ñö* c) (a ‚Ñö* d) (b ‚Ñö* c) (b ‚Ñö* d)) p<p' p'<MIN

  is-disjoint : disjoint L R
  is-disjoint p q (p<xy , xy<q) = ‚à•‚à•-rec (‚Ñö<-is-prop p q) I (binary-choice p<xy xy<q)
   where
    I : (Œ£ (a‚ÇÅ , b‚ÇÅ , c‚ÇÅ , d‚ÇÅ) Íûâ ‚Ñö √ó ‚Ñö √ó ‚Ñö √ó ‚Ñö , a‚ÇÅ ‚àà Lx √ó b‚ÇÅ ‚àà Rx √ó c‚ÇÅ ‚àà Ly √ó d‚ÇÅ ‚àà Ry √ó p < min‚ÇÑ (a‚ÇÅ ‚Ñö* c‚ÇÅ) (a‚ÇÅ ‚Ñö* d‚ÇÅ) (b‚ÇÅ ‚Ñö* c‚ÇÅ) (b‚ÇÅ ‚Ñö* d‚ÇÅ))
      √ó (Œ£ (a‚ÇÇ , b‚ÇÇ , c‚ÇÇ , d‚ÇÇ) Íûâ ‚Ñö √ó ‚Ñö √ó ‚Ñö √ó ‚Ñö , a‚ÇÇ ‚àà Lx √ó b‚ÇÇ ‚àà Rx √ó c‚ÇÇ ‚àà Ly √ó d‚ÇÇ ‚àà Ry √ó max‚ÇÑ (a‚ÇÇ ‚Ñö* c‚ÇÇ) (a‚ÇÇ ‚Ñö* d‚ÇÇ) (b‚ÇÇ ‚Ñö* c‚ÇÇ) (b‚ÇÇ ‚Ñö* d‚ÇÇ) < q)
      ‚Üí p < q
    I ( ((a‚ÇÅ , b‚ÇÅ , c‚ÇÅ , d‚ÇÅ) , a‚ÇÅ<x , x<b‚ÇÅ , c‚ÇÅ<x , x<d‚ÇÅ , p<MIN‚ÇÅ) ,
        ((a‚ÇÇ , b‚ÇÇ , c‚ÇÇ , d‚ÇÇ) , a‚ÇÇ<x , x<b‚ÇÇ , c‚ÇÇ<x , x<d‚ÇÇ , MAX‚ÇÅ<q) )
     = ‚Ñö<-‚â§-trans fe p MIN‚ÇÇ q p<MIN‚ÇÇ (‚Ñö‚â§-trans fe MIN‚ÇÇ MAX‚ÇÇ q MIN‚ÇÇ‚â§MAX‚ÇÇ MAX‚ÇÇ‚â§q)
     where
      a‚ÇÉ b‚ÇÉ c‚ÇÉ d‚ÇÉ : ‚Ñö
      a‚ÇÉ = max a‚ÇÅ a‚ÇÇ
      b‚ÇÉ = min b‚ÇÅ b‚ÇÇ
      c‚ÇÉ = max c‚ÇÅ c‚ÇÇ
      d‚ÇÉ = min d‚ÇÅ d‚ÇÇ

      MIN‚ÇÅ MAX‚ÇÅ MIN‚ÇÇ MAX‚ÇÇ : ‚Ñö
      MIN‚ÇÅ = min‚ÇÑ (a‚ÇÅ ‚Ñö* c‚ÇÅ) (a‚ÇÅ ‚Ñö* d‚ÇÅ) (b‚ÇÅ ‚Ñö* c‚ÇÅ) (b‚ÇÅ ‚Ñö* d‚ÇÅ)
      MAX‚ÇÅ = max‚ÇÑ (a‚ÇÇ ‚Ñö* c‚ÇÇ) (a‚ÇÇ ‚Ñö* d‚ÇÇ) (b‚ÇÇ ‚Ñö* c‚ÇÇ) (b‚ÇÇ ‚Ñö* d‚ÇÇ)
      MIN‚ÇÇ = min‚ÇÑ (a‚ÇÉ ‚Ñö* c‚ÇÉ) (a‚ÇÉ ‚Ñö* d‚ÇÉ) (b‚ÇÉ ‚Ñö* c‚ÇÉ) (b‚ÇÉ ‚Ñö* d‚ÇÉ)
      MAX‚ÇÇ = max‚ÇÑ (a‚ÇÉ ‚Ñö* c‚ÇÉ) (a‚ÇÉ ‚Ñö* d‚ÇÉ) (b‚ÇÉ ‚Ñö* c‚ÇÉ) (b‚ÇÉ ‚Ñö* d‚ÇÉ)

      MIN‚ÇÅ‚â§MIN‚ÇÇ : MIN‚ÇÅ ‚â§ MIN‚ÇÇ
      MIN‚ÇÅ‚â§MIN‚ÇÇ = {!!}

      MAX‚ÇÇ‚â§MAX‚ÇÅ : MAX‚ÇÇ ‚â§ MAX‚ÇÅ
      MAX‚ÇÇ‚â§MAX‚ÇÅ = {!!}

      p<MIN‚ÇÇ : p < MIN‚ÇÇ
      p<MIN‚ÇÇ = ‚Ñö<-‚â§-trans fe p MIN‚ÇÅ MIN‚ÇÇ p<MIN‚ÇÅ MIN‚ÇÅ‚â§MIN‚ÇÇ

      MIN‚ÇÇ‚â§MAX‚ÇÇ : MIN‚ÇÇ ‚â§ MAX‚ÇÇ
      MIN‚ÇÇ‚â§MAX‚ÇÇ = min‚ÇÑ‚â§max‚ÇÑ (a‚ÇÉ ‚Ñö* c‚ÇÉ) (a‚ÇÉ ‚Ñö* d‚ÇÉ) (b‚ÇÉ ‚Ñö* c‚ÇÉ) (b‚ÇÉ ‚Ñö* d‚ÇÉ)

      MAX‚ÇÇ<q : MAX‚ÇÇ < q
      MAX‚ÇÇ<q = ‚Ñö‚â§-<-trans fe MAX‚ÇÇ MAX‚ÇÅ q MAX‚ÇÇ‚â§MAX‚ÇÅ MAX‚ÇÅ<q

      MAX‚ÇÇ‚â§q : MAX‚ÇÇ ‚â§ q
      MAX‚ÇÇ‚â§q = ‚Ñö<-coarser-than-‚â§ MAX‚ÇÇ q MAX‚ÇÇ<q
-}
\end{code}
