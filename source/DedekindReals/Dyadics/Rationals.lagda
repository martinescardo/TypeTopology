\begin{code}

{-# OPTIONS --without-K --exact-split --safe --auto-inline #-}

open import MLTT.Spartan renaming (_+_ to _‚àî_)

open import DedekindReals.Integers.Integers
open import DedekindReals.Integers.Multiplication
open import DedekindReals.Integers.Parity
open import DedekindReals.Rationals.Fractions hiding (_‚âà_)
open import DedekindReals.Rationals.Multiplication renaming (_*_ to _‚Ñö*_)
open import DedekindReals.Rationals.Rationals
open import Naturals.Division
open import Naturals.Exponents
open import Naturals.HCF
open import Naturals.Order
open import Naturals.Parity
open import Naturals.Properties
open import Notation.Order
open import UF.Base hiding (_‚âà_)
open import UF.Miscelanea
open import UF.Subsingletons
open import TypeTopology.DiscreteAndSeparated
open import TypeTopology.SigmaDiscreteAndTotallySeparated 


module DedekindReals.Dyadics.Rationals where

‚Ñ§[1/2]-cond : (z : ‚Ñ§) (n : ‚Ñï) ‚Üí ùì§‚ÇÄ Ãá
‚Ñ§[1/2]-cond z n = (n Ôºù 0) ‚àî (n > 0 √ó ‚Ñ§odd z)

‚Ñ§[1/2]-cond-is-prop : (z : ‚Ñ§) (n : ‚Ñï) ‚Üí is-prop (‚Ñ§[1/2]-cond z n)
‚Ñ§[1/2]-cond-is-prop z n = +-is-prop ‚Ñï-is-set (√ó-is-prop (<-is-prop-valued 0 n) (‚Ñ§odd-is-prop z)) I
 where
  I : n Ôºù 0 ‚Üí ¬¨ (0 < n √ó ‚Ñ§odd z)
  I nÔºù0 (0<n , odd-z) = not-less-than-itself 0 (transport (0 <_) nÔºù0 0<n)

‚Ñ§[1/2]-cond-is-discrete : ((z , n) : ‚Ñ§ √ó ‚Ñï) ‚Üí is-discrete (‚Ñ§[1/2]-cond z n)
‚Ñ§[1/2]-cond-is-discrete (z , n) = +-is-discrete (Œª x y ‚Üí inl (‚Ñï-is-set x y))
                                   (√ó-is-discrete (Œª x y ‚Üí inl (<-is-prop-valued 0 n x y))
                                                  (Œª x y ‚Üí inl (‚Ñ§odd-is-prop z x y)))
‚Ñ§[1/2] : ùì§‚ÇÄ Ãá
‚Ñ§[1/2] = Œ£ (z , n) Íûâ ‚Ñ§ √ó ‚Ñï , ‚Ñ§[1/2]-cond z n

‚Ñ§[1/2]-is-discrete : is-discrete ‚Ñ§[1/2]
‚Ñ§[1/2]-is-discrete = Œ£-is-discrete (√ó-is-discrete ‚Ñ§-is-discrete ‚Ñï-is-discrete) ‚Ñ§[1/2]-cond-is-discrete

‚Ñ§[1/2]-is-set : is-set ‚Ñ§[1/2]
‚Ñ§[1/2]-is-set = discrete-types-are-sets ‚Ñ§[1/2]-is-discrete

normalise-pos-lemma : (z : ‚Ñ§) (n : ‚Ñï) ‚Üí ‚Ñ§[1/2]
normalise-pos-lemma z 0        = (z , 0) , (inl refl)
normalise-pos-lemma z (succ n) = I (‚Ñ§even-or-odd z)
 where
  I : ‚Ñ§even z ‚àî ‚Ñ§odd z ‚Üí ‚Ñ§[1/2]
  I (inr oz) = (z , succ n) , (inr (‚ãÜ , oz))
  I (inl ez) = II (‚Ñ§even-is-multiple-of-two z ez)
   where
    II : Œ£ k Íûâ ‚Ñ§ , z Ôºù pos 2 * k ‚Üí ‚Ñ§[1/2]
    II (k , e) = normalise-pos-lemma k n

normalise-pos : ‚Ñ§ √ó ‚Ñï ‚Üí ‚Ñ§[1/2]
normalise-pos (z , n) = normalise-pos-lemma z n

normalise-neg-lemma : (z : ‚Ñ§) (n : ‚Ñï) ‚Üí ‚Ñ§[1/2]
normalise-neg-lemma z 0        = (z * pos 2 , 0) , (inl refl)
normalise-neg-lemma z (succ n) = normalise-neg-lemma (z * pos 2) n

normalise-neg : ‚Ñ§ √ó ‚Ñï ‚Üí ‚Ñ§[1/2]
normalise-neg (z , n) = normalise-neg-lemma z n

normalise : ‚Ñ§ √ó ‚Ñ§ ‚Üí ‚Ñ§[1/2]
normalise (z , pos n)     = normalise-pos (z , n)
normalise (z , negsucc n) = normalise-neg (z , n)

0‚Ñ§[1/2] : ‚Ñ§[1/2]
0‚Ñ§[1/2] = (pos 0 , 0) , (inl refl)

1‚Ñ§[1/2] : ‚Ñ§[1/2]
1‚Ñ§[1/2] = (pos 1 , 0) , (inl refl)

_‚âà'_ : (x y : ‚Ñ§ √ó ‚Ñï) ‚Üí ùì§‚ÇÄ Ãá
(x , n) ‚âà' (y , m) = x * pos (2^ m) Ôºù y * pos (2^ n)

_‚âà_ : (x y : ‚Ñ§[1/2]) ‚Üí ùì§‚ÇÄ Ãá
(x , _) ‚âà (y , _) = x ‚âà' y

‚Ñ§[1/2]-lt-lemma : (x : ‚Ñ§) ‚Üí (n : ‚Ñï) ‚Üí ‚Ñ§odd x ‚Üí is-in-lowest-terms (x , pred (2^ (succ n)))
‚Ñ§[1/2]-lt-lemma x n ox = (1-divides-all (abs x) , 1-divides-all (succ (pred (2^ (succ n))))) , I
 where
  I : (d : ‚Ñï) ‚Üí is-common-divisor d (abs x) (succ (pred (2^ (succ n)))) ‚Üí d ‚à£ 1
  I d icd-d = III II
   where
    II : is-common-divisor d (abs x) (2^ (succ n))
    II = transport (Œª - ‚Üí is-common-divisor d (abs x) -) (succ-pred' (2^ (succ n)) (exponents-not-zero (succ n))) icd-d
    III : is-common-divisor d (abs x) (2^ (succ n)) ‚Üí d ‚à£ 1
    III (d|x , d|2^sn) = odd-power-of-two-coprime d (abs x) (succ n) ox d|x d|2^sn

‚Ñ§[1/2]-to-‚Ñö : ‚Ñ§[1/2] ‚Üí ‚Ñö
‚Ñ§[1/2]-to-‚Ñö ((x , n)      , inl nÔºù0)       = (x , 0) , (denom-zero-lt x)
‚Ñ§[1/2]-to-‚Ñö ((x , 0)      , inr (0<n , ox)) = ùüò-elim 0<n
‚Ñ§[1/2]-to-‚Ñö ((x , succ n) , inr (0<n , ox)) = (x , pred (2^ (succ n))) , (‚Ñ§[1/2]-lt-lemma x n ox)


{-
‚âà-to-Ôºù-lemma : ((x , m) (y , n) : ‚Ñ§ √ó ‚Ñï)
              ‚Üí (x , m) ‚âà' (y , n)
              ‚Üí ‚Ñ§[1/2]-cond x m
              ‚Üí ‚Ñ§[1/2]-cond y n
              ‚Üí (x , m) Ôºù (y , n)
‚âà-to-Ôºù-lemma (x , m) (y , n) e (inl mÔºù0)       (inl nÔºù0)       = to-√ó-Ôºù I (mÔºù0 ‚àô nÔºù0 ‚Åª¬π)
 where
  I : x Ôºù y
  I = x              Ôºù‚ü® refl                                  ‚ü©
      x * pos (2^ 0) Ôºù‚ü® ap (Œª z ‚Üí x * (pos (2^ z))) (nÔºù0 ‚Åª¬π) ‚ü©
      x * pos (2^ n) Ôºù‚ü® e                                     ‚ü©
      y * pos (2^ m) Ôºù‚ü® ap (Œª z ‚Üí y * (pos (2^ z))) mÔºù0      ‚ü©
      y * pos (2^ 0) Ôºù‚ü® refl                                  ‚ü©
      y              ‚àé
‚âà-to-Ôºù-lemma (x , m) (y , n) e (inl mÔºù0)       (inr (n>0 , on)) = ùüò-elim (‚Ñ§odd-not-even y on {!!})
 where
  I : ‚Ñ§even {!!}
  I = ‚Ñ§multiple-of-two-even {!!} {!!}
  II : y Ôºù x * pos (2^ n)
  II = y              Ôºù‚ü® refl                                ‚ü©
       y * pos (2^ 0) Ôºù‚ü® ap (Œª z ‚Üí y * pos (2^ z)) (mÔºù0 ‚Åª¬π) ‚ü©
       y * pos (2^ m) Ôºù‚ü® e ‚Åª¬π                                ‚ü©
       x * pos (2^ n) ‚àé
  III : ‚Ñ§even y
  III = transport ‚Ñ§even {!!} I
‚âà-to-Ôºù-lemma (x , m) (y , n) e (inr (m>0 , om)) (inl nÔºù0)       = {!!}
‚âà-to-Ôºù-lemma (x , m) (y , n) e (inr (m>0 , om)) (inr (n>0 , on)) = {!!}

‚âà-to-Ôºù : (x y : ‚Ñ§[1/2]) ‚Üí x ‚âà y ‚Üí x Ôºù y
‚âà-to-Ôºù ((x , n) , p) ((y , m) , q) eq =
 to-subtype-Ôºù (Œª (x , n) ‚Üí ‚Ñ§[1/2]-cond-is-prop x n) (‚âà-to-Ôºù-lemma (x , n) (y , m) eq p q)
-}

\end{code}
