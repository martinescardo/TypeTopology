Ayberk Tosun

Based on some previous work by Mart√≠n Escard√≥.

In this module, we prove the correctness of the internal modulus of continuity
operator.

\begin{code}

{-# OPTIONS --safe --without-K --exact-split #-}

open import UF.FunExt

module EffectfulForcing.Internal.InternalModCont (fe : Fun-Ext) where

open import MLTT.Spartan hiding (rec; _^_)
open import MLTT.List
open import Naturals.Order using (max)
open import EffectfulForcing.Internal.Internal
open import EffectfulForcing.MFPSAndVariations.Church
open import EffectfulForcing.Internal.SystemT
open import EffectfulForcing.MFPSAndVariations.Combinators
open import EffectfulForcing.MFPSAndVariations.Dialogue
 using (eloquent; D; dialogue; eloquent-functions-are-continuous; dialogue-continuity)
open import EffectfulForcing.MFPSAndVariations.Continuity
 using (is-continuous; is-continuous‚ÇÄ; continuity-implies-continuity‚ÇÄ;
        _Ôºù‚¶Ö_‚¶Ü_; _Ôºù‚ü™_‚ü´_; modulus-at‚ÇÄ; maximum)
open import EffectfulForcing.Internal.Correctness
 using (‚åúdialogue‚åù; ‚åúdialogue-tree‚åù-correct')
open import EffectfulForcing.Internal.External
 using (eloquence-theorem; dialogue-tree)
open import EffectfulForcing.MFPSAndVariations.SystemT
 using (type; Œπ; _‚áí_;„Äñ_„Äó)

\end{code}

First, we define some nicer syntax for inherently typed System T terms.

\begin{code}

_‚ä¢_ : Cxt ‚Üí type ‚Üí ùì§‚ÇÄ  Ãá
_‚ä¢_ Œì œÑ = T Œì œÑ

infix 4 _‚ä¢_

baire : type
baire = Œπ ‚áí Œπ

\end{code}

Some examples

\begin{code}

lam-example‚ÇÅ : (n : ‚Ñï) ‚Üí ‚ü¶ ∆õ ŒΩ‚ÇÄ ‚üß‚ÇÄ n Ôºù n
lam-example‚ÇÅ n = refl

lam-example‚ÇÇ : (m n : ‚Ñï) ‚Üí ‚ü¶ ∆õ (∆õ ŒΩ‚ÇÅ) ‚üß‚ÇÄ m n Ôºù m
lam-example‚ÇÇ m n = refl

\end{code}

The `ifz` operator in Agda and in System T respectively. We adopt the convention
of using the superscript `·µÄ` to denote internal version of an operator that we
have defined in Agda.

\begin{code}

ifz : ‚Ñï ‚Üí ‚Ñï ‚Üí ‚Ñï ‚Üí ‚Ñï
ifz zero     n‚ÇÅ n‚ÇÇ = n‚ÇÅ
ifz (succ _) n‚ÇÅ n‚ÇÇ = n‚ÇÇ

ifz·µÄ : {Œì : Cxt} ‚Üí Œì ‚ä¢ Œπ ‚áí Œπ ‚áí Œπ ‚áí Œπ
ifz·µÄ = ∆õ (∆õ (∆õ (Rec (∆õ (∆õ ŒΩ‚ÇÇ)) ŒΩ‚ÇÅ ŒΩ‚ÇÇ)))

ifz·µÄ-correct : (m n‚ÇÅ n‚ÇÇ : ‚Ñï) ‚Üí ‚ü¶ ifz·µÄ ‚üß‚ÇÄ m n‚ÇÅ n‚ÇÇ Ôºù ifz m n‚ÇÅ n‚ÇÇ
ifz·µÄ-correct zero     n‚ÇÅ n‚ÇÇ = refl
ifz·µÄ-correct (succ m) n‚ÇÅ n‚ÇÇ = refl

\end{code}

The predecessor operator.

\begin{code}

pred : ‚Ñï ‚Üí ‚Ñï
pred zero     = zero
pred (succ n) = n

pred·µÄ : {Œì : Cxt} ‚Üí Œì ‚ä¢ Œπ ‚áí Œπ
pred·µÄ = Rec' {œÉ = Œπ} ¬∑ (∆õ (∆õ ŒΩ‚ÇÅ)) ¬∑ Zero

pred·µÄ-correct : (n : ‚Ñï) ‚Üí ‚ü¶ pred·µÄ ‚üß‚ÇÄ n Ôºù pred n
pred·µÄ-correct zero     = refl
pred·µÄ-correct (succ n) = refl

\end{code}

The identity function on the naturals in System T.

\begin{code}

id·µÄ : {Œì : Cxt} ‚Üí Œì ‚ä¢ Œπ ‚áí Œπ
id·µÄ {Œì} = ∆õ ŒΩ‚ÇÄ

\end{code}

We now define the System T version of the `max` operator computing the maximum
of two given natural numbers.

\begin{code}

max·µÄ : {Œì : Cxt} ‚Üí Œì ‚ä¢ Œπ ‚áí (Œπ ‚áí Œπ)
max·µÄ =
 ∆õ (Rec (∆õ (∆õ (∆õ (ifz·µÄ ¬∑ ŒΩ‚ÇÄ ¬∑ Succ ŒΩ‚ÇÇ ¬∑ Succ (ŒΩ‚ÇÅ ¬∑ (pred·µÄ ¬∑ ŒΩ‚ÇÄ)))))) id·µÄ ŒΩ‚ÇÄ)

max·µÄ-correct : (m n : ‚Ñï) ‚Üí ‚ü¶ max·µÄ ‚üß‚ÇÄ m n Ôºù max m n
max·µÄ-correct zero     n        = refl
max·µÄ-correct (succ m) zero     = refl
max·µÄ-correct (succ m) (succ n) =
 ‚ü¶ max·µÄ ‚üß‚ÇÄ (succ m) (succ n)                                            Ôºù‚ü® refl ‚ü©
 ‚ü¶ ifz·µÄ ‚üß‚ÇÄ (succ n) (succ m) (succ (‚ü¶ max·µÄ ‚üß‚ÇÄ m (‚ü¶ pred·µÄ ‚üß‚ÇÄ (succ n)))) Ôºù‚ü® ‚Ö†    ‚ü©
 ifz (succ n) (succ m) (succ (‚ü¶ max·µÄ ‚üß‚ÇÄ m (‚ü¶ pred·µÄ ‚üß‚ÇÄ (succ n))))       Ôºù‚ü® refl ‚ü©
 succ (‚ü¶ max·µÄ ‚üß‚ÇÄ m (‚ü¶ pred·µÄ ‚üß‚ÇÄ (succ n)))                               Ôºù‚ü® refl ‚ü©
 succ (‚ü¶ max·µÄ ‚üß‚ÇÄ m (pred (succ n)))                                     Ôºù‚ü® ‚Ö°    ‚ü©
 succ (max m n)                                                         Ôºù‚ü® refl ‚ü©
 max (succ m) (succ n)                                                  ‚àé
  where
   ‚Ö† = ifz·µÄ-correct (succ n) (succ m) (succ (‚ü¶ max·µÄ ‚üß‚ÇÄ m (‚ü¶ pred·µÄ ‚üß‚ÇÄ (succ n))))
   ‚Ö° = ap succ (max·µÄ-correct m n)

\end{code}

We will use the `max·µÄ` operator to define the internal modulus of continuity
operator. To work towards this, we define the external version of the operator
that we call `max-question`.

There will be three different versions of this operator:

  1. `max-question`, that works on the external inductive type encoding of
     dialogue trees in Agda,
  2. `max-question‚ãÜ`, that works on the external Church encoding of dialogue
     trees in Agda, and
  3. `max-question·µÄ`, that is a System T function working on the Church encoding
     of dialogue trees in System T.

\begin{code}

max-question : D ‚Ñï ‚Ñï ‚Ñï ‚Üí (‚Ñï ‚Üí ‚Ñï) ‚Üí ‚Ñï
max-question (D.Œ∑ n)   Œ± = 0
max-question (D.Œ≤ œÜ n) Œ± = max n (max-question (œÜ (Œ± n)) Œ±)

max-question‚ÇÄ : D ‚Ñï ‚Ñï ‚Ñï ‚Üí (‚Ñï ‚Üí ‚Ñï) ‚Üí ‚Ñï
max-question‚ÇÄ d Œ± = maximum (pr‚ÇÅ (dialogue-continuity d Œ±))

\end{code}

\begin{code}

external-mod-cont : D ‚Ñï ‚Ñï ‚Ñï ‚Üí (‚Ñï ‚Üí ‚Ñï) ‚Üí ‚Ñï
external-mod-cont d Œ± = succ (max-question d Œ±)

external-mod-cont‚Ä≤ : (d : D ‚Ñï ‚Ñï ‚Ñï) ‚Üí (‚Ñï ‚Üí ‚Ñï) ‚Üí ‚Ñï
external-mod-cont‚Ä≤ d Œ± = succ (max-question‚ÇÄ d Œ±)

max-ext-equal-to-max-ext‚Ä≤ : (d : D ‚Ñï ‚Ñï ‚Ñï) (Œ± : ‚Ñï ‚Üí ‚Ñï)
                          ‚Üí max-question d Œ± Ôºù max-question‚ÇÄ d Œ±
max-ext-equal-to-max-ext‚Ä≤ (D.Œ∑ n)   Œ± = refl
max-ext-equal-to-max-ext‚Ä≤ (D.Œ≤ œÜ n) Œ± = ap (max n) (max-ext-equal-to-max-ext‚Ä≤ (œÜ (Œ± n)) Œ±)

max-question‚ãÜ : D‚ãÜ ‚Ñï ‚Ñï ‚Ñï ‚Ñï ‚Üí (‚Ñï ‚Üí ‚Ñï) ‚Üí ‚Ñï
max-question‚ãÜ d Œ± = d (Œª _ ‚Üí 0) (Œª g x ‚Üí max x (g (Œ± x)))

max-question-int : {Œì : Cxt} ‚Üí Œì ‚ä¢ (‚åúB‚åù Œπ Œπ) ‚áí baire ‚áí Œπ
max-question-int = ∆õ (∆õ (ŒΩ‚ÇÅ ¬∑ (∆õ Zero) ¬∑ ∆õ (∆õ (max·µÄ ¬∑ ŒΩ‚ÇÄ ¬∑ (ŒΩ‚ÇÅ ¬∑ (ŒΩ‚ÇÇ ¬∑ ŒΩ‚ÇÄ))))))

internal-mod-cont : {Œì : Cxt}
                   ‚Üí Œì ‚ä¢ baire ‚áí Œπ
                   ‚Üí B-context„Äê Œì „Äë Œπ ‚ä¢ (Œπ ‚áí Œπ) ‚áí Œπ
internal-mod-cont t = comp ¬∑ Succ' ¬∑ (max-question-int ¬∑ ‚åúdialogue-tree‚åù t)

-- Use the 3 results:

_ = ‚åúdialogue-tree‚åù-correct'
_ = eloquence-theorem
_ = continuity-implies-continuity‚ÇÄ

max-question-agreement : (d : D ‚Ñï ‚Ñï ‚Ñï) (Œ± : ‚Ñï ‚Üí ‚Ñï)
                       ‚Üí max-question d Œ± Ôºù max-question‚ãÜ (church-encode d) Œ±
max-question-agreement (D.Œ∑ n)   Œ± = refl
max-question-agreement (D.Œ≤ œÜ n) Œ± = ‚Ä†
 where
  IH : max-question (œÜ (Œ± n)) Œ±
     Ôºù max-question‚ãÜ (church-encode (œÜ (Œ± n))) Œ±
  IH = max-question-agreement (œÜ (Œ± n)) Œ±

  ‚Ä† : max n (max-question (œÜ (Œ± n)) Œ±)
    Ôºù church-encode (D.Œ≤ œÜ n) (Œª _ ‚Üí 0) (Œª g x ‚Üí max x (g (Œ± x)))
  ‚Ä† = ap (max n) IH

main-lemma : (d : ‚å©‚å™ ‚ä¢ ‚åúD‚ãÜ‚åù Œπ Œπ Œπ Œπ) (Œ± : ‚Ñï ‚Üí ‚Ñï)
           ‚Üí ‚ü¶ max-question-int ¬∑ d ‚üß‚ÇÄ Œ± Ôºù max-question‚ãÜ ‚ü¶ d ‚üß‚ÇÄ Œ±
main-lemma d Œ± =
 ‚ü¶ max-question-int ¬∑ d ‚üß‚ÇÄ Œ±         Ôºù‚ü® refl ‚ü©
 ‚ü¶ d ‚üß‚ÇÄ (Œª _ ‚Üí 0) (‚ü¶ ∆õ (∆õ (max·µÄ ¬∑ ŒΩ‚ÇÄ ¬∑ (ŒΩ‚ÇÅ ¬∑ (ŒΩ‚ÇÇ ¬∑ ŒΩ‚ÇÄ)))) ‚üß ((‚ü®‚ü© ‚Äö ‚ü¶ d ‚üß‚ÇÄ) ‚Äö Œ±))   Ôºù‚ü®  refl ‚ü©
 ‚ü¶ d ‚üß‚ÇÄ (Œª _ ‚Üí 0) (Œª g x ‚Üí ‚ü¶ max·µÄ ‚üß‚ÇÄ x (g (Œ± x)))                                  Ôºù‚ü® ‚Ä†    ‚ü©
 ‚ü¶ d ‚üß‚ÇÄ (Œª _ ‚Üí 0) (Œª g x ‚Üí max x (g (Œ± x)))                                        Ôºù‚ü® refl ‚ü©
 max-question‚ãÜ ‚ü¶ d ‚üß‚ÇÄ Œ±    ‚àé
  where
   ‚Ä† = ap
        (‚ü¶ d ‚üß‚ÇÄ (Œª _ ‚Üí 0))
        (dfunext fe Œª g ‚Üí dfunext fe Œª x ‚Üí max·µÄ-correct x (g (Œ± x)))

internal-mod-cont-correct : (t : ‚å©‚å™ ‚ä¢ (baire ‚áí Œπ)) (Œ± Œ≤ : ‚å©‚å™ ‚ä¢ baire)
                          ‚Üí ‚ü¶ Œ± ‚üß‚ÇÄ Ôºù‚¶Ö ‚ü¶ internal-mod-cont t ¬∑ Œ± ‚üß‚ÇÄ ‚¶Ü ‚ü¶ Œ≤ ‚üß‚ÇÄ
                          ‚Üí ‚ü¶ t ¬∑ Œ± ‚üß‚ÇÄ Ôºù ‚ü¶ t ¬∑  Œ≤ ‚üß‚ÇÄ
internal-mod-cont-correct t Œ± Œ≤ p = ‚Ä†
 where
  ‚åúm‚åù : B-context„Äê ‚å©‚å™ „Äë (baire ‚áí Œπ) ‚ä¢ Œπ
  ‚åúm‚åù = internal-mod-cont t ¬∑ Œ±

  m : ‚Ñï
  m = ‚ü¶ ‚åúm‚åù ‚üß‚ÇÄ

  Œµ : eloquent ‚ü¶ t ‚üß‚ÇÄ
  Œµ = eloquence-theorem ‚ü¶ t ‚üß‚ÇÄ (t , refl)

  d‚Çú : D ‚Ñï ‚Ñï ‚Ñï
  d‚Çú = pr‚ÇÅ Œµ

  foo : dialogue-tree t Ôºù d‚Çú
  foo = refl

  œÜ : dialogue d‚Çú ‚àº ‚ü¶ t ‚üß‚ÇÄ
  œÜ = pr‚ÇÇ Œµ

  Œ≥ : ‚ü¶ t ‚üß‚ÇÄ ‚ü¶ Œ± ‚üß‚ÇÄ Ôºù dialogue d‚Çú ‚ü¶ Œ± ‚üß‚ÇÄ
  Œ≥ = œÜ ‚ü¶ Œ± ‚üß‚ÇÄ ‚Åª¬π

  p‚Ä≤ : ‚ü¶ Œ± ‚üß‚ÇÄ Ôºù‚¶Ö m ‚¶Ü ‚ü¶ Œ≤ ‚üß‚ÇÄ
  p‚Ä≤ = p

  c : is-continuous ‚ü¶ t ‚üß‚ÇÄ
  c = eloquent-functions-are-continuous ‚ü¶ t ‚üß‚ÇÄ Œµ

  c‚ÇÄ : is-continuous‚ÇÄ ‚ü¶ t ‚üß‚ÇÄ
  c‚ÇÄ = continuity-implies-continuity‚ÇÄ ‚ü¶ t ‚üß‚ÇÄ c

  m‚ÇÄ : ‚Ñï
  m‚ÇÄ = pr‚ÇÅ (c‚ÇÄ ‚ü¶ Œ± ‚üß‚ÇÄ)

  lemma : ‚ü¶ ‚åúdialogue-tree‚åù t ‚üß‚ÇÄ Ôºù church-encode (dialogue-tree t)
  lemma = dfunext fe {!!}

  q : ‚ü¶ internal-mod-cont t ¬∑ Œ± ‚üß‚ÇÄ Ôºù m‚ÇÄ
  q = ‚ü¶ internal-mod-cont t ¬∑ Œ± ‚üß‚ÇÄ                                  Ôºù‚ü® refl ‚ü©
      succ (‚ü¶ max-question-int ¬∑ (‚åúdialogue-tree‚åù t) ‚üß‚ÇÄ ‚ü¶ Œ± ‚üß‚ÇÄ)     Ôºù‚ü® ap succ (main-lemma (‚åúdialogue-tree‚åù t) ‚ü¶ Œ± ‚üß‚ÇÄ) ‚ü©
      succ (max-question‚ãÜ ‚ü¶ ‚åúdialogue-tree‚åù t  ‚üß‚ÇÄ ‚ü¶ Œ± ‚üß‚ÇÄ) Ôºù‚ü® ‚ô£ ‚ü©
      succ (max-question‚ãÜ (church-encode d‚Çú) ‚ü¶ Œ± ‚üß‚ÇÄ)      Ôºù‚ü® ap succ (max-question-agreement d‚Çú ‚ü¶ Œ± ‚üß‚ÇÄ ‚Åª¬π) ‚ü©
      succ (max-question d‚Çú ‚ü¶ Œ± ‚üß‚ÇÄ)                             Ôºù‚ü® ap succ (max-ext-equal-to-max-ext‚Ä≤ d‚Çú ‚ü¶ Œ± ‚üß‚ÇÄ) ‚ü©
      succ (max-question‚ÇÄ d‚Çú ‚ü¶ Œ± ‚üß‚ÇÄ)                                Ôºù‚ü® refl ‚ü©
      modulus-at‚ÇÄ ‚ü¶ t ‚üß‚ÇÄ c‚ÇÄ ‚ü¶ Œ± ‚üß‚ÇÄ                                  ‚àé
       where
        ‚ô£ : succ (max-question‚ãÜ ‚ü¶ ‚åúdialogue-tree‚åù t ‚üß‚ÇÄ ‚ü¶ Œ± ‚üß‚ÇÄ)
          Ôºù succ (max-question‚ãÜ (church-encode d‚Çú) ‚ü¶ Œ± ‚üß‚ÇÄ)
        ‚ô£ = ap succ (ap (Œª - ‚Üí (max-question‚ãÜ - ‚ü¶ Œ± ‚üß‚ÇÄ)) lemma)

  ‚Ä° : ‚ü¶ Œ± ‚üß‚ÇÄ Ôºù‚¶Ö m‚ÇÄ ‚¶Ü ‚ü¶ Œ≤ ‚üß‚ÇÄ
  ‚Ä° = transport (Œª - ‚Üí ‚ü¶ Œ± ‚üß‚ÇÄ Ôºù‚¶Ö - ‚¶Ü ‚ü¶ Œ≤ ‚üß‚ÇÄ) q p

  ‚Ä† : ‚ü¶ t ‚üß‚ÇÄ ‚ü¶ Œ± ‚üß‚ÇÄ Ôºù ‚ü¶ t ‚üß‚ÇÄ ‚ü¶ Œ≤ ‚üß‚ÇÄ
  ‚Ä† = pr‚ÇÇ (c‚ÇÄ ‚ü¶ Œ± ‚üß‚ÇÄ) ‚ü¶ Œ≤ ‚üß‚ÇÄ ‚Ä°

\end{code}
