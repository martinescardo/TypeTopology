Ayberk Tosun

Based on some previous work by Mart√≠n Escard√≥.

In this module, we prove the correctness of the internal modulus of continuity
operator.

\begin{code}

{-# OPTIONS --safe --without-K #-}

open import UF.FunExt

module EffectfulForcing.Internal.InternalModCont (fe : Fun-Ext) where

open import MLTT.Spartan hiding (rec; _^_)
open import MLTT.List
open import Naturals.Order using (max)
open import EffectfulForcing.Internal.Internal
open import EffectfulForcing.MFPSAndVariations.Church
open import EffectfulForcing.Internal.SystemT
open import EffectfulForcing.MFPSAndVariations.Combinators
open import EffectfulForcing.MFPSAndVariations.Dialogue
 using (eloquent; D; dialogue; eloquent-functions-are-continuous;
        dialogue-continuity; generic)
open import EffectfulForcing.MFPSAndVariations.Continuity
 using (is-continuous; _Ôºù‚ü™_‚ü´_)
open import EffectfulForcing.MFPSAndVariations.ContinuityProperties fe
open import EffectfulForcing.Internal.Correctness
 using (Rnorm-generic; is-dialogue-for; Rnorm-lemma‚ÇÄ; Rnorm;
        dialogue-tree-agreement; ‚åúdialogue‚åù)
open import EffectfulForcing.Internal.External
 using (eloquence-theorem; dialogue-tree; ‚ü™‚ü´; B‚ü¶_‚üß; B‚ü¶_‚üß‚ÇÄ)
open import EffectfulForcing.Internal.Subst
open import EffectfulForcing.Internal.ExtensionalEquality
open import EffectfulForcing.MFPSAndVariations.SystemT
 using (type; Œπ; _‚áí_;„Äñ_„Äó)

\end{code}

First, we define some nicer syntax for inherently typed System T terms.

\begin{code}

_‚ä¢_ : Cxt ‚Üí type ‚Üí ùì§‚ÇÄ  Ãá
_‚ä¢_ Œì œÑ = T Œì œÑ

infix 4 _‚ä¢_

baire : type
baire = Œπ ‚áí Œπ

\end{code}

Some examples

\begin{code}

lam-example‚ÇÅ : (n : ‚Ñï) ‚Üí ‚ü¶ ∆õ ŒΩ‚ÇÄ ‚üß‚ÇÄ n Ôºù n
lam-example‚ÇÅ n = refl

lam-example‚ÇÇ : (m n : ‚Ñï) ‚Üí ‚ü¶ ∆õ (∆õ ŒΩ‚ÇÅ) ‚üß‚ÇÄ m n Ôºù m
lam-example‚ÇÇ m n = refl

\end{code}

The `ifz` operator in Agda and in System T respectively. We adopt the convention
of using the superscript `·µÄ` to denote internal version of an operator that we
have defined in Agda.

\begin{code}

ifz : ‚Ñï ‚Üí ‚Ñï ‚Üí ‚Ñï ‚Üí ‚Ñï
ifz zero     n‚ÇÅ n‚ÇÇ = n‚ÇÅ
ifz (succ _) n‚ÇÅ n‚ÇÇ = n‚ÇÇ

ifz·µÄ : {Œì : Cxt} ‚Üí Œì ‚ä¢ Œπ ‚áí Œπ ‚áí Œπ ‚áí Œπ
ifz·µÄ = ∆õ (∆õ (∆õ (Rec (∆õ (∆õ ŒΩ‚ÇÇ)) ŒΩ‚ÇÅ ŒΩ‚ÇÇ)))

ifz·µÄ-correct : (m n‚ÇÅ n‚ÇÇ : ‚Ñï) ‚Üí ‚ü¶ ifz·µÄ ‚üß‚ÇÄ m n‚ÇÅ n‚ÇÇ Ôºù ifz m n‚ÇÅ n‚ÇÇ
ifz·µÄ-correct zero     n‚ÇÅ n‚ÇÇ = refl
ifz·µÄ-correct (succ m) n‚ÇÅ n‚ÇÇ = refl

\end{code}

The predecessor operator.

\begin{code}

pred·µÄ : {Œì : Cxt} ‚Üí Œì ‚ä¢ Œπ ‚áí Œπ
pred·µÄ = Rec' {œÉ = Œπ} ¬∑ (∆õ (∆õ ŒΩ‚ÇÅ)) ¬∑ Zero

pred·µÄ-correct : (n : ‚Ñï) ‚Üí ‚ü¶ pred·µÄ ‚üß‚ÇÄ n Ôºù pred n
pred·µÄ-correct zero     = refl
pred·µÄ-correct (succ n) = refl

\end{code}

The identity function on the naturals in System T.

\begin{code}

id·µÄ : {Œì : Cxt} ‚Üí Œì ‚ä¢ Œπ ‚áí Œπ
id·µÄ {Œì} = ∆õ ŒΩ‚ÇÄ

\end{code}

We now define the System T version of the `max` operator computing the maximum
of two given natural numbers.

\begin{code}

max·µÄ : {Œì : Cxt} ‚Üí Œì ‚ä¢ Œπ ‚áí (Œπ ‚áí Œπ)
max·µÄ =
 ∆õ (Rec (∆õ (∆õ (∆õ (ifz·µÄ ¬∑ ŒΩ‚ÇÄ ¬∑ Succ ŒΩ‚ÇÇ ¬∑ Succ (ŒΩ‚ÇÅ ¬∑ (pred·µÄ ¬∑ ŒΩ‚ÇÄ)))))) id·µÄ ŒΩ‚ÇÄ)

max·µÄ-correct : (m n : ‚Ñï) ‚Üí ‚ü¶ max·µÄ ‚üß‚ÇÄ m n Ôºù max m n
max·µÄ-correct zero     n        = refl
max·µÄ-correct (succ m) zero     = refl
max·µÄ-correct (succ m) (succ n) =
 ‚ü¶ max·µÄ ‚üß‚ÇÄ (succ m) (succ n)                                            Ôºù‚ü® refl ‚ü©
 ‚ü¶ ifz·µÄ ‚üß‚ÇÄ (succ n) (succ m) (succ (‚ü¶ max·µÄ ‚üß‚ÇÄ m (‚ü¶ pred·µÄ ‚üß‚ÇÄ (succ n)))) Ôºù‚ü® ‚Ö†    ‚ü©
 ifz (succ n) (succ m) (succ (‚ü¶ max·µÄ ‚üß‚ÇÄ m (‚ü¶ pred·µÄ ‚üß‚ÇÄ (succ n))))       Ôºù‚ü® refl ‚ü©
 succ (‚ü¶ max·µÄ ‚üß‚ÇÄ m (‚ü¶ pred·µÄ ‚üß‚ÇÄ (succ n)))                               Ôºù‚ü® refl ‚ü©
 succ (‚ü¶ max·µÄ ‚üß‚ÇÄ m (pred (succ n)))                                     Ôºù‚ü® ‚Ö°    ‚ü©
 succ (max m n)                                                         Ôºù‚ü® refl ‚ü©
 max (succ m) (succ n)                                                  ‚àé
  where
   ‚Ö† = ifz·µÄ-correct (succ n) (succ m) (succ (‚ü¶ max·µÄ ‚üß‚ÇÄ m (‚ü¶ pred·µÄ ‚üß‚ÇÄ (succ n))))
   ‚Ö° = ap succ (max·µÄ-correct m n)

\end{code}

We will use the `max·µÄ` operator to define the internal modulus of continuity
operator. To work towards this, we define the external version of the operator
that we call `max-question`.

There will be three different versions of this operator:

  1. `max-question`, that works on the external inductive type encoding of
     dialogue trees in Agda,
  2. `max-question‚ãÜ`, that works on the external Church encoding of dialogue
     trees in Agda, and
  3. `max-question·µÄ`, that is a System T function working on the Church encoding
     of dialogue trees in System T.

There is also `max-question‚ÇÄ` which is an alternative definition of
`max-question` that uses `dialogue-continuity`. This is used to facilitate a
proof.

\begin{code}

max-question : D ‚Ñï ‚Ñï ‚Ñï ‚Üí (‚Ñï ‚Üí ‚Ñï) ‚Üí ‚Ñï
max-question (D.Œ∑ n)   Œ± = 0
max-question (D.Œ≤ œÜ n) Œ± = max n (max-question (œÜ (Œ± n)) Œ±)

max-question‚ÇÄ : D ‚Ñï ‚Ñï ‚Ñï ‚Üí (‚Ñï ‚Üí ‚Ñï) ‚Üí ‚Ñï
max-question‚ÇÄ d Œ± = maximum (pr‚ÇÅ (dialogue-continuity d Œ±))

max-question‚ÇÄ-agreement : (d : D ‚Ñï ‚Ñï ‚Ñï) (Œ± : ‚Ñï ‚Üí ‚Ñï)
                        ‚Üí max-question d Œ± Ôºù max-question‚ÇÄ d Œ±
max-question‚ÇÄ-agreement (D.Œ∑ n)   Œ± = refl
max-question‚ÇÄ-agreement (D.Œ≤ œÜ n) Œ± =
 ap (max n) (max-question‚ÇÄ-agreement (œÜ (Œ± n)) Œ±)

max-question‚ãÜ : D‚ãÜ ‚Ñï ‚Ñï ‚Ñï ‚Ñï ‚Üí (‚Ñï ‚Üí ‚Ñï) ‚Üí ‚Ñï
max-question‚ãÜ d Œ± = d (Œª _ ‚Üí 0) (Œª g x ‚Üí max x (g (Œ± x)))

max-question·µÄ : {Œì : Cxt} ‚Üí Œì ‚ä¢ (‚åúB‚åù Œπ Œπ) ‚áí baire ‚áí Œπ
max-question·µÄ = ∆õ (∆õ (ŒΩ‚ÇÅ ¬∑ ∆õ Zero ¬∑ ∆õ (∆õ (max·µÄ ¬∑ ŒΩ‚ÇÄ ¬∑ (ŒΩ‚ÇÅ ¬∑ (ŒΩ‚ÇÇ ¬∑ ŒΩ‚ÇÄ))))))

max-question‚ãÜ-agreement : (d : D ‚Ñï ‚Ñï ‚Ñï) (Œ± : ‚Ñï ‚Üí ‚Ñï)
                        ‚Üí max-question d Œ± Ôºù max-question‚ãÜ (church-encode d) Œ±
max-question‚ãÜ-agreement (D.Œ∑ n)   Œ± = refl
max-question‚ãÜ-agreement (D.Œ≤ œÜ n) Œ± = ‚Ä†
 where
  IH : max-question (œÜ (Œ± n)) Œ±
     Ôºù max-question‚ãÜ (church-encode (œÜ (Œ± n))) Œ±
  IH = max-question‚ãÜ-agreement (œÜ (Œ± n)) Œ±

  ‚Ä† : max n (max-question (œÜ (Œ± n)) Œ±)
    Ôºù church-encode (D.Œ≤ œÜ n) (Œª _ ‚Üí 0) (Œª g x ‚Üí max x (g (Œ± x)))
  ‚Ä† = ap (max n) IH

-- Re-factored to avoid using function extensionality together with Bruno Paiva.
max-question·µÄ-agreement-with-max-question‚ãÜ : ‚ü¶ max-question·µÄ ‚üß‚ÇÄ ‚â° max-question‚ãÜ
max-question·µÄ-agreement-with-max-question‚ãÜ q {Œ±} {Œ≤} eq = q (Œª _ ‚Üí refl) ‚Ä°
 where
  ‚Ä° : {f g : ‚Ñï ‚Üí ‚Ñï}
    ‚Üí (k : f ‚â° g) {i j : ‚Ñï} ‚Üí i Ôºù j ‚Üí ‚ü¶ max·µÄ ‚üß‚ÇÄ i (f (Œ± i)) Ôºù max j (g (Œ≤ j))
  ‚Ä° {f} {g} œÜ {i} {_} refl = transport
                              (Œª - ‚Üí ‚ü¶ max·µÄ ‚üß‚ÇÄ i - Ôºù max i (g (Œ≤ i)))
                              (œÜ (eq refl) ‚Åª¬π)
                              (max·µÄ-correct i (g (Œ≤ i)))

\end{code}

The modulus of continuity given by a dialogue tree is the successor of the
maximum question in it. Again, we define three different versions of the modulus
of continuity operation following the same conventions.

  1. `modulus` following `max-question`,
  2. `modulus‚ÇÄ` following `max-question‚ÇÄ`, and
  3. `modulus·µÄ` following `max-question·µÄ`.

\begin{code}

modulus : D ‚Ñï ‚Ñï ‚Ñï ‚Üí (‚Ñï ‚Üí ‚Ñï) ‚Üí ‚Ñï
modulus d Œ± = succ (max-question d Œ±)

modulus‚ÇÄ : (d : D ‚Ñï ‚Ñï ‚Ñï) ‚Üí (‚Ñï ‚Üí ‚Ñï) ‚Üí ‚Ñï
modulus‚ÇÄ d Œ± = succ (max-question‚ÇÄ d Œ±)

modulus‚ãÜ : D‚ãÜ ‚Ñï ‚Ñï ‚Ñï ‚Ñï ‚Üí (‚Ñï ‚Üí ‚Ñï) ‚Üí ‚Ñï
modulus‚ãÜ d Œ± = succ (max-question‚ãÜ d Œ±)

modulus·µÄ : ‚å©‚å™ ‚ä¢ ‚åúB‚åù Œπ Œπ ‚áí (Œπ ‚áí Œπ) ‚áí Œπ
modulus·µÄ = ∆õ (∆õ (Succ' ¬∑ (max-question·µÄ ¬∑ ŒΩ‚ÇÅ ¬∑ ŒΩ‚ÇÄ)))

\end{code}

The correctness of `modulus·µÄ` is given in `internal-mod-cont-correct` below. To
prove this, we use the lemma `main-lemma`, which contains the main content of
the proof.

\begin{code}


main-lemma : (t : ‚å©‚å™ ‚ä¢ (baire ‚áí Œπ)) (Œ± : ‚Ñï ‚Üí ‚Ñï)
           ‚Üí ‚ü¶ max-question·µÄ ¬∑ (‚åúdialogue-tree‚åù t) ‚üß‚ÇÄ Œ±
             Ôºù max-question‚ÇÄ (dialogue-tree t) Œ±
main-lemma t Œ± =
 ‚ü¶ max-question·µÄ ¬∑ ‚åúdialogue-tree‚åù t ‚üß‚ÇÄ Œ±                 Ôºù‚ü® refl ‚ü©
 ‚ü¶ max-question·µÄ ‚üß‚ÇÄ ‚ü¶ ‚åúdialogue-tree‚åù t ‚üß‚ÇÄ Œ±              Ôºù‚ü® ‚Ö†    ‚ü©
 max-question‚ãÜ (church-encode (dialogue-tree t)) Œ±        Ôºù‚ü® ‚Ö°    ‚ü©
 max-question  (dialogue-tree t) Œ±                        Ôºù‚ü® ‚Ö¢    ‚ü©
 max-question‚ÇÄ (dialogue-tree t) Œ±                        ‚àé
  where
   ‚Ä† : Rnorm (B‚ü¶ t ‚üß‚ÇÄ generic) (‚åú t ‚åù ¬∑ ‚åúgeneric‚åù)
   ‚Ä† = Rnorm-lemma‚ÇÄ t generic ‚åúgeneric‚åù Rnorm-generic

   ‚Ö† = max-question·µÄ-agreement-with-max-question‚ãÜ
        (dialogue-tree-agreement t)
        (ap Œ±)
   ‚Ö° = max-question‚ãÜ-agreement (dialogue-tree t) Œ± ‚Åª¬π
   ‚Ö¢ = max-question‚ÇÄ-agreement (dialogue-tree t) Œ±

internal-mod-cont-correct : (t : ‚å©‚å™ ‚ä¢ (baire ‚áí Œπ)) (Œ± Œ≤ : ‚å©‚å™ ‚ä¢ baire)
                          ‚Üí ‚ü¶ Œ± ‚üß‚ÇÄ Ôºù‚¶Ö ‚ü¶ modulus·µÄ ¬∑ (‚åúdialogue-tree‚åù t) ¬∑ Œ± ‚üß‚ÇÄ ‚¶Ü ‚ü¶ Œ≤ ‚üß‚ÇÄ
                          ‚Üí ‚ü¶ t ¬∑ Œ± ‚üß‚ÇÄ Ôºù ‚ü¶ t ¬∑  Œ≤ ‚üß‚ÇÄ
internal-mod-cont-correct t Œ± Œ≤ p = ‚Ä†
 where
  Œµ : eloquent ‚ü¶ t ‚üß‚ÇÄ
  Œµ = eloquence-theorem ‚ü¶ t ‚üß‚ÇÄ (t , refl)

  c : is-continuous ‚ü¶ t ‚üß‚ÇÄ
  c = eloquent-functions-are-continuous ‚ü¶ t ‚üß‚ÇÄ Œµ

  c‚ÇÄ : is-continuous‚ÇÄ ‚ü¶ t ‚üß‚ÇÄ
  c‚ÇÄ = continuity-implies-continuity‚ÇÄ ‚ü¶ t ‚üß‚ÇÄ c

  m‚ÇÄ : ‚Ñï
  m‚ÇÄ = succ (max-question‚ÇÄ (dialogue-tree t) ‚ü¶ Œ± ‚üß‚ÇÄ)

  q : ‚ü¶ modulus·µÄ ¬∑ (‚åúdialogue-tree‚åù t) ¬∑ Œ± ‚üß‚ÇÄ Ôºù m‚ÇÄ
  q = ap succ (main-lemma t ‚ü¶ Œ± ‚üß‚ÇÄ)

  ‚Ä° : ‚ü¶ Œ± ‚üß‚ÇÄ Ôºù‚¶Ö m‚ÇÄ ‚¶Ü ‚ü¶ Œ≤ ‚üß‚ÇÄ
  ‚Ä° = transport (Œª - ‚Üí ‚ü¶ Œ± ‚üß‚ÇÄ Ôºù‚¶Ö - ‚¶Ü ‚ü¶ Œ≤ ‚üß‚ÇÄ) q p

  ‚Ä† : ‚ü¶ t ‚üß‚ÇÄ ‚ü¶ Œ± ‚üß‚ÇÄ Ôºù ‚ü¶ t ‚üß‚ÇÄ ‚ü¶ Œ≤ ‚üß‚ÇÄ
  ‚Ä† = pr‚ÇÇ (c‚ÇÄ ‚ü¶ Œ± ‚üß‚ÇÄ) ‚ü¶ Œ≤ ‚üß‚ÇÄ ‚Ä°

\end{code}

While I was working on the proof, I wrote down the following fact, which turned
out not to be necessary for the proof. However, I am not taking it out of this
file as it might be useful in the future.

Update: the fact has now been commented out, because it was something
non-essential that required function extensionality and I have not removed the
use of function extensionality from it yet.

\begin{code}

-- church-encode-to-D-rec : {X : ùì§ Ãá } {Y : ùì• Ãá } {Z : ùì¶ Ãá } {A : ùì£  Ãá}
--                      ‚Üí (d : D X Y Z)
--                      ‚Üí (Œ∑‚Ä≤ : Z ‚Üí A)
--                      ‚Üí (Œ≤‚Ä≤ : (Y ‚Üí A) ‚Üí X ‚Üí A)
--                      ‚Üí church-encode d Œ∑‚Ä≤ Œ≤‚Ä≤ Ôºù D-rec Œ∑‚Ä≤ Œ≤‚Ä≤ d
-- church-encode-to-D-rec (D.Œ∑ _)   Œ∑‚Ä≤ Œ≤‚Ä≤ = refl
-- church-encode-to-D-rec {Y = Y} (D.Œ≤ œÜ x) Œ∑‚Ä≤ Œ≤‚Ä≤ = ap (Œª - ‚Üí Œ≤‚Ä≤ - x) {!!} -- (dfunext fe ‚Ä†)
--  where
--   ‚Ä† : (y : Y) ‚Üí church-encode (œÜ y) Œ∑‚Ä≤ Œ≤‚Ä≤ Ôºù D-rec Œ∑‚Ä≤ Œ≤‚Ä≤ (œÜ y)
--   ‚Ä† y = church-encode-to-D-rec (œÜ y) Œ∑‚Ä≤ Œ≤‚Ä≤

\end{code}
