\begin{code}

{-# OPTIONS --safe --without-K --exact-split #-}

module EffectfulForcing.Internal.InternalModCont where

open import MLTT.Spartan hiding (rec; _^_)
open import EffectfulForcing.Internal.Internal
open import EffectfulForcing.Internal.SystemT
open import EffectfulForcing.MFPSAndVariations.Combinators
open import EffectfulForcing.MFPSAndVariations.Continuity
open import EffectfulForcing.Internal.Correctness using (‚åúdialogue-tree‚åù-correct')
open import EffectfulForcing.Internal.External using (eloquence-theorem)
open import EffectfulForcing.MFPSAndVariations.SystemT using (type; Œπ; _‚áí_)

\end{code}

The following is copied from Mart√≠n Escard√≥'s work in the
`MFPSAndVariations.Internal` module

\begin{code}

_‚ä¢_ : Cxt ‚Üí type ‚Üí ùì§‚ÇÄ  Ãá
_‚ä¢_ Œì œÑ = T Œì œÑ

infix 4 _‚ä¢_

Œ∫ : type
Œ∫ = Œπ ‚áí Œπ

lam-example‚ÇÅ : (n : ‚Ñï) ‚Üí ‚ü¶ ∆õ ŒΩ‚ÇÄ ‚üß‚ÇÄ n Ôºù n
lam-example‚ÇÅ n = refl

lam-example‚ÇÇ : (m n : ‚Ñï) ‚Üí ‚ü¶ ∆õ (∆õ ŒΩ‚ÇÅ) ‚üß‚ÇÄ m n Ôºù m
lam-example‚ÇÇ m n = refl

ifz : ‚Ñï ‚Üí ‚Ñï ‚Üí ‚Ñï ‚Üí ‚Ñï
ifz zero     n‚ÇÅ n‚ÇÇ = n‚ÇÅ
ifz (succ _) n‚ÇÅ n‚ÇÇ = n‚ÇÇ

max‚ÇÄ : ‚Ñï ‚Üí ‚Ñï ‚Üí ‚Ñï
max‚ÇÄ zero     = Œª n ‚Üí n
max‚ÇÄ (succ m) = Œª n ‚Üí ifz n (succ m) (succ (max‚ÇÄ m n))

max‚ÇÅ : ‚Ñï ‚Üí ‚Ñï ‚Üí ‚Ñï
max‚ÇÅ = rec {X = ‚Ñï ‚Üí ‚Ñï} (Œª m‚ÇÄ f ‚Üí Œª n ‚Üí ifz n (succ m‚ÇÄ) (succ (f n))) id

max‚ÇÄ-eq-max‚ÇÅ : (m n : ‚Ñï) ‚Üí max‚ÇÄ m n Ôºù max‚ÇÅ m n
max‚ÇÄ-eq-max‚ÇÅ zero     n        = refl
max‚ÇÄ-eq-max‚ÇÅ (succ m) zero     = refl
max‚ÇÄ-eq-max‚ÇÅ (succ m) (succ n) =
 max‚ÇÄ (succ m) (succ n)  Ôºù‚ü® refl                              ‚ü©
 succ (max‚ÇÄ m (succ n))  Ôºù‚ü® ap succ (max‚ÇÄ-eq-max‚ÇÅ m (succ n)) ‚ü©
 succ (max‚ÇÅ m (succ n))  Ôºù‚ü® refl                              ‚ü©
 max‚ÇÅ (succ m) (succ n)  ‚àé

id·µÄ : {Œì : Cxt} ‚Üí Œì ‚ä¢ Œπ ‚áí Œπ
id·µÄ {Œì} = ∆õ ŒΩ‚ÇÄ

ifz·µÄ : {Œì : Cxt} ‚Üí Œì ‚ä¢ Œπ ‚áí Œπ ‚áí Œπ ‚áí Œπ
ifz·µÄ = ∆õ (∆õ (∆õ (Rec (∆õ (∆õ ŒΩ‚ÇÇ)) ŒΩ‚ÇÅ ŒΩ‚ÇÇ)))

ifz·µÄ-correct : (m n‚ÇÅ n‚ÇÇ : ‚Ñï) ‚Üí ‚ü¶ ifz·µÄ ‚üß‚ÇÄ m n‚ÇÅ n‚ÇÇ Ôºù ifz m n‚ÇÅ n‚ÇÇ
ifz·µÄ-correct zero     n‚ÇÅ n‚ÇÇ = refl
ifz·µÄ-correct (succ m) n‚ÇÅ n‚ÇÇ = refl

max·µÄ : {Œì : Cxt} ‚Üí Œì ‚ä¢ Œπ ‚áí (Œπ ‚áí Œπ)
max·µÄ =
 ∆õ (Rec {œÉ = Œπ ‚áí Œπ} (∆õ (∆õ (∆õ (ifz·µÄ ¬∑ ŒΩ‚ÇÄ ¬∑ Succ ŒΩ‚ÇÇ ¬∑ Succ (ŒΩ‚ÇÅ ¬∑ ŒΩ‚ÇÄ))))) id·µÄ ŒΩ‚ÇÄ)

max·µÄ-correct : (m n : ‚Ñï) ‚Üí ‚ü¶ max·µÄ ‚üß‚ÇÄ m n Ôºù max‚ÇÄ m n
max·µÄ-correct zero     n        = refl
max·µÄ-correct (succ m) zero     = refl
max·µÄ-correct (succ m) (succ n) =
 ‚ü¶ max·µÄ ‚üß‚ÇÄ (succ m) (succ n)                                                               Ôºù‚ü® refl ‚ü©
 rec (Œª m‚ÇÄ f ‚Üí Œª n ‚Üí ‚ü¶ ifz·µÄ ‚üß‚ÇÄ n (succ m‚ÇÄ) (succ (f n))) id (succ m) (succ n)  Ôºù‚ü® refl ‚ü©
 ‚ü¶ ifz·µÄ ‚üß‚ÇÄ (succ n) m (rec {X = ‚Ñï ‚Üí ‚Ñï} ((Œª m‚ÇÄ f ‚Üí Œª n ‚Üí ‚ü¶ ifz·µÄ ‚üß‚ÇÄ n (succ m‚ÇÄ) (succ (f n)))) id (succ m) (succ n)) Ôºù‚ü® ifz·µÄ-correct (succ n) m (rec {X = ‚Ñï ‚Üí ‚Ñï} ((Œª m‚ÇÄ f ‚Üí Œª n ‚Üí ‚ü¶ ifz·µÄ ‚üß‚ÇÄ n (succ m‚ÇÄ) (succ (f n)))) id (succ m) (succ n)) ‚ü©
 ifz (succ n) m (succ (‚ü¶ max·µÄ ‚üß‚ÇÄ m (succ n))) Ôºù‚ü® ap (Œª - ‚Üí ifz (succ n) m (succ -)) (max·µÄ-correct m (succ n)) ‚ü©
 ifz (succ n) m (succ (max‚ÇÄ m (succ n))) Ôºù‚ü® ap (Œª - ‚Üí ifz (succ n) m (succ -)) (max‚ÇÄ-eq-max‚ÇÅ m (succ n)) ‚ü©
 ifz (succ n) m (succ (max‚ÇÅ m (succ n))) Ôºù‚ü® refl ‚ü©
 ifz (succ n) m (rec ((Œª m‚ÇÄ f ‚Üí Œª n ‚Üí ifz n (succ m‚ÇÄ) (succ (f n)))) id (succ m) (succ n))  Ôºù‚ü® refl ‚ü©
 rec (Œª m‚ÇÄ f ‚Üí Œª n ‚Üí ifz n (succ m‚ÇÄ) (succ (f n))) id (succ m) (succ n)        Ôºù‚ü® refl ‚ü©
 max‚ÇÅ (succ m) (succ n)                                                                    Ôºù‚ü® max‚ÇÄ-eq-max‚ÇÅ (succ m) (succ n) ‚Åª¬π ‚ü©
 max‚ÇÄ (succ m) (succ n)                                                                    ‚àé

-- max·µÄ-correct (succ m) n =
--  ‚ü¶ max·µÄ ‚üß‚ÇÄ (succ m) n                                                                     Ôºù‚ü® refl ‚ü©
--  ‚ü¶ ∆õ (Rec ((∆õ (∆õ (∆õ (ifz·µÄ ¬∑ ŒΩ‚ÇÄ ¬∑ Succ (ŒΩ‚ÇÅ ¬∑ ŒΩ‚ÇÇ) ¬∑ Succ ŒΩ‚ÇÇ))))) id·µÄ ŒΩ‚ÇÄ) ‚üß‚ÇÄ (succ m) n      Ôºù‚ü® refl ‚ü©
--  rec {X = ‚Ñï ‚Üí ‚Ñï} ‚ü¶ (∆õ (∆õ (∆õ (ifz·µÄ ¬∑ ŒΩ‚ÇÄ ¬∑ Succ (ŒΩ‚ÇÅ ¬∑ ŒΩ‚ÇÇ) ¬∑ Succ ŒΩ‚ÇÇ)))) ‚üß‚ÇÄ id (succ m) n   Ôºù‚ü® refl ‚ü©
--  ‚ü¶ (∆õ (∆õ (∆õ (ifz·µÄ ¬∑ ŒΩ‚ÇÄ ¬∑ Succ (ŒΩ‚ÇÅ ¬∑ ŒΩ‚ÇÇ) ¬∑ Succ ŒΩ‚ÇÇ)))) ‚üß {!!} {!id!} {!!} n               Ôºù‚ü® {!!} ‚ü©
--  natrec id (Œª m‚ÇÄ f ‚Üí Œª n ‚Üí ifz n (succ m‚ÇÄ) (succ (f n))) (succ m) n        Ôºù‚ü® refl ‚ü©
--  max‚ÇÅ (succ m) n                                                      Ôºù‚ü® {!!} ‚ü©
--  max‚ÇÄ (succ m) n                                                      ‚àé

{--

max·µÄ-correct zero     n = refl
max·µÄ-correct (succ m) n =
 ‚ü¶ max·µÄ ‚üß‚ÇÄ (succ m) n                    Ôºù‚ü® refl ‚ü©
 rec (‚ü¶ {!!} ‚üß‚ÇÄ (succ (‚ü¶ max·µÄ ‚üß‚ÇÄ m n))) n (succ m)                     Ôºù‚ü® {!!} ‚ü©
 ‚ü¶ ifz·µÄ ‚üß‚ÇÄ (succ m) (succ (max‚ÇÄ m n)) n Ôºù‚ü® ifz·µÄ-correct n (succ m) (succ (max‚ÇÄ m n)) ‚ü©
 ifz n (succ m) (succ (max‚ÇÄ m n))       Ôºù‚ü® refl ‚ü©
 max‚ÇÄ (succ m) n                        ‚àé

max-question-in-path : {Œì : Cxt}
                     ‚Üí B-context„Äê Œì „Äë(Œ∫ ‚áí Œπ) ‚ä¢ (‚åúB‚åù Œπ (Œ∫ ‚áí Œπ)) ‚áí Œ∫ ‚áí Œπ
max-question-in-path = {!!}

internal-mod-cont : {Œì : Cxt} ‚Üí Œì ‚ä¢ (Œ∫ ‚áí Œπ) ‚Üí B-context„Äê Œì „Äë (Œ∫ ‚áí Œπ) ‚ä¢ (Œ∫ ‚áí Œπ)
internal-mod-cont = {!!}

-- Use the 3 results:

_ = ‚åúdialogue-tree‚åù-correct'
_ = eloquence-theorem
_ = continuity-implies-continuity‚ÇÄ

internal-mod-cont-correct : (t : ‚å©‚å™ ‚ä¢ (Œ∫ ‚áí Œπ)) (Œ± : ‚å©‚å™ ‚ä¢ Œ∫) (Œ≤ : ‚å©‚å™ ‚ä¢ Œ∫)
                          ‚Üí ‚ü¶ Œ± ‚üß‚ÇÄ Ôºù‚¶Ö ‚ü¶ internal-mod-cont t ¬∑ Œ± ‚üß‚ÇÄ ‚¶Ü ‚ü¶ Œ≤ ‚üß‚ÇÄ
                          ‚Üí ‚ü¶ t ¬∑ Œ± ‚üß‚ÇÄ Ôºù ‚ü¶ t ¬∑  Œ≤ ‚üß‚ÇÄ
internal-mod-cont-correct = {!!}

--}

\end{code}
