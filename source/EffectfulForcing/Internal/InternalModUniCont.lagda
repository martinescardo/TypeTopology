Ayberk Tosun.

Continuation of the development in `InternalModCont`.

Started on 2023-10-07.

\begin{code}

open import UF.FunExt
open import UF.Equiv
open import UF.Retracts

module EffectfulForcing.Internal.InternalModUniCont (fe : Fun-Ext) where

open import MLTT.Spartan hiding (rec; _^_)
open import MLTT.List
open import Naturals.Order using (max)
open import EffectfulForcing.Internal.Internal
open import EffectfulForcing.MFPSAndVariations.Church
open import EffectfulForcing.Internal.SystemT
open import EffectfulForcing.MFPSAndVariations.Combinators
open import EffectfulForcing.MFPSAndVariations.Dialogue
 using (eloquent; D; dialogue; eloquent-functions-are-continuous;
        eloquent-functions-are-UC; restriction-is-eloquent;
        dialogue-continuity; generic; B; C; prune)
open import EffectfulForcing.MFPSAndVariations.Continuity
 using (is-continuous; _Ôºù‚ü™_‚ü´_; C-restriction; Cantor; Baire; is-uniformly-continuous; _Ôºù‚ü¶_‚üß_; BT)
open import EffectfulForcing.MFPSAndVariations.ContinuityProperties fe
open import EffectfulForcing.Internal.Correctness
 using (Rnorm-generic; is-dialogue-for; extŒ≤; Rnorm-lemma‚ÇÄ; Rnorm)
open import EffectfulForcing.Internal.External
 using (eloquence-theorem; dialogue-tree; ‚ü™‚ü´; B‚ü¶_‚üß; B‚ü¶_‚üß‚ÇÄ)
open import EffectfulForcing.Internal.Subst
open import EffectfulForcing.MFPSAndVariations.SystemT
 using (type; Œπ; _‚áí_;„Äñ_„Äó)
open import EffectfulForcing.Internal.InternalModCont fe using (max·µÄ)

\end{code}

First, we define some nicer syntax for inherently typed System T terms.

\begin{code}

_‚ä¢_ : Cxt ‚Üí type ‚Üí ùì§‚ÇÄ  Ãá
_‚ä¢_ Œì œÑ = T Œì œÑ

infix 4 _‚ä¢_

baire : type
baire = Œπ ‚áí Œπ

\end{code}

When we restrict to the Cantor space, we can define an operation that gives us a
_uniform_ modulus of continuity. In this section, we prove this fact.

To define the Cantor space, it's tempting to augment System T with the type of
Booleans. However, we refrain from doing that here as to avoid repeating all our
proofs on System T. Instead, we adopt the approach of working with `baire` under
the implicit assumption that its range is `{0, 1}`. We define all operations on
baire under this assumption, and prove that modulus of uniform continuity
operation satisfies its specification, under the assumption of being Boolean,
which we define now.

\begin{code}

to-numeral : ‚Ñï ‚Üí ‚å©‚å™ ‚ä¢ Œπ
to-numeral = numeral {‚å©‚å™}

to-nat : ‚å©‚å™ ‚ä¢ Œπ ‚Üí ‚Ñï
to-nat t = ‚ü¶ t ‚üß‚ÇÄ

to-nat-cancels-to-numeral : (n : ‚Ñï) ‚Üí ‚ü¶ to-numeral n ‚üß‚ÇÄ Ôºù n
to-nat-cancels-to-numeral zero     = refl
to-nat-cancels-to-numeral (succ n) = ap succ (to-nat-cancels-to-numeral n)

numeral-is-section : is-section to-numeral
numeral-is-section = to-nat , to-nat-cancels-to-numeral

is-boolean-valued·µÄ : ‚å©‚å™ ‚ä¢ baire ‚Üí ùì§‚ÇÄ  Ãá
is-boolean-valued·µÄ Œ± =
 (n : ‚å©‚å™ ‚ä¢ Œπ) ‚Üí (‚ü¶ Œ± ‚üß‚ÇÄ ‚ü¶ n ‚üß‚ÇÄ Ôºù zero) + (‚ü¶ Œ± ‚üß‚ÇÄ ‚ü¶ n ‚üß‚ÇÄ Ôºù succ zero)

boolean-valued·µÄ-lemma : (t : ‚å©‚å™ ‚ä¢ baire)
                      ‚Üí is-boolean-valued·µÄ t
                      ‚Üí is-boolean-point ‚ü¶ t ‚üß‚ÇÄ
boolean-valued·µÄ-lemma t œà i = cases ‚Ä† ‚Ä° (œà (numeral i))
 where
  ‚Ä† : ‚ü¶ t ‚üß‚ÇÄ ‚ü¶ numeral i ‚üß‚ÇÄ Ôºù zero ‚Üí is-boolean-valued (‚ü¶ t ‚üß‚ÇÄ i)
  ‚Ä† p = inl q
   where
    ‚Ö† = ap ‚ü¶ t ‚üß‚ÇÄ (to-nat-cancels-to-numeral i ‚Åª¬π)
    ‚Ö° = p

    q = ‚ü¶ t ‚üß‚ÇÄ i              Ôºù‚ü® ‚Ö†    ‚ü©
        ‚ü¶ t ‚üß‚ÇÄ ‚ü¶ numeral i ‚üß‚ÇÄ Ôºù‚ü® ‚Ö°    ‚ü©
        0                     ‚àé

  ‚Ä° : ‚ü¶ t ‚üß‚ÇÄ ‚ü¶ numeral i ‚üß‚ÇÄ Ôºù 1 ‚Üí is-boolean-valued (‚ü¶ t ‚üß‚ÇÄ i)
  ‚Ä° p = inr q
   where
    ‚Ö† = ap ‚ü¶ t ‚üß‚ÇÄ (to-nat-cancels-to-numeral i ‚Åª¬π)
    ‚Ö° = p

    q : ‚ü¶ t ‚üß‚ÇÄ i Ôºù 1
    q = ‚ü¶ t ‚üß‚ÇÄ i              Ôºù‚ü® ‚Ö† ‚ü©
        ‚ü¶ t ‚üß‚ÇÄ ‚ü¶ numeral i ‚üß‚ÇÄ Ôºù‚ü® ‚Ö° ‚ü©
        1                     ‚àé

\end{code}

Following the conventions of the `InternalModCont` module, we define three
versions of the same operation.

  1. `max-question·µ§`, that works on the external inductive type encoding of
     dialogue trees in Agda,
  2. `max-question·µ§‚ãÜ`, that works on the external Church encoding of dialogue
     trees in Agda, and
  3. `max-question·µ§·µÄ`, that is a System T function working on the Church
     encoding of dialogue trees in System T.

\begin{code}

-- TODO
-- Should be called max-question-0-1.
-- or max-boolean-question.
-- or max-question-in-boolean-paths
max-question·µ§ : C ‚Ñï ‚Üí ‚Ñï
max-question·µ§ (D.Œ∑ n)   = 0
max-question·µ§ (D.Œ≤ œÜ n) = max n (max n‚ÇÅ n‚ÇÇ)
 where
  n‚ÇÅ : ‚Ñï
  n‚ÇÅ = max-question·µ§ (œÜ ‚ÇÄ)

  n‚ÇÇ : ‚Ñï
  n‚ÇÇ = max-question·µ§ (œÜ ‚ÇÅ)

\end{code}

\begin{code}

max-question·µ§‚ãÜ : D‚ãÜ ‚Ñï ùüö ‚Ñï ‚Ñï ‚Üí ‚Ñï
max-question·µ§‚ãÜ d = d (Œª _ ‚Üí 0) (Œª g x ‚Üí max x (max (g ‚ÇÄ) (g ‚ÇÅ)))

max-question·µ§·µÄ : {Œì : Cxt} ‚Üí Œì ‚ä¢ (‚åúB‚åù Œπ Œπ) ‚áí Œπ
max-question·µ§·µÄ =
 ∆õ (ŒΩ‚ÇÄ ¬∑ (∆õ Zero) ¬∑ ∆õ (∆õ (max·µÄ ¬∑ ŒΩ‚ÇÄ ¬∑ (max·µÄ ¬∑ (ŒΩ‚ÇÅ ¬∑ numeral 0) ¬∑ (ŒΩ‚ÇÅ ¬∑ numeral 1)))))

\end{code}

\begin{code}

main-lemma : (t : ‚å©‚å™ ‚ä¢ baire ‚áí Œπ) ‚Üí ‚ü¶ max-question·µ§·µÄ ¬∑ ‚åúdialogue-tree‚åù t ‚üß‚ÇÄ
                                    Ôºù max-question·µ§ (prune (dialogue-tree t))
main-lemma t = {!!}

\end{code}

\begin{code}

max-question·µ§‚ãÜ-agreement : (d : C ‚Ñï)
                         ‚Üí max-question·µ§ d Ôºù max-question·µ§‚ãÜ (church-encode d)
max-question·µ§‚ãÜ-agreement (D.Œ∑ n)   = refl
max-question·µ§‚ãÜ-agreement (D.Œ≤ œÜ n) = ‚Ä†
 where
  ch-encode = church-encode

  IH‚ÇÄ : max-question·µ§ (œÜ ‚ÇÄ) Ôºù max-question·µ§‚ãÜ (church-encode (œÜ ‚ÇÄ))
  IH‚ÇÄ = max-question·µ§‚ãÜ-agreement (œÜ ‚ÇÄ)

  IH‚ÇÅ : max-question·µ§ (œÜ ‚ÇÅ) Ôºù max-question·µ§‚ãÜ (church-encode (œÜ ‚ÇÅ))
  IH‚ÇÅ = max-question·µ§‚ãÜ-agreement (œÜ ‚ÇÅ)

  ‚Ö† = ap (Œª - ‚Üí max - (max-question·µ§ (œÜ ‚ÇÅ))) IH‚ÇÄ
  ‚Ö° = ap (Œª - ‚Üí max (max-question·µ§‚ãÜ (church-encode (œÜ ‚ÇÄ))) -) IH‚ÇÅ

  ‚Ä° =
   max (max-question·µ§ (œÜ ‚ÇÄ)) (max-question·µ§ (œÜ ‚ÇÅ))                           Ôºù‚ü® ‚Ö† ‚ü©
   max (max-question·µ§‚ãÜ (ch-encode (œÜ ‚ÇÄ))) (max-question·µ§ (œÜ ‚ÇÅ))              Ôºù‚ü® ‚Ö° ‚ü©
   max (max-question·µ§‚ãÜ (ch-encode (œÜ ‚ÇÄ))) (max-question·µ§‚ãÜ (ch-encode (œÜ ‚ÇÅ))) ‚àé

  ‚Ä† : max-question·µ§ (D.Œ≤ œÜ n) Ôºù max-question·µ§‚ãÜ (church-encode (D.Œ≤ œÜ n))
  ‚Ä† = ap (max n) ‚Ä°

\end{code}

We now define the analogue of `modulus` from `InternalModCont`, following the
same conventions.

\begin{code}

modulus·µ§ : C ‚Ñï ‚Üí ‚Ñï
modulus·µ§ = succ ‚àò max-question·µ§

\end{code}

\begin{code}

modulus·µ§·µÄ : {Œì : Cxt} ‚Üí  Œì ‚ä¢ baire ‚áí Œπ ‚Üí B-context„Äê Œì „Äë Œπ ‚ä¢ Œπ
modulus·µ§·µÄ t = Succ' ¬∑ (max-question·µ§·µÄ ¬∑ ‚åúdialogue-tree‚åù t)

\end{code}

\begin{code}

another-lemma : (f : Baire ‚Üí ‚Ñï)
              ‚Üí (Œ± : Baire) (bv : is-boolean-point Œ±)
              ‚Üí (Œ≤ : ‚Ñï ‚Üí ùüö)
              ‚Üí to-cantor (Œ± , bv) Ôºù Œ≤
              ‚Üí f Œ± Ôºù C-restriction f Œ≤
another-lemma f Œ± bv Œ≤ p =
 f Œ± Ôºù‚ü® {!!} ‚ü© {!!} Ôºù‚ü® {!!} ‚ü© {!!} ‚àé

kinda-important-lemma : (f : Baire ‚Üí ‚Ñï) (Œ± : Baire) (bv : is-boolean-point Œ±)
                      ‚Üí f Œ± Ôºù C-restriction f (to-cantor (Œ± , bv))
kinda-important-lemma f Œ± bv =
 f Œ±                                  Ôºù‚ü® {!!} ‚ü©
 C-restriction f (to-cantor (Œ± , bv)) ‚àé

\end{code}

\begin{code}

internal-uni-mod-correct : (t : ‚å©‚å™ ‚ä¢ (baire ‚áí Œπ)) (Œ± Œ≤ : ‚å©‚å™ ‚ä¢ baire)
                         ‚Üí is-boolean-valued·µÄ Œ±
                         ‚Üí is-boolean-valued·µÄ Œ≤
                         ‚Üí ‚ü¶ Œ± ‚üß‚ÇÄ Ôºù‚¶Ö ‚ü¶ modulus·µ§·µÄ t ‚üß‚ÇÄ ‚¶Ü ‚ü¶ Œ≤ ‚üß‚ÇÄ
                         ‚Üí ‚ü¶ t ¬∑ Œ± ‚üß‚ÇÄ Ôºù ‚ü¶ t ¬∑ Œ≤ ‚üß‚ÇÄ
internal-uni-mod-correct t Œ± Œ≤ œà‚ÇÅ œà‚ÇÇ œë = ‚Ä†
 where
  f : (‚Ñï ‚Üí ‚Ñï) ‚Üí ‚Ñï
  f = ‚ü¶ t ‚üß‚ÇÄ

  f‚ÇÄ : Cantor ‚Üí ‚Ñï
  f‚ÇÄ = C-restriction f

  Œµ : eloquent ‚ü¶ t ‚üß‚ÇÄ
  Œµ = eloquence-theorem ‚ü¶ t ‚üß‚ÇÄ (t , refl)

  Œµ‚ÇÄ : eloquent f‚ÇÄ
  Œµ‚ÇÄ = restriction-is-eloquent f Œµ

  c : is-uniformly-continuous f‚ÇÄ
  c = eloquent-functions-are-UC f‚ÇÄ Œµ‚ÇÄ

  m·µò : BT ‚Ñï
  m·µò = pr‚ÇÅ c

  c‚ÇÄ : is-uniformly-continuous‚ÇÄ f‚ÇÄ
  c‚ÇÄ = uni-continuity-implies-uni-continuity‚ÇÄ f‚ÇÄ c

  m·µò‚ÇÄ : ‚Ñï
  m·µò‚ÇÄ = pr‚ÇÅ c‚ÇÄ

  rts : ‚ü¶ max-question·µ§·µÄ ¬∑ ‚åúdialogue-tree‚åù t ‚üß‚ÇÄ Ôºù maximum·µ§ m·µò
  rts = {!!}

  foo : ‚ü¶ modulus·µ§·µÄ t ‚üß‚ÇÄ Ôºù m·µò‚ÇÄ
  foo = ap succ rts

  Œ±‚Ä≤ : Cantor‚ÇÄ
  Œ±‚Ä≤ = ‚ü¶ Œ± ‚üß‚ÇÄ , boolean-valued·µÄ-lemma Œ± œà‚ÇÅ

  Œ≤‚Ä≤ : Cantor‚ÇÄ
  Œ≤‚Ä≤ = ‚ü¶ Œ≤ ‚üß‚ÇÄ , boolean-valued·µÄ-lemma Œ≤ œà‚ÇÇ

  -- Œ∏ : ‚ü¶ Œ± ‚üß‚ÇÄ Ôºù‚ü¶ m·µò ‚üß ‚ü¶ Œ≤ ‚üß‚ÇÄ
  -- Œ∏ = {!!}

  Œ≥ : to-cantor Œ±‚Ä≤ Ôºù‚ü¶ m·µò ‚üß to-cantor Œ≤‚Ä≤
  Œ≥ = {!!}

  ‚Ä° : f‚ÇÄ (to-cantor Œ±‚Ä≤) Ôºù f‚ÇÄ (to-cantor Œ≤‚Ä≤)
  ‚Ä° = pr‚ÇÇ c (to-cantor Œ±‚Ä≤) (to-cantor Œ≤‚Ä≤) Œ≥

  ‚Ö† = kinda-important-lemma f ‚ü¶ Œ± ‚üß‚ÇÄ (boolean-valued·µÄ-lemma Œ± œà‚ÇÅ)
  ‚Ö° = kinda-important-lemma f ‚ü¶ Œ≤ ‚üß‚ÇÄ (boolean-valued·µÄ-lemma Œ≤ œà‚ÇÇ) ‚Åª¬π

  ‚Ä† : f ‚ü¶ Œ± ‚üß‚ÇÄ Ôºù f ‚ü¶ Œ≤ ‚üß‚ÇÄ
  ‚Ä† = f ‚ü¶ Œ± ‚üß‚ÇÄ              Ôºù‚ü® ‚Ö† ‚ü©
      f‚ÇÄ (to-cantor Œ±‚Ä≤)     Ôºù‚ü® ‚Ä° ‚ü©
      f‚ÇÄ (to-cantor Œ≤‚Ä≤)     Ôºù‚ü® ‚Ö° ‚ü©
      f ‚ü¶ Œ≤ ‚üß‚ÇÄ              ‚àé

-- One can prove a theorem saying max-question-in-boolean-paths is the same
-- thing as max-question followed by a pruning.

\end{code}
