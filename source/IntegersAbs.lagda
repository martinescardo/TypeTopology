Andrew Sneap - 26th November 2021

In this file I define absolute values of integers and some properties of abs, along with positive and negative properties of integers.

\begin{code}

{-# OPTIONS --without-K --exact-split --safe #-}

open import SpartanMLTT renaming (_+_ to _‚àî_) --TypeTopology

open import DiscreteAndSeparated -- TypeTopology
open import NaturalNumbers-Properties --TypeTopology
open import UF-Miscelanea -- TypeTopology
open import UF-Subsingletons --TypeTopology
open import Unit-Properties -- TypeTopology

open import NaturalsMultiplication renaming (_*_ to _‚Ñï*_)
open import IntegersMultiplication
open import IntegersNegation
open import IntegersAddition
open import IntegersB

module IntegersAbs where

abs : ‚Ñ§ ‚Üí ‚Ñï
abs (pos x)     = x
abs (negsucc x) = succ x

abs‚Ñ§ : ‚Ñ§ ‚Üí ‚Ñ§
abs‚Ñ§ (pos x)     = pos x
abs‚Ñ§ (negsucc x) = pos (succ x)

pos-lc : {x y : ‚Ñï} ‚Üí pos x ‚â° pos y ‚Üí x ‚â° y
pos-lc = ap abs

negsucc-lc : {x y : ‚Ñï} ‚Üí negsucc x ‚â° negsucc y ‚Üí x ‚â° y
negsucc-lc {x} {y} p = succ-lc (ap abs p)

positive : ‚Ñ§ ‚Üí ùì§‚ÇÄ Ãá
positive (pos x)     = ùüô
positive (negsucc x) = ùüò

negative : ‚Ñ§ ‚Üí ùì§‚ÇÄ Ãá
negative (pos x)     = ùüò
negative (negsucc x) = ùüô

is-zero : ‚Ñ§ ‚Üí ùì§‚ÇÄ Ãá
is-zero (pos 0)        = ùüô
is-zero (pos (succ x)) = ùüò
is-zero (negsucc x)    = ùüò

not-zero : ‚Ñ§ ‚Üí ùì§‚ÇÄ Ãá
not-zero z = ¬¨ (is-zero z)

greater-than-zero : ‚Ñ§ ‚Üí ùì§‚ÇÄ Ãá
greater-than-zero (pos 0)        = ùüò
greater-than-zero (pos (succ z)) = ùüô
greater-than-zero (negsucc z)    = ùüò

pos-not-negative : {x y : ‚Ñï} ‚Üí pos x ‚â¢ negsucc y
pos-not-negative p = ùüô-is-not-ùüò (ap positive p)

neg-not-positive : {x y : ‚Ñï} ‚Üí negsucc x ‚â¢ pos y
neg-not-positive p = pos-not-negative (p ‚Åª¬π)

pos-int-not-zero : (x : ‚Ñï) ‚Üí pos (succ x) ‚â¢ pos 0
pos-int-not-zero x p = positive-not-zero x (pos-lc p)

neg-int-not-zero : (x : ‚Ñï) ‚Üí negsucc x ‚â¢ pos 0
neg-int-not-zero x p = positive-not-zero x (ap abs p)

‚Ñ§-is-discrete : is-discrete ‚Ñ§
‚Ñ§-is-discrete (pos x) (pos y) = f (‚Ñï-is-discrete x y)
  where
    f : (x ‚â° y) ‚àî ¬¨ (x ‚â° y) ‚Üí (pos x ‚â° pos y) ‚àî ¬¨ (pos x ‚â° pos y)
    f (inl z) = inl (ap pos z)
    f (inr z) = inr (Œª k ‚Üí z (pos-lc k))
‚Ñ§-is-discrete (pos x)     (negsucc y) = inr pos-not-negative
‚Ñ§-is-discrete (negsucc x) (pos y)     = inr neg-not-positive
‚Ñ§-is-discrete (negsucc x) (negsucc y) = f (‚Ñï-is-discrete x y)
  where
    f : (x ‚â° y) ‚àî ¬¨ (x ‚â° y) ‚Üí decidable (negsucc x ‚â° negsucc y)
    f (inl z) = inl (ap negsucc z)
    f (inr z) = inr (Œª k ‚Üí z (negsucc-lc k) )

‚Ñ§-is-set : is-set ‚Ñ§
‚Ñ§-is-set = discrete-types-are-sets ‚Ñ§-is-discrete

abs-removes-neg-sign : (x : ‚Ñ§) ‚Üí abs x ‚â° abs (- x)
abs-removes-neg-sign (pos zero)     = refl
abs-removes-neg-sign (pos (succ x)) = refl
abs-removes-neg-sign (negsucc x)    = refl

abs‚Ñ§-removes-neg-sign : (x : ‚Ñ§) ‚Üí abs‚Ñ§ x ‚â° abs‚Ñ§ (- x)
abs‚Ñ§-removes-neg-sign (pos zero)     = refl
abs‚Ñ§-removes-neg-sign (pos (succ x)) = refl
abs‚Ñ§-removes-neg-sign (negsucc x)    = refl

abs-over-mult : (a b : ‚Ñ§) ‚Üí abs (a * b) ‚â° abs a ‚Ñï* abs b
abs-over-mult (pos x) (pos b) = I
 where
  I : abs (pos x * pos b) ‚â° abs (pos x) ‚Ñï* abs (pos b)
  I = abs (pos x * pos b)        ‚â°‚ü® ap abs (pos-multiplication-equiv-to-‚Ñï x b) ‚ü©
      abs (pos (x ‚Ñï* b))         ‚â°‚ü® refl ‚ü©
      abs (pos x) ‚Ñï* abs (pos b) ‚àé
abs-over-mult (pos zero) (negsucc b) = I
 where
  I : abs (pos zero * negsucc b) ‚â° abs (pos zero) ‚Ñï* abs (negsucc b)
  I = abs (pos zero * negsucc b) ‚â°‚ü® ap abs (‚Ñ§-zero-left-is-zero (negsucc b)) ‚ü©
      abs (pos 0)                ‚â°‚ü® zero-left-is-zero (abs (negsucc b)) ‚Åª¬π ‚ü©
      abs (pos zero) ‚Ñï* abs (negsucc b) ‚àé
abs-over-mult (pos (succ x)) (negsucc b) = I
 where
  I : abs (pos (succ x) * negsucc b) ‚â° abs (pos (succ x)) ‚Ñï* abs (negsucc b)
  I = abs (pos (succ x) * negsucc b)           ‚â°‚ü® ap abs (subtraction-dist-over-mult (pos (succ x)) (pos (succ b))) ‚ü©
      abs (- ((pos (succ x) * pos (succ b))))  ‚â°‚ü® ap (Œª z ‚Üí (abs (- z))) (pos-multiplication-equiv-to-‚Ñï (succ x) (succ b)) ‚ü©
      abs (- pos (succ x ‚Ñï* succ b))           ‚â°‚ü® abs-removes-neg-sign ( pos (succ x ‚Ñï* succ b)) ‚Åª¬π ‚ü©
      abs (pos (succ x ‚Ñï* succ b))             ‚â°‚ü® refl ‚ü©
      succ x ‚Ñï* succ b                         ‚â°‚ü® refl ‚ü©
      abs (pos (succ x)) ‚Ñï* abs (negsucc b)    ‚àé
abs-over-mult (negsucc x) (pos b) = I
 where
  I : abs (negsucc x * pos b) ‚â° abs (negsucc x) ‚Ñï* abs (pos b)
  I = abs (negsucc x * pos b)        ‚â°‚ü® ap abs (subtraction-dist-over-mult' (pos (succ x)) (pos b)) ‚ü©
      abs (- pos (succ x) * pos b)   ‚â°‚ü® ap (Œª z ‚Üí abs (- z)) (pos-multiplication-equiv-to-‚Ñï (succ x) b) ‚ü©
      abs (- pos (succ x ‚Ñï* b))      ‚â°‚ü® abs-removes-neg-sign (pos (succ x ‚Ñï* b)) ‚Åª¬π ‚ü©
      (succ x) ‚Ñï* b                  ‚â°‚ü® refl ‚ü©
      abs (negsucc x) ‚Ñï* abs (pos b) ‚àé
abs-over-mult (negsucc x) (negsucc b) = I
 where
  I : abs (negsucc x * negsucc b) ‚â° abs (negsucc x) ‚Ñï* abs (negsucc b)
  I = abs (negsucc x * negsucc b)               ‚â°‚ü® ap abs (subtraction-dist-over-mult (negsucc x) (pos (succ b))) ‚ü©
      abs (- negsucc x * pos (succ b) )         ‚â°‚ü® ap (Œª z ‚Üí abs (- z)) (subtraction-dist-over-mult' (pos (succ x)) (pos (succ b))) ‚ü©
      abs (- (- pos (succ x) * pos (succ b)))   ‚â°‚ü® ap abs (minus-minus-is-plus (pos (succ x) * pos (succ b))) ‚ü©
      abs (pos (succ x) * pos (succ b))         ‚â°‚ü® ap abs (pos-multiplication-equiv-to-‚Ñï (succ x) (succ b)) ‚ü©
      (succ x) ‚Ñï* (succ b)                      ‚â°‚ü® refl ‚ü©
      abs (negsucc x) ‚Ñï* abs (negsucc b)       ‚àé

pos-abs-is-equal : (x : ‚Ñï) ‚Üí abs‚Ñ§ (pos x) ‚â° pos x
pos-abs-is-equal x = refl

abs-over-mult' : (x y : ‚Ñ§) ‚Üí abs‚Ñ§ (x * y) ‚â° abs‚Ñ§ x * abs‚Ñ§ y
abs-over-mult' (pos x) (pos y) = I
 where
  I : abs‚Ñ§ (pos x * pos y) ‚â° abs‚Ñ§ (pos x) * abs‚Ñ§ (pos y)
  I = abs‚Ñ§ (pos x * pos y) ‚â°‚ü® ap abs‚Ñ§ (pos-multiplication-equiv-to-‚Ñï x y) ‚ü©
      abs‚Ñ§ (pos (x ‚Ñï* y))  ‚â°‚ü® by-definition ‚ü©
      pos (x ‚Ñï* y)         ‚â°‚ü® pos-multiplication-equiv-to-‚Ñï x y ‚Åª¬π ‚ü©
      pos x * pos y        ‚â°‚ü® by-definition ‚ü©
      abs‚Ñ§ (pos x) * abs‚Ñ§ (pos y) ‚àé
abs-over-mult' (pos x) (negsucc y) = I
 where
  I : abs‚Ñ§ (pos x * negsucc y) ‚â° abs‚Ñ§ (pos x) * abs‚Ñ§ (negsucc y)
  I = abs‚Ñ§ (pos x * negsucc y)        ‚â°‚ü® ap abs‚Ñ§ (subtraction-dist-over-mult (pos x) (pos (succ y))) ‚ü©
      abs‚Ñ§ (- pos x * pos (succ y))   ‚â°‚ü® ap (Œª z ‚Üí abs‚Ñ§ (- z)) (pos-multiplication-equiv-to-‚Ñï x (succ y)) ‚ü©
      abs‚Ñ§ (- pos (x ‚Ñï* succ y))      ‚â°‚ü® abs‚Ñ§-removes-neg-sign (pos (x ‚Ñï* succ y)) ‚Åª¬π ‚ü©
      abs‚Ñ§ (pos (x ‚Ñï* succ y))        ‚â°‚ü® by-definition ‚ü©
      pos (x ‚Ñï* succ y)               ‚â°‚ü® pos-multiplication-equiv-to-‚Ñï x (succ y) ‚Åª¬π ‚ü©
      pos x * pos (succ y)            ‚â°‚ü® by-definition ‚ü©
      abs‚Ñ§ (pos x) * abs‚Ñ§ (negsucc y) ‚àé
abs-over-mult' (negsucc x) (pos y) = I
 where
  I : abs‚Ñ§ (negsucc x * pos y) ‚â° abs‚Ñ§ (negsucc x) * abs‚Ñ§ (pos y)
  I = abs‚Ñ§ (negsucc x * pos y)      ‚â°‚ü® ap abs‚Ñ§ (‚Ñ§*-comm (negsucc x) (pos y)) ‚ü©
      abs‚Ñ§ (pos y * negsucc x)      ‚â°‚ü® ap abs‚Ñ§ (subtraction-dist-over-mult (pos y) (pos (succ x))) ‚ü©
      abs‚Ñ§ (- pos y * pos (succ x)) ‚â°‚ü® ap (Œª z ‚Üí abs‚Ñ§ (- z)) (pos-multiplication-equiv-to-‚Ñï y (succ x)) ‚ü©
      abs‚Ñ§ (- pos (y ‚Ñï* succ x))    ‚â°‚ü® abs‚Ñ§-removes-neg-sign (pos (y ‚Ñï* succ x)) ‚Åª¬π ‚ü©
      abs‚Ñ§ (pos (y ‚Ñï* succ x))      ‚â°‚ü® by-definition ‚ü©
      pos (y ‚Ñï* succ x)             ‚â°‚ü® pos-multiplication-equiv-to-‚Ñï y (succ x) ‚Åª¬π ‚ü©
      pos y * pos (succ x)          ‚â°‚ü® ‚Ñ§*-comm (pos y) (pos (succ x)) ‚ü©
      pos (succ x) * pos y          ‚â°‚ü® by-definition ‚ü© 
      abs‚Ñ§ (negsucc x) * abs‚Ñ§ (pos y) ‚àé
abs-over-mult' (negsucc x) (negsucc y) = I
 where
  I : abs‚Ñ§ (negsucc x * negsucc y) ‚â° abs‚Ñ§ (negsucc x) * abs‚Ñ§ (negsucc y)
  I = abs‚Ñ§ (negsucc x * negsucc y)        ‚â°‚ü® ap abs‚Ñ§ (minus-times-minus-is-positive (pos (succ x)) (pos (succ y))) ‚ü©
      abs‚Ñ§ (pos (succ x) * pos (succ y))  ‚â°‚ü® ap abs‚Ñ§ (pos-multiplication-equiv-to-‚Ñï (succ x) (succ y)) ‚ü©
      abs‚Ñ§ (pos (succ x ‚Ñï* succ y))       ‚â°‚ü® by-definition ‚ü©
      pos (succ x ‚Ñï* succ y)              ‚â°‚ü® pos-multiplication-equiv-to-‚Ñï (succ x) (succ y) ‚Åª¬π ‚ü©
      pos (succ x) * pos (succ y)         ‚â°‚ü® by-definition ‚ü©
      abs‚Ñ§ (negsucc x) * abs‚Ñ§ (negsucc y) ‚àé

succ‚Ñ§-no-fp : (x : ‚Ñ§) ‚Üí ¬¨ (x ‚â° succ‚Ñ§ x)
succ‚Ñ§-no-fp (pos x) e = succ-no-fp x (pos-lc e)
succ‚Ñ§-no-fp (negsucc zero) e = pos-not-negative (e ‚Åª¬π)
succ‚Ñ§-no-fp (negsucc (succ x)) e = succ-no-fp x (negsucc-lc (e ‚Åª¬π))

greater-than-zero-succ‚Ñ§ : (x : ‚Ñ§) ‚Üí greater-than-zero x ‚Üí greater-than-zero (succ‚Ñ§ x)
greater-than-zero-succ‚Ñ§ (pos 0)        g = ùüò-elim g
greater-than-zero-succ‚Ñ§ (pos (succ x)) g = g
greater-than-zero-succ‚Ñ§ (negsucc x)    g = ùüò-elim g

gtz‚ÇÄ : (x : ‚Ñ§) ‚Üí (y : ‚Ñï) ‚Üí greater-than-zero x ‚Üí greater-than-zero (pos y) ‚Üí greater-than-zero (x + (pos y))
gtz‚ÇÄ x = induction base step
 where
  base : greater-than-zero x
       ‚Üí greater-than-zero (pos 0)
       ‚Üí greater-than-zero (x + pos 0)
  base l r = ùüò-elim r

  step : (k : ‚Ñï)
       ‚Üí (greater-than-zero x ‚Üí greater-than-zero (pos k) ‚Üí greater-than-zero (x + pos k))
       ‚Üí greater-than-zero x
       ‚Üí greater-than-zero (pos (succ k))
       ‚Üí greater-than-zero (x + pos (succ k))
  step 0        IH l r = greater-than-zero-succ‚Ñ§ x l
  step (succ k) IH l r = greater-than-zero-succ‚Ñ§ (x + pos (succ k)) (IH l r)

greater-than-zero-trans : (x y : ‚Ñ§) ‚Üí greater-than-zero x ‚Üí greater-than-zero y ‚Üí greater-than-zero (x + y)
greater-than-zero-trans x (pos y)         = gtz‚ÇÄ x y
greater-than-zero-trans x (negsucc y) l r = ùüò-elim r

gtzmt‚ÇÄ : (x : ‚Ñ§) ‚Üí (y : ‚Ñï) ‚Üí greater-than-zero x ‚Üí greater-than-zero (pos y) ‚Üí greater-than-zero (x * pos y)
gtzmt‚ÇÄ x = induction base step
 where
  base : greater-than-zero x ‚Üí greater-than-zero (pos 0) ‚Üí greater-than-zero (x * pos 0)
  base l r = ùüò-elim r

  step : (k : ‚Ñï)
       ‚Üí (greater-than-zero x ‚Üí greater-than-zero (pos k) ‚Üí greater-than-zero (x * pos k))
       ‚Üí greater-than-zero x
       ‚Üí greater-than-zero (pos (succ k))
       ‚Üí greater-than-zero (x * pos (succ k))
  step zero IH l r = l
  step (succ k) IH l r = greater-than-zero-trans x (x * pos (succ k)) l (IH l r)

greater-than-zero-mult-trans : (x y : ‚Ñ§) ‚Üí greater-than-zero x ‚Üí greater-than-zero y ‚Üí greater-than-zero (x * y)
greater-than-zero-mult-trans x (negsucc y) l r = ùüò-elim r
greater-than-zero-mult-trans x (pos y)     l r = gtzmt‚ÇÄ x y l r


{-
‚Ñ§-not-equal-to-succ : (x : ‚Ñ§) ‚Üí ¬¨ (x ‚â° succ‚Ñ§ x)
‚Ñ§-not-equal-to-succ = ‚Ñ§-induction base step‚ÇÅ step‚ÇÇ
 where
  base : ¬¨ (pos 0 ‚â° succ‚Ñ§ (pos 0))
  base e = pos-int-not-zero 0 (e ‚Åª¬π)
  step‚ÇÅ : (k : ‚Ñ§) ‚Üí ¬¨ (k ‚â° succ‚Ñ§ k) ‚Üí ¬¨ (succ‚Ñ§ k ‚â° succ‚Ñ§ (succ‚Ñ§ k))
  step‚ÇÅ k IH e = IH II
   where
    I : pred‚Ñ§ (succ‚Ñ§ k) ‚â° pred‚Ñ§ (succ‚Ñ§ (succ‚Ñ§ k))
    I = ap pred‚Ñ§ e
    II : k ‚â° succ‚Ñ§ k
    II = k                       ‚â°‚ü® predsucc‚Ñ§ k ‚Åª¬π ‚ü©
         pred‚Ñ§ (succ‚Ñ§ k)         ‚â°‚ü® I ‚ü©
         pred‚Ñ§ (succ‚Ñ§ (succ‚Ñ§ k)) ‚â°‚ü® predsucc‚Ñ§ (succ‚Ñ§ k) ‚ü©
         succ‚Ñ§ k ‚àé
  step‚ÇÇ : (k : ‚Ñ§) ‚Üí ¬¨ (succ‚Ñ§ k ‚â° succ‚Ñ§ (succ‚Ñ§ k)) ‚Üí ¬¨ (k ‚â° succ‚Ñ§ k)
  step‚ÇÇ k IH e = IH (ap succ‚Ñ§ e)
-}
