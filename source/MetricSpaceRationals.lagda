\begin{code}

{-# OPTIONS --without-K --exact-split --safe #-}

open import SpartanMLTT renaming (_+_ to _‚àî_) -- TypeTopology

open import OrderNotation --TypeTopology
open import UF-FunExt -- TypeTopology
open import UF-Base -- TypeTopology
open import UF-Subsingletons --TypeTopology
open import UF-PropTrunc -- TypeTopology

open import Rationals
open import RationalsAbs
open import RationalsAddition
open import RationalsNegation
open import RationalsOrder

module MetricSpaceRationals
         (fe : Fun-Ext)
         (pt : propositional-truncations-exist)
         (pe : Prop-Ext)
 where

open import RationalsMinMax fe

open import MetricSpaceAltDef pt fe pe

‚Ñö-metric : ‚Ñö ‚Üí ‚Ñö ‚Üí ‚Ñö
‚Ñö-metric p q = abs (p - q)

‚Ñö-self-dist : Fun-Ext ‚Üí (q : ‚Ñö) ‚Üí ‚Ñö-metric q q ‚â° 0‚Ñö
‚Ñö-self-dist fe q = ‚Ñö-metric q q ‚â°‚ü® by-definition ‚ü©
                   abs (q - q)   ‚â°‚ü® ap abs (‚Ñö-inverse-sum-to-zero fe q) ‚ü©
                   abs 0‚Ñö        ‚â°‚ü® by-definition ‚ü©
                   0‚Ñö ‚àé

‚Ñö-metric-commutes : (p q : ‚Ñö) ‚Üí ‚Ñö-metric p q ‚â° ‚Ñö-metric q p
‚Ñö-metric-commutes p q = conclusion
 where
  conclusion : ‚Ñö-metric p q ‚â° ‚Ñö-metric q p 
  conclusion = ‚Ñö-metric p q                   ‚â°‚ü® by-definition ‚ü©
               abs (p - q)                    ‚â°‚ü® ‚Ñö-abs-neg-equals-pos fe (p - q) ‚ü©
               abs (- (p - q))                ‚â°‚ü® by-definition ‚ü©
               abs (- (p + (- q)))            ‚â°‚ü® ap (Œª z ‚Üí abs (- z)) (‚Ñö+-comm p (- q)) ‚ü©
               abs (- ((- q) + p))            ‚â°‚ü® ap abs (‚Ñö-minus-dist fe (- q) p ‚Åª¬π) ‚ü©
               abs ((- (- q)) + (- p))        ‚â°‚ü® ap (Œª z ‚Üí abs (z + (- p))) (‚Ñö-minus-minus fe q ‚Åª¬π) ‚ü©
               abs (q + (- p))                ‚â°‚ü® by-definition ‚ü©
               abs (q - p)                    ‚â°‚ü® by-definition ‚ü©
               ‚Ñö-metric q p                   ‚àé

inequality-chain-to-metric : (w y z : ‚Ñö) ‚Üí w ‚â§ y ‚Üí y ‚â§ z ‚Üí ‚Ñö-metric w z ‚â° ‚Ñö-metric w y + ‚Ñö-metric y z
inequality-chain-to-metric w y z l‚ÇÅ l‚ÇÇ = conclusion
 where
  l‚ÇÉ : w ‚â§ z
  l‚ÇÉ = ‚Ñö‚â§-trans fe w y z l‚ÇÅ l‚ÇÇ
  conclusion : ‚Ñö-metric w z ‚â° ‚Ñö-metric w y + ‚Ñö-metric y z
  conclusion = ‚Ñö-metric w z                ‚â°‚ü® by-definition ‚ü©
               abs (w - z)                 ‚â°‚ü® ‚Ñö-metric-commutes w z ‚ü©
               abs (z - w)                 ‚â°‚ü® abs-of-pos-is-pos fe (z - w) (‚Ñö‚â§-difference-positive fe w z l‚ÇÉ) ‚ü©
               z - w                       ‚â°‚ü® ‚Ñö-zero-left-neutral fe (z - w) ‚Åª¬π ‚ü©
               0‚Ñö + (z - w)                ‚â°‚ü® ap (_+ (z - w)) (‚Ñö-inverse-sum-to-zero fe y ‚Åª¬π) ‚ü©
               y + (- y) + (z - w)         ‚â°‚ü® ‚Ñö+-assoc fe y (- y) (z - w) ‚ü©
               y + ((- y) + (z - w))       ‚â°‚ü® ap (y +_) (‚Ñö+-comm (- y) (z - w)) ‚ü©
               y + (z - w + (- y))         ‚â°‚ü® ap (Œª Œ± ‚Üí y + (Œ± + (- y))) (‚Ñö+-comm z (- w)) ‚ü©
               y + ((- w) + z + (- y))     ‚â°‚ü® ‚Ñö+-assoc fe y ((- w) + z) (- y) ‚Åª¬π ‚ü©
               y + ((- w) + z) + (- y)     ‚â°‚ü® ap (_+ (- y)) (‚Ñö+-assoc fe y (- w) z ‚Åª¬π) ‚ü©
               (y - w) + z + (- y)         ‚â°‚ü® ‚Ñö+-assoc fe (y - w) z (- y) ‚ü©
               y - w + (z - y)             ‚â°‚ü® ap‚ÇÇ _+_ (abs-of-pos-is-pos fe (y - w) (‚Ñö‚â§-difference-positive fe w y l‚ÇÅ) ‚Åª¬π) (abs-of-pos-is-pos fe (z - y) (‚Ñö‚â§-difference-positive fe y z l‚ÇÇ) ‚Åª¬π) ‚ü©
               abs (y - w) + abs (z - y)   ‚â°‚ü® ap‚ÇÇ _+_ (‚Ñö-metric-commutes y w) (‚Ñö-metric-commutes z y) ‚ü©
               abs (w - y) + abs (y - z)   ‚â°‚ü® by-definition ‚ü©
               ‚Ñö-metric w y + ‚Ñö-metric y z ‚àé

inequality-chain-with-metric : (x y w z Œµ‚ÇÅ Œµ‚ÇÇ : ‚Ñö) ‚Üí w ‚â§ y ‚Üí y ‚â§ z ‚Üí ‚Ñö-metric x y < Œµ‚ÇÅ ‚Üí ‚Ñö-metric w z < Œµ‚ÇÇ ‚Üí ‚Ñö-metric x z < (Œµ‚ÇÅ + Œµ‚ÇÇ)
inequality-chain-with-metric x y w z Œµ‚ÇÅ Œµ‚ÇÇ l‚ÇÅ l‚ÇÇ l‚ÇÉ l‚ÇÑ = conclusion 
 where
  from-previous-result : ‚Ñö-metric w z ‚â° ‚Ñö-metric w y + ‚Ñö-metric y z
  from-previous-result = inequality-chain-to-metric w y z l‚ÇÅ l‚ÇÇ
  I : ‚Ñö-metric x z ‚â° ‚Ñö-metric (x - y) (z - y)
  I = ‚Ñö-metric x z                  ‚â°‚ü® by-definition ‚ü©
      abs (x - z)                   ‚â°‚ü® ap abs (‚Ñö-add-zero fe x (- z) y) ‚ü©
      abs (x - y + (y - z))         ‚â°‚ü® ap (Œª Œ± ‚Üí abs (x - y + Œ±)) (‚Ñö+-comm y (- z)) ‚ü©
      abs (x - y + ((- z) + y))     ‚â°‚ü® ap (Œª Œ± ‚Üí abs (x - y + ((- z) + Œ±))) (‚Ñö-minus-minus fe y) ‚ü©
      abs (x - y + ((- z) - (- y))) ‚â°‚ü® ap (Œª Œ± ‚Üí abs (x - y + Œ±)) (‚Ñö-minus-dist fe z (- y)) ‚ü©
      abs (x - y - (z - y))         ‚â°‚ü® by-definition ‚ü©
      ‚Ñö-metric (x - y) (z - y) ‚àé
      
  II : ‚Ñö-metric (x - y) (z - y) ‚â§ (abs (x - y) + abs (- (z - y)))
  II = ‚Ñö-triangle-inequality fe (x - y) (- (z - y))
  
  III : (abs (x - y) + abs (- (z - y))) ‚â° ‚Ñö-metric x y + ‚Ñö-metric y z
  III = abs (x - y) + abs (- (z - y))   ‚â°‚ü® ap (abs (x - y) +_) (‚Ñö-abs-neg-equals-pos fe (z - y) ‚Åª¬π) ‚ü©
        abs (x - y) + abs (z - y)       ‚â°‚ü® ap (abs (x - y) +_) (‚Ñö-metric-commutes z y) ‚ü©
        abs (x - y) + ‚Ñö-metric y z      ‚â°‚ü® by-definition ‚ü©
        ‚Ñö-metric x y + ‚Ñö-metric y z ‚àé
        
  IV : ‚Ñö-metric (x - y) (z - y) ‚â§ (‚Ñö-metric x y + ‚Ñö-metric y z)
  IV = transport (Œª Œ± ‚Üí ‚Ñö-metric (x - y) (z - y) ‚â§ Œ±) III II
  
  V : ‚Ñö-metric y z ‚â§ ‚Ñö-metric w z
  V = transport (‚Ñö-metric y z ‚â§_) (from-previous-result ‚Åª¬π) ii
   where
    i : ‚Ñö-metric y z ‚â§ (‚Ñö-metric y z + ‚Ñö-metric w y)
    i = ‚Ñö‚â§-addition-preserves-order'' fe (‚Ñö-metric y z) (‚Ñö-metric w y) (‚Ñö-abs-is-positive (w - y))
    ii : ‚Ñö-metric y z ‚â§ (‚Ñö-metric w y + ‚Ñö-metric y z)
    ii = transport (‚Ñö-metric y z ‚â§_) (‚Ñö+-comm (‚Ñö-metric y z) (‚Ñö-metric w y)) i
    
  VI : (‚Ñö-metric x y + ‚Ñö-metric w z) < (Œµ‚ÇÅ + Œµ‚ÇÇ)
  VI = ‚Ñö<-adding (‚Ñö-metric x y) Œµ‚ÇÅ (‚Ñö-metric w z) Œµ‚ÇÇ l‚ÇÉ l‚ÇÑ
  
  VII : ‚Ñö-metric x z ‚â§ ‚Ñö-metric x y + ‚Ñö-metric w z
  VII = transport (_‚â§ (‚Ñö-metric x y + ‚Ñö-metric w z)) (I ‚Åª¬π) ii
   where
    i : (‚Ñö-metric x y + ‚Ñö-metric y z) ‚â§ (‚Ñö-metric x y + ‚Ñö-metric w z)
    i = transport‚ÇÇ _‚â§_ (‚Ñö+-comm (‚Ñö-metric y z) (‚Ñö-metric x y)) (‚Ñö+-comm (‚Ñö-metric w z) (‚Ñö-metric x y)) (‚Ñö‚â§-addition-preserves-order fe (‚Ñö-metric y z) (‚Ñö-metric w z) (‚Ñö-metric x y) V)
    ii : ‚Ñö-metric (x - y) (z - y) ‚â§ (‚Ñö-metric x y + ‚Ñö-metric w z)
    ii = ‚Ñö‚â§-trans fe (‚Ñö-metric (x - y) (z - y)) ((‚Ñö-metric x y + ‚Ñö-metric y z)) ((‚Ñö-metric x y + ‚Ñö-metric w z)) IV i

  conclusion : ‚Ñö-metric x z < (Œµ‚ÇÅ + Œµ‚ÇÇ)
  conclusion = ‚Ñö‚â§-<-trans fe (‚Ñö-metric x z) (‚Ñö-metric x y + ‚Ñö-metric w z) (Œµ‚ÇÅ + Œµ‚ÇÇ) VII VI

B-‚Ñö : (x y Œµ : ‚Ñö) ‚Üí 0‚Ñö < Œµ ‚Üí ùì§‚ÇÄ Ãá
B-‚Ñö x y Œµ l = ‚Ñö-metric x y < Œµ

‚Ñö-m1a : m1a ‚Ñö B-‚Ñö
‚Ñö-m1a x y f = I (‚Ñö‚â§-split fe 0‚Ñö (abs (x - y)) (‚Ñö-abs-is-positive (x - y)))
 where
  Œ± : ‚Ñö
  Œ± = ‚Ñö-metric x y
  I : (0‚Ñö < abs (x - y)) ‚àî (0‚Ñö ‚â° abs (x - y)) ‚Üí x ‚â° y
  I (inl z) = ùüò-elim (‚Ñö<-not-itself Œ± Œ∂)
   where
    Œ∂ : Œ± < Œ±
    Œ∂ = f Œ± z
  I (inr z) = ii
   where
    i : (x - y) ‚â° 0‚Ñö
    i = ‚Ñö-abs-zero-is-zero fe (x - y) (z ‚Åª¬π)
    ii : x ‚â° y
    ii = x                      ‚â°‚ü® ‚Ñö-zero-right-neutral fe x ‚Åª¬π ‚ü©
         x + 0‚Ñö                 ‚â°‚ü® ap (x +_) (‚Ñö-inverse-sum-to-zero fe y ‚Åª¬π) ‚ü©
         x + (y - y)            ‚â°‚ü® ap (x +_) (‚Ñö+-comm y (- y)) ‚ü©
         x + ((- y) + y)        ‚â°‚ü® ‚Ñö+-assoc fe x (- y) y ‚Åª¬π ‚ü©
         x + (- y) + y          ‚â°‚ü® ap (_+ y) i ‚ü©
         0‚Ñö + y                 ‚â°‚ü® ‚Ñö-zero-left-neutral fe y ‚ü© 
         y                      ‚àé
  
‚Ñö-m1b : m1b ‚Ñö B-‚Ñö
‚Ñö-m1b x y l = transport (Œª v ‚Üí v < y) (‚Ñö-self-dist fe x ‚Åª¬π) l

‚Ñö-m2 : m2 ‚Ñö B-‚Ñö
‚Ñö-m2 x y Œµ l‚ÇÅ B = transport (Œª z ‚Üí z < Œµ) (‚Ñö-metric-commutes x y) B

‚Ñö-m3 : m3 ‚Ñö B-‚Ñö
‚Ñö-m3 x y Œµ‚ÇÅ Œµ‚ÇÇ l‚ÇÅ l‚ÇÇ l‚ÇÉ B = ‚Ñö<-trans (‚Ñö-metric x y) Œµ‚ÇÅ Œµ‚ÇÇ B l‚ÇÉ

‚Ñö-m4 : m4 ‚Ñö B-‚Ñö
‚Ñö-m4 x y z Œµ‚ÇÅ Œµ‚ÇÇ l‚ÇÅ l‚ÇÇ B‚ÇÅ B‚ÇÇ = conclusion Œ±
 where
  Œ± : abs ((x - y) + (y - z)) ‚â§ (abs (x - y) + abs (y - z))
  Œ± = ‚Ñö-triangle-inequality fe (x - y) (y - z)

  Œ≤ : (abs (x - y) + abs (y - z)) < (Œµ‚ÇÅ + Œµ‚ÇÇ)
  Œ≤ = ‚Ñö<-adding (abs (x - y)) Œµ‚ÇÅ (abs(y - z)) Œµ‚ÇÇ B‚ÇÅ B‚ÇÇ

  Œ¥ : abs ((x - y) + (y + (- z))) ‚â° abs (x - z)
  Œ¥ = ap abs (‚Ñö-add-zero fe x (- z) y ‚Åª¬π)

  conclusion : abs ((x - y) + (y - z)) ‚â§ (abs (x - y) + abs (y - z)) ‚Üí abs (x - z) < (Œµ‚ÇÅ + Œµ‚ÇÇ)
  conclusion l = I (‚Ñö‚â§-split fe (abs ((x - y) + (y - z))) ((abs (x - y) + abs (y - z))) l) 
   where
    I : (abs ((x - y) + (y - z)) < (abs (x - y) + abs (y - z))) ‚àî (abs ((x - y) + (y - z)) ‚â° abs (x - y) + abs (y - z)) ‚Üí abs (x - z) < (Œµ‚ÇÅ + Œµ‚ÇÇ)
    I (inl l) =  ‚Ñö<-trans (abs (x - z)) ((abs (x - y) + abs (y - z))) (Œµ‚ÇÅ + Œµ‚ÇÇ) Œ≥ Œ≤
     where
      Œ≥ : abs (x - z) < (abs (x - y) + abs (y - z))
      Œ≥ = transport (Œª k ‚Üí k < (abs (x - y) + abs (y - z))) Œ¥ l
    I (inr e) = transport (_< (Œµ‚ÇÅ + Œµ‚ÇÇ)) (e ‚Åª¬π ‚àô Œ¥) Œ≤

‚Ñö-metric-space : metric-space ‚Ñö
‚Ñö-metric-space = B-‚Ñö , ‚Ñö-m1a , ‚Ñö-m1b , ‚Ñö-m2 , ‚Ñö-m3 , ‚Ñö-m4

\end{code}
