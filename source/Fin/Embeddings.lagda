Martin Escardo, sometime between 2014 and 2021.

\begin{code}

{-# OPTIONS --without-K --exact-split --safe --no-sized-types --no-guardedness --auto-inline #-}

module Fin.Embeddings where

open import UF.Subsingletons renaming (‚ä§Œ© to ‚ä§)

open import Fin.Properties
open import Fin.Type
open import Fin.Variation
open import MLTT.Plus-Properties
open import MLTT.Spartan
open import Naturals.Order
open import Notation.Order
open import UF.Embeddings

‚ü¶_‚üß : {n : ‚Ñï} ‚Üí Fin n ‚Üí ‚Ñï
‚ü¶_‚üß {n} = pr‚ÇÅ ‚àò Fin-prime n

‚ü¶‚üß-property : {n : ‚Ñï} (k : Fin n) ‚Üí ‚ü¶ k ‚üß < n
‚ü¶‚üß-property {n} k = pr‚ÇÇ (Fin-prime n k)

‚ü¶_‚üß-is-embedding : (n : ‚Ñï) ‚Üí is-embedding (‚ü¶_‚üß {n})
‚ü¶_‚üß-is-embedding n = ‚àò-is-embedding
                      (equivs-are-embeddings (Fin-prime n) (Fin-prime-is-equiv n))
                      (pr‚ÇÅ-is-embedding (Œª i ‚Üí <-is-prop-valued i n))

‚ü¶‚ü™‚ü´‚üß-property : {n : ‚Ñï} ‚Üí ‚ü¶ ‚ü™ n ‚ü´ ‚üß Ôºù n
‚ü¶‚ü™‚ü´‚üß-property {0}      = refl
‚ü¶‚ü™‚ü´‚üß-property {succ n} = ap succ (‚ü¶‚ü™‚ü´‚üß-property {n})

‚ü¶_‚üß-lc : (n : ‚Ñï) ‚Üí left-cancellable (‚ü¶_‚üß {n})
‚ü¶_‚üß-lc n = embeddings-are-lc ‚ü¶_‚üß (‚ü¶_‚üß-is-embedding n)

coerce : {n : ‚Ñï} {i : Fin n} ‚Üí Fin ‚ü¶ i ‚üß ‚Üí Fin n
coerce {succ n} {suc i} ùüé       = ùüé
coerce {succ n} {suc i} (suc j) = suc (coerce j)

coerce-lc : {n : ‚Ñï} {i : Fin n} (j k : Fin ‚ü¶ i ‚üß)
          ‚Üí coerce {n} {i} j Ôºù coerce {n} {i} k ‚Üí j Ôºù k
coerce-lc {succ n} {suc i} ùüé       ùüé       p = refl
coerce-lc {succ n} {suc i} ùüé       (suc j) p = ùüò-elim (+disjoint' p)
coerce-lc {succ n} {suc i} (suc j) ùüé       p = ùüò-elim (+disjoint p)
coerce-lc {succ n} {suc i} (suc j) (suc k) p = ap suc (coerce-lc {n} j k (suc-lc p))

incl : {n : ‚Ñï} {k : ‚Ñï} ‚Üí k ‚â§ n ‚Üí Fin k ‚Üí Fin n
incl {succ n} {succ k} l ùüé = ùüé
incl {succ n} {succ k} l (suc i) = suc (incl l i)

incl-lc : {n : ‚Ñï} {k : ‚Ñï} (l : k ‚â§ n)
        ‚Üí (i j : Fin k) ‚Üí incl l i Ôºù incl l j ‚Üí i Ôºù j
incl-lc {succ n} {succ k} l ùüé       ùüé       p = refl
incl-lc {succ n} {succ k} l ùüé       (suc j) p = ùüò-elim (positive-not-ùüé (p ‚Åª¬π))
incl-lc {succ n} {succ k} l (suc i) ùüé       p = ùüò-elim (positive-not-ùüé p)
incl-lc {succ n} {succ k} l (suc i) (suc j) p = ap suc (incl-lc l i j (suc-lc p))

_/_ : {n : ‚Ñï} (k : Fin (succ n)) ‚Üí Fin ‚ü¶ k ‚üß ‚Üí Fin n
k / i = incl (‚ü¶‚üß-property k) i

_‚ï±_ :  (n : ‚Ñï) ‚Üí Fin n ‚Üí Fin (succ n)
n ‚ï± k = incl (‚â§-succ n) k

mirror : {n : ‚Ñï} ‚Üí Fin n ‚Üí Fin n
mirror {succ n}       ùüé = ‚ü™ n ‚ü´
mirror {succ n} (suc k) = n ‚ï± mirror {n} k

\end{code}

TODO. Show that the above coersions are left cancellable (easy).

TODO. Rewrite above code to use the notation Œπ for all coersions,
defined in the module Notation.CanonicalMap.
