Andrew Sneap - 27th April 2021
Updated July 2022

In this file I define common divisors, and HCF's, along with a proof
that the Euclidean Algorithm produces HCF's.
\begin{code}

{-# OPTIONS --without-K --exact-split --safe #-}

open import MLTT.Spartan renaming (_+_ to _‚àî_) 

open import Naturals.Addition
open import Naturals.Division
open import Naturals.Multiplication
open import Naturals.Properties
open import Naturals.Order 
open import Notation.Order 
open import UF.Base 
open import UF.FunExt
open import UF.Subsingletons 
open import UF.Subsingletons-FunExt

module Naturals.HCF where

\end{code}

A common divisor d of x and y is a Natural Number which divides x and y,
and clearly is a proposition.

\begin{code}

is-common-divisor : (d x y : ‚Ñï) ‚Üí ùì§‚ÇÄ Ãá
is-common-divisor d x y = (d ‚à£ x) √ó (d ‚à£ y)

is-common-divisor-is-prop : (d x y : ‚Ñï) ‚Üí is-prop (is-common-divisor (succ d) x y)
is-common-divisor-is-prop d x y = √ó-is-prop (d ‚à£ x -is-prop) (d ‚à£ y -is-prop)

\end{code}

The highest common divisor of x and y is the common divisor of x and y
which is greater than all other common divisors. One way to formulate
the type of the hcf h of x and y is to say that any other common
factor is a divisor of the highest common factor.

\begin{code}

is-hcf : (h x y : ‚Ñï) ‚Üí ùì§‚ÇÄ Ãá
is-hcf h x y = (is-common-divisor h x y) √ó ((d : ‚Ñï) ‚Üí  is-common-divisor d x y ‚Üí d ‚à£ h)

\end{code}

Of course, any we can retrieve from the cartesian product that the hcf
is a common divisor.

\begin{code}

is-hcf-gives-is-common-divisor : (h x y : ‚Ñï) ‚Üí is-hcf h x y ‚Üí is-common-divisor h x y
is-hcf-gives-is-common-divisor h x y (a , p) = a

\end{code}

The statement "succ h is the highest common factor of x and y" is a
proposition.  In order to prove this, function extensionality is
required, because the second projection of the cartesian product is a
function. With function extensionality, proof that this statement is a
proposition follows from the proof that (is-common-divisor d x y) is a
proposition.

\begin{code}

is-hcf-is-prop : Fun-Ext ‚Üí (h x y : ‚Ñï) ‚Üí is-prop (is-hcf (succ h) x y)
is-hcf-is-prop fe h x y p q = √ó-is-prop (is-common-divisor-is-prop h x y) II p q
  where
    I : (d : ‚Ñï) ‚Üí is-common-divisor d x y ‚Üí is-prop (d ‚à£ succ h)
    I 0        i x = ùüò-elim (zero-does-not-divide-positive h x)
    I (succ d) i   = d ‚à£ (succ h) -is-prop
  
    II : is-prop ((d : ‚Ñï) ‚Üí is-common-divisor d x y ‚Üí d ‚à£ succ h)
    II p' q' = Œ†‚ÇÇ-is-prop fe I p' q'

\end{code}

Of course, hcf is commutative, which is easily proved by re-ordering projections.

\begin{code}

hcf-comm : (x y h : ‚Ñï) ‚Üí is-hcf h x y ‚Üí is-hcf h y x
hcf-comm x y h ((h‚à£x , h‚à£y) , f) = (h‚à£y , h‚à£x) , (Œª d icd ‚Üí f d (pr‚ÇÇ icd , pr‚ÇÅ icd))

hcf-comm' : (x y : ‚Ñï) ‚Üí Œ£ h Íûâ ‚Ñï , is-hcf h x y ‚Üí Œ£ h Íûâ ‚Ñï , is-hcf h y x
hcf-comm' x y (h , is-hcf) = h , (hcf-comm x y h is-hcf)

\end{code}

With an eye towards implement Euclid's algorithm to compute the
highest common factor, we now prove two lemmas; each direction of the
following proof:

If x Ôºù q * y + r, then is-hcf h x y ‚áî is-hcf y r.

For Euclid's algorithm, we only need the right-to-left implication,
but both are proved for completeness.

The general idea of the right-to-left implication is as follows:

x Ôºù q * y + r, h | y and h | r, with h Ôºù hcf(y , r).

Now, clearly h | x since h | (q * y + r), and h | y by assumption,
so h is a common factor of x and y.

To show that h is the highest common factor, assume that d | x,
d | y, and further that d * u Ôºù x , d * v Ôºù y for some u , v.

If we can show that d | y, and d | r, then d | h since is-hcf h y r.
First, d | y by assumption.

Now, d * u Ôºù q * (d * v) + r, so by the factor-of-sum-consequence,
d | r, and we are done.

\begin{code}

euclids-algorithm-lemma : (x y q r h : ‚Ñï) ‚Üí x Ôºù q * y + r ‚Üí is-hcf h x y ‚Üí is-hcf h y r
euclids-algorithm-lemma x y q r h e (((a , e‚ÇÄ) , b , e‚ÇÅ) , f) = I , II
 where
  I : is-common-divisor h y r
  I = (b , e‚ÇÅ) , factor-of-sum-consequence h a (q * b) r i
   where
    i : h * a Ôºù h * (q * b) + r
    i = h * a           Ôºù‚ü® e‚ÇÄ                                            ‚ü©
        x               Ôºù‚ü® e                                             ‚ü©
        q * y + r       Ôºù‚ü® ap (Œª - ‚Üí q * - + r) (e‚ÇÅ ‚Åª¬π)                  ‚ü©
        q * (h * b) + r Ôºù‚ü® ap (_+ r) (mult-associativity q h b ‚Åª¬π)       ‚ü©
        q * h * b + r   Ôºù‚ü® ap (Œª - ‚Üí - * b + r) (mult-commutativity q h) ‚ü©
        h * q * b + r   Ôºù‚ü® ap (_+ r) (mult-associativity h q b)          ‚ü©
        h * (q * b) + r ‚àé
        
  II : (d : ‚Ñï) ‚Üí is-common-divisor d y r ‚Üí d ‚à£ h
  II d ((u , e‚ÇÅ) , v , e‚ÇÇ) = f d ((q * u + v , i) , u , e‚ÇÅ)
   where
    i : d * (q * u + v) Ôºù x
    i = d * (q * u + v)     Ôºù‚ü® distributivity-mult-over-addition d (q * u) v ‚ü©
        d * (q * u) + d * v Ôºù‚ü® ap (d * (q * u) +_) e‚ÇÇ                        ‚ü©
        d * (q * u) + r     Ôºù‚ü® ap (_+ r) (mult-associativity d q u ‚Åª¬π)       ‚ü©
        d * q * u + r       Ôºù‚ü® ap (Œª - ‚Üí - * u + r) (mult-commutativity d q) ‚ü©
        q * d * u + r       Ôºù‚ü® ap (_+ r) (mult-associativity q d u)          ‚ü©
        q * (d * u) + r     Ôºù‚ü® ap (Œª - ‚Üí q * - + r) e‚ÇÅ                       ‚ü©
        q * y + r           Ôºù‚ü® e ‚Åª¬π                                          ‚ü©
        x                   ‚àé

euclids-algorithm-lemma' : (x y q r h : ‚Ñï) ‚Üí x Ôºù q * y + r ‚Üí is-hcf h y r ‚Üí is-hcf h x y
euclids-algorithm-lemma' x y q r h e (((a , e‚ÇÄ) , b , e‚ÇÅ) , f) = I , II
 where
  I : is-common-divisor h x y
  I = (q * a + b , i) , (a , e‚ÇÄ)
   where
    i : h * (q * a + b) Ôºù x
    i = h * (q * a + b)     Ôºù‚ü® distributivity-mult-over-addition h (q * a) b ‚ü©
        h * (q * a) + h * b Ôºù‚ü® ap (h * (q * a) +_) e‚ÇÅ                        ‚ü©
        h * (q * a) + r     Ôºù‚ü® ap (_+ r) (mult-associativity h q a ‚Åª¬π)       ‚ü©
        h * q * a + r       Ôºù‚ü® ap (Œª - ‚Üí - * a + r) (mult-commutativity h q) ‚ü©
        q * h * a + r       Ôºù‚ü® ap (_+ r) (mult-associativity q h a)          ‚ü©
        q * (h * a) + r     Ôºù‚ü® ap (Œª - ‚Üí q * - + r) e‚ÇÄ                       ‚ü©
        q * y + r           Ôºù‚ü® e ‚Åª¬π                                          ‚ü©
        x                   ‚àé  
  II : (d : ‚Ñï) ‚Üí is-common-divisor d x y ‚Üí d ‚à£ h
  II d ((u , e‚ÇÇ) , v , e‚ÇÉ)  = f d ((v , e‚ÇÉ) , factor-of-sum-consequence d u (q * v) r i)
   where
    i : d * u Ôºù d * (q * v) + r
    i = d * u           Ôºù‚ü® e‚ÇÇ                                            ‚ü©
        x               Ôºù‚ü® e                                             ‚ü©
        q * y + r       Ôºù‚ü® ap (Œª - ‚Üí q * - + r) (e‚ÇÉ ‚Åª¬π)                  ‚ü©
        q * (d * v) + r Ôºù‚ü® ap (_+ r) (mult-associativity q d v ‚Åª¬π)       ‚ü©
        q * d * v + r   Ôºù‚ü® ap (Œª - ‚Üí - * v + r) (mult-commutativity q d) ‚ü©
        d * q * v + r   Ôºù‚ü® ap (_+ r) (mult-associativity d q v)          ‚ü©
        d * (q * v) + r ‚àé


\end{code}

Now we have the function which computes the highest common factor for any two natural numbers x and y.
This function uses course-of-values induction in order to satisfy the Agda termination checker.

The step function includes an induction, which says the following:

If for any number x, we can find a number r with r < x, and for any
number k there exists a highest common factor of r and k, then for any
y there exists a highest common factor of x and y. (In the proof I use y in the IH, but this is not necessary.

\begin{code}

HCF : (x y : ‚Ñï) ‚Üí Œ£ h Íûâ ‚Ñï , is-hcf h x y
HCF = course-of-values-induction (Œª x ‚Üí (y : ‚Ñï) ‚Üí Œ£ h Íûâ ‚Ñï , is-hcf h x y) step
 where
  step : (x : ‚Ñï) ‚Üí ((r : ‚Ñï) ‚Üí r < x ‚Üí (y : ‚Ñï) ‚Üí Œ£ h Íûâ ‚Ñï , is-hcf h r y) ‚Üí (y : ‚Ñï) ‚Üí Œ£ h Íûâ ‚Ñï , is-hcf h x y
  step 0        IH y = y , (everything-divides-zero , ‚à£-refl) , (Œª d icd ‚Üí pr‚ÇÇ icd)
  step (succ x) IH y = I (division y x)
   where
    I : Œ£ q Íûâ ‚Ñï , Œ£ r Íûâ ‚Ñï , (y Ôºù q * succ x + r) √ó (r < succ x) ‚Üí Œ£ h Íûâ ‚Ñï , is-hcf h (succ x) y
    I (q , r , e‚ÇÄ , l) = II (IH r l (succ x))
     where
      II : Œ£ h Íûâ ‚Ñï , is-hcf h r (succ x) ‚Üí Œ£ h Íûâ ‚Ñï , is-hcf h (succ x) y
      II (h , h-is-hcf) = h , hcf-comm y (succ x) h i
       where
        i : is-hcf h y (succ x)
        i = euclids-algorithm-lemma' y (succ x) q r h e‚ÇÄ (hcf-comm r (succ x) h h-is-hcf)

hcf : (a b : ‚Ñï) ‚Üí ‚Ñï
hcf a b = pr‚ÇÅ (HCF a b)

\end{code}

Two numbers being coprime is also a proposition, as a simple
consequence of hcf being a proposition for all values of h.

Two numbers are coprime in the special case that the hcf is 1.

\begin{code}

coprime : (a b : ‚Ñï) ‚Üí ùì§‚ÇÄ Ãá
coprime a b = is-hcf 1 a b

coprime-is-prop : Fun-Ext ‚Üí (a b : ‚Ñï) ‚Üí is-prop (coprime a b)
coprime-is-prop fe a b = is-hcf-is-prop fe 0 a b

divbyhcf : (a b : ‚Ñï) ‚Üí Œ£ h Íûâ ‚Ñï , Œ£ x Íûâ ‚Ñï , Œ£ y Íûâ ‚Ñï , ((h * x Ôºù a) √ó (h * y Ôºù b)) √ó coprime x y
divbyhcf 0 b = b , (0 , (1 , ((refl , refl) , (everything-divides-zero , 1-divides-all 1) , Œª d ‚Üí pr‚ÇÇ)))
divbyhcf (succ a) b = I (HCF (succ a) b)
 where
  I : Œ£ c Íûâ ‚Ñï , is-hcf c (succ a) b ‚Üí Œ£ h Íûâ ‚Ñï , Œ£ x Íûâ ‚Ñï , Œ£ y Íûâ ‚Ñï , ((h * x Ôºù succ a) √ó (h * y Ôºù b)) √ó coprime x y 
  I (0 , ((x , x‚Çö) , y , y‚Çö) , Œ≥) = ùüò-elim (positive-not-zero a II)
   where
    II : succ a Ôºù 0
    II = succ a  Ôºù‚ü® x‚Çö ‚Åª¬π                     ‚ü©
         0 * x   Ôºù‚ü® mult-commutativity zero x ‚ü©
         0       ‚àé
  I (succ h , ((x , x‚Çö) , y , y‚Çö) , Œ≥) = (succ h) , (x , (y , ((x‚Çö , y‚Çö) , (((x , mult-commutativity 1 x) , y , (mult-commutativity 1 y)) , II))))
   where
    II : (f' : ‚Ñï) ‚Üí is-common-divisor f' x y ‚Üí f' ‚à£ 1
    II f' ((Œ± , Œ±‚Çö) , Œ≤ , Œ≤‚Çö) = III (Œ≥ (succ h * f') ((Œ± , Œ±‚Çö') , Œ≤ , Œ≤‚Çö'))
     where
      Œ±‚Çö' : succ h * f' * Œ± Ôºù succ a
      Œ±‚Çö' = succ h * f' * Œ±     Ôºù‚ü® mult-associativity (succ h) f' Œ± ‚ü©
            succ h * (f' * Œ±)   Ôºù‚ü® ap (succ h *_) Œ±‚Çö                ‚ü©
            succ h * x          Ôºù‚ü® x‚Çö                               ‚ü©
            succ a              ‚àé

      Œ≤‚Çö' : succ h * f' * Œ≤ Ôºù b
      Œ≤‚Çö' = succ h * f' * Œ≤   Ôºù‚ü® mult-associativity (succ h) f' Œ≤ ‚ü©
            succ h * (f' * Œ≤) Ôºù‚ü® ap (succ h *_) Œ≤‚Çö                ‚ü©
            succ h * y        Ôºù‚ü® y‚Çö                               ‚ü©
            b                 ‚àé

      III : (succ h) * f' ‚à£ (succ h) ‚Üí f' ‚à£ 1
      III (Œ¥ , Œ¥‚Çö) = 1 , product-one-gives-one f' Œ¥ (mult-left-cancellable (f' * Œ¥) 1 h e)
       where
        e : succ h * (f' * Œ¥) Ôºù succ h * 1
        e = succ h * (f' * Œ¥) Ôºù‚ü® mult-associativity (succ h) f' Œ¥ ‚Åª¬π ‚ü©
            succ h * f' * Œ¥   Ôºù‚ü® Œ¥‚Çö ‚ü©
            succ h            ‚àé

hcf-unique : (a b : ‚Ñï) ‚Üí ((h , p) : Œ£ h Íûâ ‚Ñï , is-hcf h a b) ‚Üí ((h' , p') : Œ£ h' Íûâ ‚Ñï , is-hcf h' a b) ‚Üí h Ôºù h'
hcf-unique a b (h , h-icd , f) (h' , h'-icd , f') = ‚à£-anti h h' I II
 where
  I : h ‚à£ h'
  I = f' h h-icd

  II : h' ‚à£ h
  II = f h' h'-icd

\end{code}

\begin{code}

\end{code}

The statement "x and y have a highest-common-factor" is also a
proposition. Again, function extensionality is required.

To prove that the hcf is unique, we assume there are two different
hcf's. But by the definition of is-hcf, all common factors are factors
of the hcf, and both hcf's are common factors. Two numbers which are
factors of each other are equal by the anti-symmetric property of
division.

\begin{code}

has-hcf : (x y : ‚Ñï) ‚Üí ùì§‚ÇÄ Ãá
has-hcf x y = Œ£ d Íûâ ‚Ñï , is-hcf (succ d) x y

has-hcf-is-prop : Fun-Ext ‚Üí (x y : ‚Ñï) ‚Üí is-prop (has-hcf x y)
has-hcf-is-prop fe x y (h‚ÇÅ , h‚ÇÅ-cf , f) (h‚ÇÇ , h‚ÇÇ-cf , g) = to-subtype-Ôºù I II
 where
  I : (d : ‚Ñï) ‚Üí is-prop (is-hcf (succ d) x y)
  I d = is-hcf-is-prop fe d x y

  II : h‚ÇÅ Ôºù h‚ÇÇ
  II = succ-lc (‚à£-anti (succ h‚ÇÅ) (succ h‚ÇÇ) Œ± Œ≤)
   where
    Œ± : succ h‚ÇÅ ‚à£ succ h‚ÇÇ
    Œ± = g (succ h‚ÇÅ) h‚ÇÅ-cf

    Œ≤ : succ h‚ÇÇ ‚à£ succ h‚ÇÅ
    Œ≤ = f (succ h‚ÇÇ) h‚ÇÇ-cf

\end{code}
