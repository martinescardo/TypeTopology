Chuangjie Xu 2011, with changes by Martin Escardo later.

\begin{code}

{-# OPTIONS --safe --without-K #-}

module Naturals.Addition where

open import MLTT.Spartan hiding (_+_)
open import Naturals.Properties

infixl 31 _+_

_+_ : ‚Ñï ‚Üí ‚Ñï ‚Üí ‚Ñï
n + 0 = n
n + (succ m) = succ (n + m)

_+·¥∏_ : ‚Ñï ‚Üí ‚Ñï ‚Üí ‚Ñï
m +·¥∏ n = n + m

{-# BUILTIN NATPLUS _+_ #-}

zero-right-neutral : (n : ‚Ñï) ‚Üí n + 0 Ôºù n
zero-right-neutral n = refl

zero-left-neutral : (n : ‚Ñï) ‚Üí 0 + n Ôºù n
zero-left-neutral = ‚Ñï-induction base step
  where
   base : 0 + 0 Ôºù 0
   base = refl

   step : (n : ‚Ñï) ‚Üí 0 + n Ôºù n ‚Üí 0 + succ n Ôºù succ n
   step n IH = 0 + succ n   Ôºù‚ü® refl ‚ü©
               succ (0 + n) Ôºù‚ü® ap succ IH ‚ü©
               succ n       ‚àé

addition-associativity : (l n m : ‚Ñï) ‚Üí (l + n) + m Ôºù l + (n + m)
addition-associativity l n = ‚Ñï-induction base step
  where
   base : (l + n) + 0 Ôºù l + (n + 0)
   base = (l + n) + 0  Ôºù‚ü® refl ‚ü©
           l + n       Ôºù‚ü® refl ‚ü©
           l + (n + 0) ‚àé

   step : (m : ‚Ñï) ‚Üí (l + n) + m Ôºù l + (n + m)
                  ‚Üí (l + n) + succ m Ôºù l + (n + succ m)
   step m IH = (l + n) + succ m   Ôºù‚ü® refl ‚ü©
               succ ((l + n) + m) Ôºù‚ü® ap succ IH ‚ü©
               succ (l + (n + m)) Ôºù‚ü® refl ‚ü©
               l + succ (n + m)   Ôºù‚ü® refl ‚ü©
               l + (n + succ m)   ‚àé

addition-commutativity : (n m : ‚Ñï) ‚Üí n + m Ôºù m + n
addition-commutativity n = ‚Ñï-induction base step
  where
   base : n + 0 Ôºù 0 + n
   base = n + 0 Ôºù‚ü® zero-right-neutral n ‚ü©
          n     Ôºù‚ü® (zero-left-neutral n)‚Åª¬π ‚ü©
          0 + n ‚àé

   step : (m : ‚Ñï) ‚Üí n + m Ôºù m + n ‚Üí n + succ m Ôºù succ m + n
   step m IH = n + succ m   Ôºù‚ü® refl ‚ü©
               succ (n + m) Ôºù‚ü® ap succ IH ‚ü©
               succ (m + n) Ôºù‚ü® lemma‚ÇÄ (m + n) ‚ü©
               1 + (m + n)  Ôºù‚ü® (addition-associativity 1 m n)‚Åª¬π ‚ü©
               (1 + m) + n  Ôºù‚ü® ap (_+ n) ((lemma‚ÇÄ m)‚Åª¬π) ‚ü©
               succ m + n   ‚àé
     where
      lemma‚ÇÄ : (k : ‚Ñï) ‚Üí succ k Ôºù 1 + k
      lemma‚ÇÄ = ‚Ñï-induction base‚ÇÄ step‚ÇÄ
        where
         base‚ÇÄ : succ 0 Ôºù 1 + 0
         base‚ÇÄ = refl

         step‚ÇÄ : (k : ‚Ñï) ‚Üí succ k Ôºù 1 + k ‚Üí succ (succ k) Ôºù 1 + succ k
         step‚ÇÄ k IH = succ (succ k) Ôºù‚ü® ap succ IH ‚ü©
                      succ (1 + k)  Ôºù‚ü® refl ‚ü©
                      1 + succ k    ‚àé

trivial-addition-rearrangement : (x y z : ‚Ñï) ‚Üí x + y + z Ôºù x + z + y
trivial-addition-rearrangement x y z =
  (x + y) + z Ôºù‚ü® addition-associativity x y z ‚ü©
  x + (y + z) Ôºù‚ü® ap (x +_) (addition-commutativity y z) ‚ü©
  x + (z + y) Ôºù‚ü® (addition-associativity x z y)‚Åª¬π ‚ü©
  (x + z) + y ‚àé

\end{code}

Added 12/05/2020 by Andrew Sneap.

Some more simple properties of addition. The proofs all use induction,
apart from addition-right-cancellable which follows from
addition-left-cancellable and commutativity of addition.

\begin{code}

succ-right : (x y : ‚Ñï) ‚Üí x + succ y Ôºù succ (x + y)
succ-right x y = refl

succ-left : (x y : ‚Ñï) ‚Üí succ x + y Ôºù succ (x + y)
succ-left x = ‚Ñï-induction base step
 where
  base : succ x + 0 Ôºù succ (x + 0)
  base = succ x + 0   Ôºù‚ü® refl         ‚ü©
         succ x       Ôºù‚ü® ap succ refl ‚ü©
         succ (x + 0) ‚àé

  step : (k : ‚Ñï)
       ‚Üí succ x + k Ôºù succ (x + k)
       ‚Üí succ x + succ k Ôºù succ (x + succ k)
  step k IH = succ x + succ k     Ôºù‚ü® refl       ‚ü©
              succ (succ x + k)   Ôºù‚ü® ap succ IH ‚ü©
              succ (succ (x + k)) Ôºù‚ü® refl       ‚ü©
              succ (x + succ k)   ‚àé

addition-left-cancellable : (x y z : ‚Ñï) ‚Üí z + x Ôºù z + y ‚Üí x Ôºù y
addition-left-cancellable x y = ‚Ñï-induction base step
 where
  base : 0 + x Ôºù 0 + y ‚Üí x Ôºù y
  base h = x      Ôºù‚ü® zero-left-neutral x ‚Åª¬π ‚ü©
           0 + x  Ôºù‚ü® h                      ‚ü©
           0 + y  Ôºù‚ü® zero-left-neutral y    ‚ü©
           y ‚àé

  step : (k : ‚Ñï)
       ‚Üí (k + x      Ôºù k + y      ‚Üí x Ôºù y)
       ‚Üí (succ k + x Ôºù succ k + y ‚Üí x Ôºù y)
  step k IH r = IH (succ-lc (lemma‚ÇÅ r))
   where
    lemma‚ÇÅ : succ k + x Ôºù succ k + y ‚Üí succ (k + x) Ôºù succ (k + y)
    lemma‚ÇÅ r = succ (k + x)           Ôºù‚ü® succ-left k x ‚Åª¬π ‚ü©
               succ k + x             Ôºù‚ü® r                ‚ü©
               succ k + y             Ôºù‚ü® succ-left k y    ‚ü©
               succ (k + y) ‚àé


addition-right-cancellable : (x y z : ‚Ñï) ‚Üí x + z Ôºù y + z ‚Üí x Ôºù y
addition-right-cancellable x y z r = addition-left-cancellable x y z lemma‚ÇÄ
 where
  lemma‚ÇÄ : z + x Ôºù z + y
  lemma‚ÇÄ = z + x      Ôºù‚ü® addition-commutativity z x ‚ü©
           x + z      Ôºù‚ü® r                          ‚ü©
           y + z      Ôºù‚ü® addition-commutativity y z ‚ü©
           z + y ‚àé

\end{code}

We also have that if the sum of two numbers are zero, then the right
argument is zero. The left argument is zero, which can be proved using
commutativity of addition. This function is needed in the HCF file.

\begin{code}

sum-to-zero-gives-zero : (x y : ‚Ñï) ‚Üí x + y Ôºù 0 ‚Üí y Ôºù 0
sum-to-zero-gives-zero x 0        e = refl
sum-to-zero-gives-zero x (succ y) e = ùüò-elim (positive-not-zero (x + y) e)

\end{code}
