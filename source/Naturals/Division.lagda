Andrew Sneap - October - November 2021
Updated May - July 2022

This file defines division of natural numbers as a Œ£ type. Many common
proofs of properties of division are also provided.

\begin{code}

{-# OPTIONS --safe --without-K #-}

open import MLTT.Spartan renaming (_+_ to _‚àî_)

open import Naturals.Addition
open import Naturals.Multiplication
open import Naturals.Properties
open import Naturals.Order
open import Notation.Order
open import UF.Base
open import UF.DiscreteAndSeparated
open import UF.Subsingletons

module Naturals.Division where

\end{code}

First, we have the definition of division. Division can also be
defined inductively, but as with most definitions I have instead
chosen to express division as a Œ£ type.

\begin{code}

_‚à£_ : ‚Ñï ‚Üí ‚Ñï ‚Üí ùì§‚ÇÄ Ãá
x ‚à£ y = Œ£ a Íûâ ‚Ñï , (x * a Ôºù y)

\end{code}

Notice that we cannot prove that (x y : ‚Ñï) ‚Üí is-prop (x ‚à£ y).
When x Ôºù 0, and y Ôºù 0, we can choose any factor a and the identity type holds.

On the other hand, for values x > 0, it is a proposition that x | y.
This is proved using the cancellative property of multiplication of
factors greater than 0.

\begin{code}

_‚à£_-is-prop : (x y : ‚Ñï) ‚Üí is-prop (succ x ‚à£ y)
_‚à£_-is-prop x y (a , p) (b , p') = to-subtype-Ôºù (Œª _ ‚Üí ‚Ñï-is-set) II
 where
  I : succ x * a Ôºù succ x * b
  I = p ‚àô p' ‚Åª¬π

  II : a Ôºù b
  II = mult-left-cancellable a b x I

\end{code}

Clearly, 1 divides anything, which is easily proved since 1 is the
multiplicative identity of naturals.

0 does not divide any value greater than 0. If this was the case, then
we would have that 0 * a Ôºù 0 Ôºù succ x, which is a contradiction.

Also, any number divides itself, and divides zero.

\begin{code}

1-divides-all : (x : ‚Ñï) ‚Üí 1 ‚à£ x
1-divides-all x = x , mult-left-id x

zero-does-not-divide-positive : (x : ‚Ñï) ‚Üí ¬¨(0 ‚à£ succ x)
zero-does-not-divide-positive x (a , p) = positive-not-zero x Œ≥
 where
  Œ≥ : succ x Ôºù 0
  Œ≥ = succ x Ôºù‚ü® p ‚Åª¬π             ‚ü©
      0 * a  Ôºù‚ü® zero-left-base a ‚ü©
      0      ‚àé

‚à£-refl : {x : ‚Ñï} ‚Üí x ‚à£ x
‚à£-refl = 1 , refl

everything-divides-zero : {x : ‚Ñï} ‚Üí x ‚à£ 0
everything-divides-zero = 0 , refl

\end{code}

For natural numbers, division has the property that if x | y and
y | x, then x Ôºù y.  This property is used to prove that if the
numerator a of a rational is 0, then the rational is 0.  In order to
prove this, we first need two lemmas.

The first is that if x < y, and x < z, then x < y * z.
This follows as a corollary of <-+.

\begin{code}

‚à£-anti-lemma : (x y z : ‚Ñï) ‚Üí x < y ‚Üí x < z ‚Üí x < y * z
‚à£-anti-lemma x 0        z        l‚ÇÅ l‚ÇÇ = ùüò-elim (zero-least' z l‚ÇÅ)
‚à£-anti-lemma x (succ y) 0        l‚ÇÅ l‚ÇÇ = ùüò-elim (zero-least' y l‚ÇÇ)
‚à£-anti-lemma x (succ y) (succ z) l‚ÇÅ l‚ÇÇ = <-+ x (succ y) (succ y * z) l‚ÇÅ

\end{code}

The second is that if the product of two naturals is 1, then the left
argument is 1. Of course, both arguments are 1 by commutativity of
multiplication.

The proof is by case analysis. When x Ôºù 1, we are done.
If x Ôºù 0, then x * y Ôºù 0 Ôºù 1, which is a contradiction.
If x > 1, the consider y. In each case, we find a contradiction.

\begin{code}

left-factor-one : (x y : ‚Ñï) ‚Üí x * y Ôºù 1 ‚Üí x Ôºù 1
left-factor-one 0 y e = ùüò-elim (zero-not-positive 0 Œ≥)
 where
  Œ≥ : 0 Ôºù 1
  Œ≥ = zero-left-base y ‚Åª¬π ‚àô e
left-factor-one 1 y e = refl
left-factor-one (succ (succ x)) 0 e = ùüò-elim (zero-not-positive 0 e)
left-factor-one (succ (succ x)) 1 e = ùüò-elim (zero-not-positive x Œ≥)
 where
  Œ≥ : 0 Ôºù succ x
  Œ≥ = succ-lc (e ‚Åª¬π)
left-factor-one (succ (succ x)) (succ (succ y)) e = ùüò-elim Œ≥
 where
  l‚ÇÅ : 0 < succ x
  l‚ÇÅ = zero-least (succ x)

  l‚ÇÇ : 0 < succ y
  l‚ÇÇ = zero-least (succ y)

  l‚ÇÉ : 1 < succ (succ x) * succ (succ y)
  l‚ÇÉ = ‚à£-anti-lemma 1 (succ (succ x)) (succ (succ y)) l‚ÇÅ l‚ÇÇ

  Œ≥ : ùüò
  Œ≥ = less-than-not-equal _ _ l‚ÇÉ (e ‚Åª¬π)

division-refl-right-unit : (x y : ‚Ñï) ‚Üí succ x * y ‚à£ succ x ‚Üí y Ôºù 1
division-refl-right-unit x y (k , e) = left-factor-one y k II
 where
  I : succ x * (y * k) Ôºù succ x * 1
  I = mult-associativity (succ x) y k ‚Åª¬π ‚àô e

  II : y * k Ôºù 1
  II = mult-left-cancellable (y * k) 1 x I

division-refl-right-factor : (x y : ‚Ñï) ‚Üí succ x * y ‚à£ succ x ‚Üí y ‚à£ 1
division-refl-right-factor x y (k , e) = Œ≥
 where
  I : y Ôºù 1
  I = division-refl-right-unit x y (k , e)

  II : 1 ‚à£ 1
  II = 1-divides-all 1

  Œ≥ : y ‚à£ 1
  Œ≥ = transport (_‚à£ 1) (I ‚Åª¬π) II

\end{code}

And we can finally prove that division is anti-symmetric property,
using the two lemmas, and case analysis on y. In the case y Ôºù 0, we
have 0 * b Ôºù x, and hence x Ôºù y Ôºù 0.

In the case y > 0, we can use the fact that multiplication is
cancellable, and the hypothesis x * a Ôºù succ y, succ y * b Ôºù x to
prove that b Ôºù 1, and conclude that division is anti-symmetric.


\begin{code}

‚à£-anti : (x y : ‚Ñï) ‚Üí x ‚à£ y ‚Üí y ‚à£ x ‚Üí x Ôºù y
‚à£-anti x 0        (a , e‚ÇÅ) (b , e‚ÇÇ) = e‚ÇÇ ‚Åª¬π ‚àô zero-left-base b
‚à£-anti x (succ y) (a , e‚ÇÅ) (b , e‚ÇÇ) = e‚ÇÇ ‚Åª¬π ‚àô ap (succ y *_) b-is-1
 where
  I : succ y * (b * a) Ôºù succ y * 1
  I = succ y * (b * a) Ôºù‚ü® mult-associativity (succ y) b a ‚Åª¬π ‚ü©
      succ y * b * a   Ôºù‚ü® ap (_* a) e‚ÇÇ ‚àô e‚ÇÅ                  ‚ü©
      succ y ‚àé

  b*a-is-1 : b * a Ôºù 1
  b*a-is-1 = mult-left-cancellable (b * a) 1 y I

  b-is-1 : b Ôºù 1
  b-is-1 = left-factor-one b a b*a-is-1

\end{code}

Division distributes over addition, over multiples, and is
transitive. The proofs are simple and corollaries of the properties of
multiplication.

\begin{code}

‚à£-respects-addition : (x y z : ‚Ñï) ‚Üí x ‚à£ y ‚Üí x ‚à£ z ‚Üí x ‚à£ (y + z)
‚à£-respects-addition x y z (a , p) (b , q) = (a + b , I)
 where
  I : x * (a + b) Ôºù y + z
  I = x * (a + b)   Ôºù‚ü® distributivity-mult-over-addition x a b ‚ü©
      x * a + x * b Ôºù‚ü® ap (_+ x * b) p                         ‚ü©
      y + x * b     Ôºù‚ü® ap (y +_) q                             ‚ü©
      y + z         ‚àé

‚à£-divisor-divides-multiple : (a b k : ‚Ñï) ‚Üí a ‚à£ b ‚Üí a ‚à£ k * b
‚à£-divisor-divides-multiple a b k (x , p) = (x * k) , I
 where
  I : a * (x * k) Ôºù k * b
  I = a * (x * k) Ôºù‚ü® mult-associativity a x k ‚Åª¬π ‚ü©
      a * x * k   Ôºù‚ü® ap (_* k) p                 ‚ü©
      b * k       Ôºù‚ü® mult-commutativity b k      ‚ü©
      k * b       ‚àé

‚à£-respects-multiples : (a b c k l : ‚Ñï) ‚Üí a ‚à£ b ‚Üí a ‚à£ c ‚Üí a ‚à£ (k * b + l * c)
‚à£-respects-multiples a b c k l p‚ÇÅ p‚ÇÇ = ‚à£-respects-addition a (k * b) (l * c) I II
 where
  I : a ‚à£ (k * b)
  I = ‚à£-divisor-divides-multiple a b k p‚ÇÅ
  II : a ‚à£ (l * c)
  II = ‚à£-divisor-divides-multiple a c l p‚ÇÇ

‚à£-trans : (a b c : ‚Ñï) ‚Üí a ‚à£ b ‚Üí b ‚à£ c ‚Üí a ‚à£ c
‚à£-trans a b c (x , p) (y , q) = (x * y) , I
 where
  I : a * (x * y) Ôºù c
  I = a * (x * y)  Ôºù‚ü® mult-associativity a x y ‚Åª¬π ‚ü©
      (a * x) * y  Ôºù‚ü® ap ( _* y) p                ‚ü©
      b * y        Ôºù‚ü® q                           ‚ü©
      c            ‚àé

\end{code}

Now we state the division theorem for natural numbers. This states
that for a natural number a and d, there exists a quotient q and
remainder r with a Ôºù q * (d + 1) + r, with the remainder r less than
succ d.

\begin{code}

division-theorem : (a d : ‚Ñï) ‚Üí ùì§‚ÇÄ Ãá
division-theorem a d = Œ£ q Íûâ ‚Ñï , Œ£ r Íûâ ‚Ñï , (a Ôºù q * succ d + r) √ó (r < succ d)

\end{code}

There are many ways to compute division on natural numbers. The chosen
method here (mainly to satisfy the termination checker) is to use
natural induction.

To compute (succ d) | a, we do induction on a.

Base: If a Ôºù 0, then the quotient and remainder are both 0.

Inductive step: Suppose that (succ d) | k, then there exists q , r
such that k = q * succ d + r, and r < succ d.

We want to show that (succ d) | (succ k).
Since r < succ d, we have that either r < d or r Ôºù d.

If r < d, then the quotient remains the same and the remainder
increases by 1. Since r < d, (succ r) < (succ d), and we are done.

If r Ôºù d, then the quotient increases by 1 and the remainder is 0.
Clearly, 0 < succ d.  Proving that succ k Ôºù succ q + succ q * d
follows from the inductive hypothesis and r Ôºù d.

\begin{code}

division : (a d : ‚Ñï) ‚Üí division-theorem a d
division a d = ‚Ñï-induction base step a
 where
  base : Œ£ q Íûâ ‚Ñï , Œ£ r Íûâ ‚Ñï , (0 Ôºù q * succ d + r) √ó (r < succ d)
  base = 0 , (0 , (I , II))
   where
    I : 0 Ôºù 0 * succ d + 0
    I = 0         Ôºù‚ü® refl                               ‚ü©
        0 + 0     Ôºù‚ü® ap (0 +_) (zero-left-base d ‚Åª¬π) ‚ü©
        0 + 0 * d ‚àé

    II : 0 < succ d
    II = zero-least d

  step : (k : ‚Ñï)
       ‚Üí Œ£ q Íûâ ‚Ñï , Œ£ r Íûâ ‚Ñï , (k Ôºù q * succ d + r) √ó (r < succ d)
       ‚Üí Œ£ q Íûâ ‚Ñï , Œ£ r Íûâ ‚Ñï , (succ k Ôºù q * succ d + r) √ó (r < succ d)
  step k (q , r , e , l) = Œ≥ (<-split r d l)
   where
    Œ≥ : (r < d) ‚àî (r Ôºù d)
      ‚Üí  Œ£ q Íûâ ‚Ñï , Œ£ r Íûâ ‚Ñï , (succ k Ôºù q * succ d + r) √ó (r < succ d)
    Œ≥ (inl l) = q , succ r , ap succ e , l
    Œ≥ (inr e') = succ q , 0 , I , unique-to-ùüô (0 < succ d)
     where
      I : succ k Ôºù succ q + succ q * d
      I = succ k                        Ôºù‚ü® i   ‚ü©
          succ (q + q * d + r)          Ôºù‚ü® ii  ‚ü©
          succ (q + q * d + d)          Ôºù‚ü® iii ‚ü©
          succ (q + (q * d + d))        Ôºù‚ü® iv  ‚ü©
          succ q + (q * d + d)          Ôºù‚ü® v   ‚ü©
          succ q + (d * q + d)          Ôºù‚ü® vi  ‚ü©
          succ q + (d + d * q)          Ôºù‚ü® vii ‚ü©
          succ q + succ q * d           ‚àé
       where
        i   = ap succ e
        ii  = ap succ (ap (q + q * d +_) e')
        iii = ap succ (addition-associativity q (q * d) d)
        iv  = succ-left q (q * d + d) ‚Åª¬π
        v   = ap (succ q +_) (ap (_+ d) (mult-commutativity q d))
        vi  = ap (succ q +_) (addition-commutativity (d * q) d)
        vii = ap (succ q +_) (mult-commutativity d (succ q))

\end{code}

The division theorem is clearly a proposition.

First, we fix the quotient, and prove that the remainder is unique.

That is, if we have that a Ôºù q * succ d + r, and
                         a Ôºù q * succ d + r', then r Ôºù r'.
This is easy to prove using cancellation of addition.

\begin{code}

division-is-prop' : (a d q : ‚Ñï)
                  ‚Üí is-prop (Œ£ r Íûâ ‚Ñï , (a Ôºù q * succ d + r) √ó r < succ d)
division-is-prop' a d q (r‚ÇÄ , e‚ÇÄ , l‚ÇÄ) (r‚ÇÅ , e‚ÇÅ , l‚ÇÅ) = Œ≥
  where
   Œ≥‚ÇÅ : (r : ‚Ñï) ‚Üí is-prop ((a Ôºù q * succ d + r) √ó r < succ d)
   Œ≥‚ÇÅ r = √ó-is-prop ‚Ñï-is-set (<-is-prop-valued r (succ d))

   I : q * succ d + r‚ÇÄ Ôºù q * succ d + r‚ÇÅ
   I = q * succ d + r‚ÇÄ Ôºù‚ü® e‚ÇÄ ‚Åª¬π ‚ü©
       a               Ôºù‚ü® e‚ÇÅ    ‚ü©
       q * succ d + r‚ÇÅ ‚àé

   Œ≥‚ÇÇ : r‚ÇÄ Ôºù r‚ÇÅ
   Œ≥‚ÇÇ = addition-left-cancellable r‚ÇÄ r‚ÇÅ (q * succ d) I

   Œ≥ : r‚ÇÄ , e‚ÇÄ , l‚ÇÄ Ôºù r‚ÇÅ , e‚ÇÅ , l‚ÇÅ
   Œ≥ = to-subtype-Ôºù Œ≥‚ÇÅ Œ≥‚ÇÇ

\end{code}

To conclude that the division theorem is a proposition, we use
trichotomy on the two quotient values q‚ÇÄ and q‚ÇÅ.

When q‚ÇÄ Ôºù q‚ÇÅ, we are done.

In either of two cases, we can generalise a contradiction proof, which
is done in division-is-prop-lemma.

The idea of the proof is as follows:

We have that:
r‚ÇÄ ‚â§ d,
r‚ÇÅ ‚â§ d,
q‚ÇÄ < q‚ÇÅ

a Ôºù q‚ÇÄ * succ d + r‚ÇÄ,
a Ôºù q‚ÇÅ * succ d + r‚ÇÅ,

Hence we have that

q‚ÇÄ + k Ôºù q‚ÇÅ, with k > 0
q‚ÇÄ * succ d + r‚ÇÄ Ôºù q‚ÇÅ * succ d + r‚ÇÅ
                 Ôºù (q‚ÇÄ + k) * succ d + r‚ÇÅ
                 Ôºù (q‚ÇÄ * d) + k * succ d + r‚ÇÅ
Now, r‚ÇÄ Ôºù k * succ d + r‚ÇÅ
   ‚áí k * succ d + r‚ÇÅ ‚â§ d    (since r‚ÇÄ ‚â§ d)
   ‚áí k * succ d ‚â§ d
   ‚áí succ d ‚â§ d, and hence we have a contradiction.

\begin{code}

division-is-prop-lemma : (a d q‚ÇÄ q‚ÇÅ r‚ÇÄ r‚ÇÅ : ‚Ñï)
                       ‚Üí r‚ÇÄ ‚â§ d
                       ‚Üí a Ôºù q‚ÇÄ * succ d + r‚ÇÄ
                       ‚Üí a Ôºù q‚ÇÅ * succ d + r‚ÇÅ
                       ‚Üí ¬¨ (q‚ÇÄ < q‚ÇÅ)
division-is-prop-lemma a d q‚ÇÄ q‚ÇÅ r‚ÇÄ r‚ÇÅ l‚ÇÅ e‚ÇÅ e‚ÇÇ l‚ÇÇ = not-less-than-itself d Œ≥
 where
  t : Œ£ k Íûâ ‚Ñï , k + succ q‚ÇÄ Ôºù q‚ÇÅ
  t = subtraction (succ q‚ÇÄ) q‚ÇÅ l‚ÇÇ

  k = pr‚ÇÅ t
  e‚ÇÉ = pr‚ÇÇ t

  I : q‚ÇÄ * succ d + r‚ÇÄ Ôºù q‚ÇÄ * succ d + (succ k * succ d + r‚ÇÅ)
  I = q‚ÇÄ * succ d + r‚ÇÄ                     Ôºù‚ü® e‚ÇÅ ‚Åª¬π ‚ü©
      a                                    Ôºù‚ü® e‚ÇÇ    ‚ü©
      q‚ÇÅ + q‚ÇÅ * d + r‚ÇÅ                     Ôºù‚ü® refl  ‚ü©
      q‚ÇÅ * succ d + r‚ÇÅ                     Ôºù‚ü® i     ‚ü©
      succ (k + q‚ÇÄ) * succ d + r‚ÇÅ          Ôºù‚ü® ii    ‚ü©
      (q‚ÇÄ + succ k) * succ d + r‚ÇÅ          Ôºù‚ü® iii   ‚ü©
      q‚ÇÄ * succ d + succ k * succ d + r‚ÇÅ   Ôºù‚ü® iv    ‚ü©
      q‚ÇÄ * succ d + (succ k * succ d + r‚ÇÅ) ‚àé
   where
    i   = ap (Œª - ‚Üí - * succ d + r‚ÇÅ) (e‚ÇÉ ‚Åª¬π)
    ii  = ap (Œª - ‚Üí succ - * succ d + r‚ÇÅ) (addition-commutativity k q‚ÇÄ)
    iii = ap (_+ r‚ÇÅ) (distributivity-mult-over-addition' q‚ÇÄ (succ k) (succ d))
    iv  = addition-associativity (q‚ÇÄ * succ d) (succ k * succ d) r‚ÇÅ

  II : r‚ÇÄ Ôºù succ k * succ d + r‚ÇÅ
  II = addition-left-cancellable r‚ÇÄ (succ k * succ d + r‚ÇÅ) (q‚ÇÄ * succ d)  I

  III : succ k * succ d + r‚ÇÅ ‚â§ d
  III = transport (_‚â§ d) II l‚ÇÅ

  IV : succ k * succ d ‚â§ succ k * succ d + r‚ÇÅ
  IV = ‚â§-+ (succ k * succ d) r‚ÇÅ

  V : succ k * succ d ‚â§ d
  V = ‚â§-trans (succ k * succ d) (succ k * succ d + r‚ÇÅ) d IV III

  VI : succ d * succ k ‚â§ d
  VI = transport (_‚â§ d) (mult-commutativity (succ k) (succ d)) V

  Œ≥ : succ d ‚â§ d
  Œ≥ = product-order-cancellable (succ d) k d VI

division-is-prop : (a d : ‚Ñï) ‚Üí is-prop (division-theorem a d)
division-is-prop a d (q‚ÇÄ , r‚ÇÄ , e‚ÇÄ , l‚ÇÄ) (q‚ÇÅ , r‚ÇÅ , e‚ÇÅ , l‚ÇÅ) = Œ≥ I
 where
  I : (q‚ÇÄ < q‚ÇÅ) ‚àî (q‚ÇÄ Ôºù q‚ÇÅ) ‚àî (q‚ÇÅ < q‚ÇÄ)
  I = <-trichotomous q‚ÇÄ q‚ÇÅ

  Œ≥ : (q‚ÇÄ < q‚ÇÅ) ‚àî (q‚ÇÄ Ôºù q‚ÇÅ) ‚àî (q‚ÇÅ < q‚ÇÄ)
    ‚Üí q‚ÇÄ , r‚ÇÄ , e‚ÇÄ , l‚ÇÄ Ôºù q‚ÇÅ , r‚ÇÅ , e‚ÇÅ , l‚ÇÅ
  Œ≥ (inl l)       = ùüò-elim (division-is-prop-lemma a d q‚ÇÄ q‚ÇÅ r‚ÇÄ r‚ÇÅ l‚ÇÄ e‚ÇÄ e‚ÇÅ l)
  Œ≥ (inr (inl e)) = to-subtype-Ôºù (division-is-prop' a d) e
  Œ≥ (inr (inr l)) = ùüò-elim (division-is-prop-lemma a d q‚ÇÅ q‚ÇÄ r‚ÇÅ r‚ÇÄ l‚ÇÅ e‚ÇÅ e‚ÇÄ l)

\end{code}

A property of division which is sometimes useful is the following.
If a * b Ôºù a * c + d. If we were considering integers, this would be
easy to prove by simply by rewriting the equation as a * (b - c) Ôºù
d. With natural numbers, instead use induction on b and c.

If c Ôºù 0, we are done, since a * b ‚à£ d.
If b Ôºù 0, then 0 Ôºù a * c + d, and hence d Ôºù 0, and a * 0 Ôºù 0, and we are done.
If b , c > 0, then we use induction.
The inductive hypothesis is: a * b       Ôºù a * c       + d ‚Üí a ‚à£ d,
                 and we have a * (b + 1) Ôºù a * (c + 1) + d.

Since addition is left cancellable, we can find that a * b Ôºù a * c + d and we
are done.

\begin{code}

factor-of-sum-consequence : (a b c d : ‚Ñï) ‚Üí a * b Ôºù a * c + d ‚Üí a ‚à£ d
factor-of-sum-consequence a b 0 d e = b , Œ≥
 where
  Œ≥ : a * b Ôºù d
  Œ≥ = a * b     Ôºù‚ü® e                   ‚ü©
      a * 0 + d Ôºù‚ü® zero-left-neutral d ‚ü©
      d         ‚àé
factor-of-sum-consequence a 0 (succ c) d e = 0 , Œ≥
 where
  Œ≥ : 0 Ôºù d
  Œ≥ = sum-to-zero-gives-zero (a * succ c) d (e ‚Åª¬π) ‚Åª¬π
factor-of-sum-consequence a (succ b) (succ c) d e = Œ≥
  where
   I : a * succ b Ôºù a + (a * c + d)
   I = a * succ b      Ôºù‚ü® e                                  ‚ü©
       a * succ c + d  Ôºù‚ü® addition-associativity a (a * c) d ‚ü©
       a + (a * c + d) ‚àé

   II : a * b Ôºù a * c + d
   II = addition-left-cancellable (a * b) (a * c + d) a I

   Œ≥ : a ‚à£ d
   Œ≥ = factor-of-sum-consequence a b c d II

\end{code}
