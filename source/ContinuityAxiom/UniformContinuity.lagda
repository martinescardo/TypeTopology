Martin Escardo & Chuangjie Xu, 2015

One of Brouwer's continuity principles is the following

    All functions ‚ÇÇ‚Ñï ‚Üí ‚Ñï are uniformly continuous

whose logical formulation is

    ‚àÄ (f : ‚ÇÇ‚Ñï ‚Üí ‚Ñï ,  ‚àÉ m : ‚Ñï , ‚àÄ Œ±,Œ≤ : ‚ÇÇ‚Ñï , Œ± =[m] Œ≤ ‚Üí f Œ± = f Œ≤

where Œ± =[m] Œ≤ expresses that the sequences Œ± and Œ≤ agree up to the
first m positions.

\begin{code}

{-# OPTIONS --safe --without-K #-}

module ContinuityAxiom.UniformContinuity where

open import ContinuityAxiom.ExitingTruncations
open import ContinuityAxiom.Preliminaries
open import MLTT.Spartan
open import MLTT.Two-Properties
open import Naturals.Properties
open import NotionsOfDecidability.Decidable
open import UF.DiscreteAndSeparated
open import UF.FunExt
open import UF.Subsingletons

\end{code}

If function extensionality is available, then for any f : ‚ÇÇ‚Ñï ‚Üí ‚Ñï,
the type

  UC(f) = Œ£ n : ‚Ñï , ‚àÄ(Œ± Œ≤ : ‚ÇÇ‚Ñï) ‚Üí Œ± Ôºù‚ü¶ n ] Œ≤ ‚Üí f Œ± Ôºù f Œ≤

has a propositional truncation, using the main lemma, because the
type family A(f) : ‚Ñï ‚Üí Set, defined by


  A(f,n) = (Œ± Œ≤ : ‚ÇÇ‚Ñï) ‚Üí Œ± Ôºù‚ü¶ n ] Œ≤ ‚Üí f Œ± Ôºù f Œ≤,

satisfies

(1) A(f,n) is a proposition for all n (using funext), and

(2) if A(f,n) holds then A(f,m) is decidable for all m < n.

\begin{code}

A : (‚ÇÇ‚Ñï ‚Üí ‚Ñï) ‚Üí ‚Ñï ‚Üí Set
A f n = (Œ± Œ≤ : ‚ÇÇ‚Ñï) ‚Üí Œ± Ôºù‚ü¶ n ‚üß Œ≤ ‚Üí f Œ± Ôºù f Œ≤

A-is-prop : Fun-Ext ‚Üí (f : ‚ÇÇ‚Ñï ‚Üí ‚Ñï) ‚Üí ‚àÄ n ‚Üí is-prop (A f n)
A-is-prop fe f n p q = dfunext fe (Œª Œ±
                     ‚Üí dfunext fe (Œª Œ≤
                     ‚Üí dfunext fe (Œª e
                     ‚Üí ‚Ñï-is-set (p Œ± Œ≤ e) (q Œ± Œ≤ e))))

A-‚â§-is-decidable : ‚àÄ(f : ‚ÇÇ‚Ñï ‚Üí ‚Ñï) ‚Üí ‚àÄ n ‚Üí A f n ‚Üí ‚àÄ m ‚Üí m ‚â§ n ‚Üí is-decidable (A f m)
A-‚â§-is-decidable f  0       a _ _ = inl (Œª Œ± Œ≤ _ ‚Üí a Œ± Œ≤ Ôºù‚ü¶zero‚üß)
A-‚â§-is-decidable f (succ n) a m r = cases c‚ÇÄ c‚ÇÅ (Lemma[n‚â§m+1‚Üín‚â§m+nÔºùm+1] r)
 where
  c‚ÇÄ : m ‚â§ n ‚Üí is-decidable (A f m)
  c‚ÇÄ r' = cases sc‚ÇÄ' sc‚ÇÅ' claim
   where
    claim : is-decidable ((s : ‚ÇÇFin n) ‚Üí f (cons s 0ÃÑ) Ôºù f (cons s 1ÃÑ))
    claim = Lemma[‚ÇÇFin-decidability] n (Œª s ‚Üí f (cons s 0ÃÑ) Ôºù f (cons s 1ÃÑ))
                                       (Œª s ‚Üí ‚Ñï-is-discrete (f (cons s 0ÃÑ)) (f (cons s 1ÃÑ)))
    sc‚ÇÄ : ((s : ‚ÇÇFin n) ‚Üí f (cons s 0ÃÑ) Ôºù f (cons s 1ÃÑ)) ‚Üí
          (Œ± Œ≤ : ‚ÇÇ‚Ñï) ‚Üí Œ± Ôºù‚ü¶ n ‚üß Œ≤ ‚Üí f Œ± Ôºù f Œ≤
    sc‚ÇÄ efs Œ± Œ≤ en = cases ssc‚ÇÄ ssc‚ÇÅ (ùüö-is-discrete (Œ± n) (Œ≤ n))
     where
      ssc‚ÇÄ : Œ± n Ôºù Œ≤ n ‚Üí f Œ± Ôºù f Œ≤
      ssc‚ÇÄ e = a Œ± Œ≤ (Ôºù‚ü¶succ‚üß en e)

      ssc‚ÇÅ : ¬¨ (Œ± n Ôºù Œ≤ n) ‚Üí f Œ± Ôºù f Œ≤
      ssc‚ÇÅ ne = cases sssc‚ÇÄ sssc‚ÇÅ Lemma[bÔºù‚ÇÄ+bÔºù‚ÇÅ]
       where
        s : ‚ÇÇFin n
        s = take n Œ±

        sssc‚ÇÄ : Œ± n Ôºù ‚ÇÄ ‚Üí f Œ± Ôºù f Œ≤
        sssc‚ÇÄ eŒ±‚ÇÄ = claim‚ÇÅ ‚àô (efs s) ‚àô claim‚ÇÉ ‚Åª¬π
         where
          eŒ≤‚ÇÅ : Œ≤ n Ôºù ‚ÇÅ
          eŒ≤‚ÇÅ = Lemma[b‚â†‚ÇÄ‚ÜíbÔºù‚ÇÅ] (Œª eŒ≤‚ÇÄ ‚Üí ne (eŒ±‚ÇÄ ‚àô eŒ≤‚ÇÄ ‚Åª¬π))

          claim‚ÇÄ : Œ± Ôºù‚ü¶ succ n ‚üß cons s 0ÃÑ
          claim‚ÇÄ = Ôºù‚ü¶succ‚üß (Lemma[Ôºù‚ü¶]-cons-take] n) (eŒ±‚ÇÄ ‚àô (Lemma[cons-take-0] n))

          claim‚ÇÅ : f Œ± Ôºù f (cons s 0ÃÑ)
          claim‚ÇÅ = a Œ± (cons s 0ÃÑ) claim‚ÇÄ

          claim‚ÇÇ : Œ≤ Ôºù‚ü¶ succ n ‚üß cons s 1ÃÑ
          claim‚ÇÇ = Ôºù‚ü¶succ‚üß (Lemma[Ôºù‚ü¶]-Ôºù‚ü¶]-take] n en) (eŒ≤‚ÇÅ ‚àô (Lemma[cons-take-0] n))

          claim‚ÇÉ : f Œ≤ Ôºù f (cons s 1ÃÑ)
          claim‚ÇÉ = a Œ≤ (cons s 1ÃÑ) claim‚ÇÇ

        sssc‚ÇÅ : Œ± n Ôºù ‚ÇÅ ‚Üí f Œ± Ôºù f Œ≤
        sssc‚ÇÅ eŒ±‚ÇÅ = claim‚ÇÅ ‚àô (efs s)‚Åª¬π ‚àô claim‚ÇÉ ‚Åª¬π
         where
          eŒ≤‚ÇÄ : Œ≤ n Ôºù ‚ÇÄ
          eŒ≤‚ÇÄ = Lemma[b‚â†‚ÇÅ‚ÜíbÔºù‚ÇÄ] (Œª eŒ≤‚ÇÅ ‚Üí ne (eŒ±‚ÇÅ ‚àô eŒ≤‚ÇÅ ‚Åª¬π))

          claim‚ÇÄ : Œ± Ôºù‚ü¶ succ n ‚üß (cons s 1ÃÑ)
          claim‚ÇÄ = Ôºù‚ü¶succ‚üß (Lemma[Ôºù‚ü¶]-cons-take] n) (eŒ±‚ÇÅ ‚àô (Lemma[cons-take-0] n))

          claim‚ÇÅ : f Œ± Ôºù f (cons s 1ÃÑ)
          claim‚ÇÅ = a Œ± (cons s 1ÃÑ) claim‚ÇÄ

          claim‚ÇÇ : Œ≤ Ôºù‚ü¶ succ n ‚üß (cons s 0ÃÑ)
          claim‚ÇÇ = Ôºù‚ü¶succ‚üß (Lemma[Ôºù‚ü¶]-Ôºù‚ü¶]-take] n en) (eŒ≤‚ÇÄ ‚àô (Lemma[cons-take-0] n))

          claim‚ÇÉ : f Œ≤ Ôºù f (cons s 0ÃÑ)
          claim‚ÇÉ = a Œ≤ (cons s 0ÃÑ) claim‚ÇÇ

    sc‚ÇÄ' : (‚àÄ(s : ‚ÇÇFin n)
         ‚Üí f (cons s 0ÃÑ) Ôºù f (cons s 1ÃÑ))
         ‚Üí is-decidable (‚àÄ(Œ± Œ≤ : ‚ÇÇ‚Ñï) ‚Üí Œ± Ôºù‚ü¶ m ‚üß Œ≤ ‚Üí f Œ± Ôºù f Œ≤)
    sc‚ÇÄ' ps = A-‚â§-is-decidable f n (sc‚ÇÄ ps) m r'

    sc‚ÇÅ : ¬¨ (‚àÄ(s : ‚ÇÇFin n) ‚Üí f (cons s 0ÃÑ) Ôºù f (cons s 1ÃÑ))
        ‚Üí ¬¨ (‚àÄ(Œ± Œ≤ : ‚ÇÇ‚Ñï) ‚Üí Œ± Ôºù‚ü¶ m ‚üß Œ≤ ‚Üí f Œ± Ôºù f Œ≤)
    sc‚ÇÅ fs pn = fs (Œª s ‚Üí pn (cons s 0ÃÑ) (cons s 1ÃÑ) (Lemma[cons-Ôºù‚ü¶]-‚â§] s r'))

    sc‚ÇÅ' : ¬¨ (‚àÄ(s : ‚ÇÇFin n) ‚Üí f (cons s 0ÃÑ) Ôºù f (cons s 1ÃÑ))
         ‚Üí is-decidable (‚àÄ(Œ± Œ≤ : ‚ÇÇ‚Ñï) ‚Üí Œ± Ôºù‚ü¶ m ‚üß Œ≤ ‚Üí f Œ± Ôºù f Œ≤)
    sc‚ÇÅ' fs = inr (sc‚ÇÅ fs)

  c‚ÇÅ : m Ôºù succ n ‚Üí is-decidable (A f m)
  c‚ÇÅ e = inl (transport (A f) (e ‚Åª¬π) a)

\end{code}

Therefore, the truncation of UC(f) exists and hence we have two
formulations of the uniform continuity principle:

\begin{code}

UC : Set
UC = (f : ‚ÇÇ‚Ñï ‚Üí ‚Ñï) ‚Üí ‚à•Œ£ (\(n : ‚Ñï) ‚Üí (Œ± Œ≤ : ‚ÇÇ‚Ñï) ‚Üí Œ± Ôºù‚ü¶ n ‚üß Œ≤ ‚Üí f Œ± Ôºù f Œ≤) ‚à•

CH-UC : Set
CH-UC = (f : ‚ÇÇ‚Ñï ‚Üí ‚Ñï) ‚Üí Œ£ \(n : ‚Ñï) ‚Üí (Œ± Œ≤ : ‚ÇÇ‚Ñï) ‚Üí Œ± Ôºù‚ü¶ n ‚üß Œ≤ ‚Üí f Œ± Ôºù f Œ≤

\end{code}

Moreover, the above types are logically equivalent.

\begin{code}

Theorem : CH-UC ‚Üî UC
Theorem = (Œª ch-uc f ‚Üí Œ£A‚Üí‚à•Œ£A‚à• (A-‚â§-is-decidable f) (ch-uc f)) ,
          (Œª uc f  ‚Üí ‚à•Œ£A‚à•‚ÜíŒ£A (uc f))

\end{code}
