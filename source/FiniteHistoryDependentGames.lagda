Martin Escardo, Paulo Oliva, 2-27 July 2021

We study finite, history dependent games of perfect information using
selection functions and dependent-type trees.

This is based on our previous work.

  [1] M.H. Escard√≥ and Paulo Oliva. Sequential Games and Optimal
      Strategies. Proceedings of the Royal Society A, 467:1519-1545,
      2011. https://doi.org/10.1098/rspa.2010.0471

We generalize [1] by considering the case that the type X‚Çñ of moves x‚Çñ
at round k depends on the moves played at the previous rounds. So in a
sequence of moves x‚ÇÄ,x‚ÇÅ,x‚ÇÇ,‚Ä¶, we have that

  * the type X‚ÇÄ of initial moves doesn't depend on anything,
  * the type X‚ÇÅ depends on the first move x‚ÇÄ : X‚ÇÄ,
  * the type X‚ÇÇ depends on the first move x‚ÇÄ : X‚ÇÄ and the
    second move x‚ÇÅ : X‚ÇÅ.
  ‚Ä¶

In order to achieve this generalization, we work with game trees
whose nodes are labelled by types that collect the allowed moves at a
given round. Then a play x‚ÇÄ,x‚ÇÅ,x‚ÇÇ,‚Ä¶, is a path in such a tree.

This formulation of the notion of game naturally accounts for finite
games of *unbounded* length, which in [1] was achieved by continuous,
infinite games instead.

\begin{code}

{-# OPTIONS --without-K --safe --auto-inline #-} -- --exact-split

open import SpartanMLTT hiding (J)
open import UF-Base
open import UF-FunExt

open import SigmaDiscreteAndTotallySeparated

module FiniteHistoryDependentGames (fe : Fun-Ext) where

\end{code}

We represent the moves of a history-dependent sequential game by a
dependent-type tree (DTT).  This is either an empty tree [] or else
has a type X of initial moves at the root, and, inductively, a family
Xf of subtrees indexed by elements of X, which is written X ‚à∑ Xf. We
refer to the family Xf as a forest. We let Xt range over such trees.

 * Xt ranges over dependent-type trees.
 * Xf ranges over dependent-type forests.

\begin{code}

data DTT : Type‚ÇÅ where
  []  : DTT
  _‚à∑_ : (X : Type) (Xf : X ‚Üí DTT) ‚Üí DTT

\end{code}

The type of full paths in a tree Xt, from the root to a leaf, is
inductively defined as follows:

\begin{code}

Path : DTT ‚Üí Type
Path []       = ùüô
Path (X ‚à∑ Xf) = Œ£ x Íûâ X , Path (Xf x)

\end{code}

As discussed above, a play in a game is defined to be such a path.

The idea is that we choose a move x, and then, inductively, a path in
the subtree Xf x.

The variable xs ranges over paths, that is, elements of the type
Path Xt for a dependent-type-tree Xt.

\begin{code}

pattern ‚ü®‚ü©        = ‚ãÜ
pattern _::_ x xs = (x , xs)

path-head : {X : Type} {Xf : X ‚Üí DTT} ‚Üí Path (X ‚à∑ Xf) ‚Üí X
path-head (x :: xs) = x

path-tail : {X : Type} {Xf : X ‚Üí DTT} ((x :: xs) : Path (X ‚à∑ Xf)) ‚Üí Path (Xf x)
path-tail (x :: xs) = xs

plength : {Xt : DTT} ‚Üí Path Xt ‚Üí ‚Ñï
plength {[]}     ‚ü®‚ü©        = 0
plength {X ‚à∑ Xf} (x :: xs) = succ (plength {Xf x} xs)

\end{code}

NB. An alternative inductive definition of Path is the following,
where, unfortunately, we get a higher type level, and so we won't use
it:

\begin{code}

data Path‚ÇÅ : DTT ‚Üí Type‚ÇÅ where
 []  : Path‚ÇÅ []
 _‚à∑_ : {X : Type} {Xf : X ‚Üí DTT} (x : X) (xs : Path‚ÇÅ (Xf x)) ‚Üí Path‚ÇÅ (X ‚à∑ Xf)

\end{code}

Quantifiers and selections, as in Sections 1 and 2 of reference [1]:

\begin{code}

K : Type ‚Üí Type ‚Üí Type
K R X = (X ‚Üí R) ‚Üí R

J : Type ‚Üí Type ‚Üí Type
J R X = (X ‚Üí R) ‚Üí X

\end{code}

In the same way as the type of moves at a given stage of the game
depends on the previously played moves, so do the quantifiers and
selection functions.

ùìö assigns a quantifier to each node in a given tree, and similarly ùìô
assigns selection functions to the nodes.

\begin{code}

ùìö :  Type ‚Üí DTT ‚Üí Type
ùìö R []       = ùüô
ùìö R (X ‚à∑ Xf) = K R X √ó ((x : X) ‚Üí ùìö R (Xf x))

ùìô :  Type ‚Üí DTT ‚Üí Type
ùìô R []       = ùüô
ùìô R (X ‚à∑ Xf) = J R X √ó ((x : X) ‚Üí ùìô R (Xf x))

\end{code}

 ‚ãÜ œï ranges over the type K R X of quantifiers.
 ‚ãÜ Œµ ranges over the type J R X of selection functions.

 ‚ãÜ œït ranges over the type ùìö R Xt of quantifier trees.
 ‚ãÜ Œµt ranges over the type ùìô R Xt of selection-function trees.

 ‚ãÜ œïf ranges over the type (x : X) ‚Üí ùìö R (Xf x) of quantifier forests.
 ‚ãÜ Œµf ranges over the type (x : X) ‚Üí ùìô R (Xf x) of selection-function forests.

Sequencing quantifiers and selections, as constructed in Definitions 2
and 12 of reference [1], but using our tree representation of games
instead:

\begin{code}

K-sequence : {Xt : DTT} {R : Type} ‚Üí ùìö R Xt ‚Üí K R (Path Xt)
K-sequence {[]}     ‚ü®‚ü©        q = q ‚ü®‚ü©
K-sequence {X ‚à∑ Xf} (œï :: œïf) q = œï (Œª x ‚Üí K-sequence {Xf x} (œïf x) (Œª xs ‚Üí q (x :: xs)))

J-sequence‚ÇÄ : {Xt : DTT} {R : Type} ‚Üí ùìô R Xt ‚Üí J R (Path Xt)
J-sequence‚ÇÄ {[]}     ‚ü®‚ü©        q = ‚ü®‚ü©
J-sequence‚ÇÄ {X ‚à∑ Xf} (Œµ :: Œµf) q = h :: t h
 where
  t : (x : X) ‚Üí Path (Xf x)
  t x = J-sequence‚ÇÄ {Xf x} (Œµf x) (Œª xs ‚Üí q (x :: xs))

  h : X
  h = Œµ (Œª x ‚Üí q (x :: t x))

\end{code}

Try to make faster, exploiting Agda's evaluation strategy, but this
doesn't seem to make any difference:

\begin{code}

J-sequence‚ÇÅ : {Xt : DTT} {R : Type} ‚Üí ùìô R Xt ‚Üí J R (Path Xt)
J-sequence‚ÇÅ {[]}     ‚ü®‚ü©        q = ‚ü®‚ü©
J-sequence‚ÇÅ {X ‚à∑ Xf} (Œµ :: Œµf) q = Œ≥
 where
  t : (x : X) ‚Üí Path (Xf x)
  t x = J-sequence‚ÇÅ {Xf x} (Œµf x) (Œª xs ‚Üí q (x :: xs))

  ŒΩ : X ‚Üí Path (X ‚à∑ Xf)
  ŒΩ x = x :: t x

  x‚ÇÄ : X
  x‚ÇÄ = Œµ (Œª x ‚Üí q (ŒΩ x))

  Œ≥ : Path (X ‚à∑ Xf)
  Œ≥ = ŒΩ x‚ÇÄ

\end{code}

Or this:

\begin{code}

J-sequence‚ÇÇ : {Xt : DTT} {R : Type} ‚Üí ùìô R Xt ‚Üí J R (Path Xt)
J-sequence‚ÇÇ {[]}     _         q = ‚ü®‚ü©
J-sequence‚ÇÇ {X ‚à∑ Xf} (Œµ :: Œµf) q = ŒΩ (Œµ (Œª x ‚Üí q (ŒΩ x)))
 where
  ŒΩ : X ‚Üí Path (X ‚à∑ Xf)
  ŒΩ x = x :: J-sequence‚ÇÇ {Xf x} (Œµf x) (Œª xs ‚Üí q (x :: xs))

J-sequence = J-sequence‚ÇÇ

\end{code}

The following is Definition 3 of the above reference [1].

A game is defined by a game tree Xt, a type R of outcomes, a
quantifier tree œït and an outcome function q:

\begin{code}

record Game : Type‚ÇÅ where
 constructor game
 field
  Xt  : DTT
  R   : Type
  q   : Path Xt ‚Üí R
  œït  : ùìö R Xt

open Game

\end{code}

We can think of Xt as the rules of the game, and R, œït and q as the
objective of the game.

We define the optimal outcome of a game to be the sequencing of its
quantifiers applied to the outcome function (Theorem 3.1 of [1]).

\begin{code}

optimal-outcome : (G : Game) ‚Üí R G
optimal-outcome (game R Xt q œït) = K-sequence œït q

\end{code}

A strategy defines how to pick a path of a tree. The type Strategy of
all possible strategies is constructed as follows (Definition 4 of [1]):

\begin{code}

Strategy : DTT -> Type
Strategy []       = ùüô
Strategy (X ‚à∑ Xf) = X √ó ((x : X) ‚Üí Strategy (Xf x))

\end{code}

 ‚ãÜ œÉ ranges over the type Strategy Xt of strategies for a
   dependent-type tree Xt.

 ‚ãÜ œÉf ranges over the type (x : X) ‚Üí Strategy (Xf x) of strategy
   forests for a dependent-type forest Xf.

We get a path in the tree by following any given strategy:

\begin{code}

strategic-path : {Xt : DTT} ‚Üí Strategy Xt ‚Üí Path Xt
strategic-path {[]}     ‚ü®‚ü©        = ‚ü®‚ü©
strategic-path {X ‚à∑ Xf} (x :: œÉf) = x :: strategic-path {Xf x} (œÉf x)

\end{code}

In the notation of reference [1] above, Definition 5, a strategy œÉ
for a game (Xt,R,œït,q) is said to be optimal, or in subgame perfect
equilibrium (abbreviated sgpe), if for every partial play a‚ÇÄ,‚Ä¶,a‚Çñ‚Çã‚ÇÅ
of length k, we have

   q(a‚ÇÄ,‚Ä¶,a‚Çñ‚Çã‚ÇÅ,b‚Çñ(a‚ÇÄ,‚Ä¶,a‚Çñ‚Çã‚ÇÅ),‚Ä¶,b‚Çô‚Çã‚ÇÅ(a‚ÇÄ,‚Ä¶,a‚Çñ‚Çã‚ÇÅ))
 = œï‚Çñ(Œªx‚Çñ.q(a‚ÇÄ,‚Ä¶,a‚Çñ‚Çã‚ÇÅ,x‚Çñ,b‚Çñ‚Çä‚ÇÅ(a‚ÇÄ,‚Ä¶,a‚Çñ‚Çã‚ÇÅ,x‚Çñ),‚Ä¶,b‚Çô‚Çã‚ÇÅ(a‚ÇÄ,‚Ä¶,a‚Çñ‚Çã‚ÇÅ,x‚Çñ)))

where the sequence b is inductively defined by

  b‚±º(a‚ÇÄ,‚Ä¶,a‚Çñ‚Çã‚ÇÅ) = œÉ‚±º(a‚ÇÄ,‚Ä¶,a‚Çñ‚Çã‚ÇÅ,b‚Çñ(a‚ÇÄ,‚Ä¶,a‚Çñ‚Çã‚ÇÅ),‚Ä¶,b‚±º‚Çã‚ÇÅ(a‚ÇÄ,‚Ä¶,a‚Çñ‚Çã‚ÇÅ))

for k ‚â§ j < n.

Intuitively, the strategy œÉ is optimal if the outcome

  q(a‚ÇÄ,‚Ä¶,a‚Çñ‚Çã‚ÇÅ,b‚Çñ(a‚ÇÄ,‚Ä¶,a‚Çñ‚Çã‚ÇÅ),‚Ä¶,b‚Çô‚Çã‚ÇÅ(a‚ÇÄ,‚Ä¶,a‚Çñ‚Çã‚ÇÅ))

obtained by following œÉ is the best possible outcome as described by
the quantifier œï‚Çñ for each round k, considering all possible
deviations x‚Çñ from the strategy at that round.

For the purposes of our generalization of [1] to dependent games, it
is convenient to define this notion by induction on the game tree Xt:

\begin{code}

is-sgpe : {Xt : DTT} {R : Type} ‚Üí ùìö R Xt ‚Üí (Path Xt ‚Üí R) ‚Üí Strategy Xt ‚Üí Type
is-sgpe {[]}     ‚ü®‚ü©        q ‚ü®‚ü©         = ùüô
is-sgpe {X ‚à∑ Xf} (œï :: œïf) q (x‚ÇÄ :: œÉf) =

      (q (x‚ÇÄ :: strategic-path (œÉf x‚ÇÄ)) ‚â° œï (Œª x ‚Üí q (x :: strategic-path (œÉf x))))
    √ó
      ((x : X) ‚Üí is-sgpe {Xf x} (œïf x) (Œª (xs : Path (Xf x)) ‚Üí q (x :: xs)) (œÉf x))

\end{code}

In the above definition:

 ‚ãÜ If the game tree is empty, then the strategy is empty, and we say
   that it is true that it is in sgpe, where "true" is represented by
   the unit type ùüô in propositions-as-types.

 ‚ãÜ If the game tree has a root X followed by a forest Xf, then the
   strategy must be of the form x‚ÇÄ :: œÉf, where x‚ÇÄ is the first move
   according to the strategy, and where œÉf is a forest of strategies
   that depends on a deviation x.

   So the first part

     q (x‚ÇÄ :: strategic-path (œÉf x‚ÇÄ)) ‚â° œï (Œª x ‚Üí q (x :: strategic-path (œÉf x)))

   of the definition is as in the comment above, but with a partial
   play of length k=0, and the second (inductive) part, says that the
   substrategy œÉf x, for any deviation x, is in subgame perfect
   equilibrium in the subgame

     (Xf x , R , œïf x , Œª (xs : Path (Xf x)) ‚Üí q (x :: xs)).

As discussed above, we say that a strategy for a game is optimal if it
is in subgame perfect equilibrium.

\begin{code}

is-optimal : (G : Game) (œÉ : Strategy (Xt G)) ‚Üí Type
is-optimal (game Xt R œït q) œÉ = is-sgpe {Xt} {R} q œït œÉ

\end{code}

The main lemma is that the optimal outcome is the same thing as the
application of the outcome function to the path induced by a strategy
in perfect subgame equilibrium.

The following is Theorem 3.1 of reference [1].

\begin{code}

sgpe-lemma : (Xt : DTT) {R : Type} (œït : ùìö R Xt) (q : Path Xt ‚Üí R) (œÉ : Strategy Xt)
           ‚Üí is-sgpe œït q œÉ
           ‚Üí K-sequence œït q ‚â° q (strategic-path œÉ)
sgpe-lemma []       ‚ü®‚ü©        q ‚ü®‚ü©        ‚ü®‚ü©       = refl
sgpe-lemma (X ‚à∑ Xf) (œï :: œït) q (a :: œÉf) (h :: t) = Œ≥
 where
  observation-t : type-of t ‚â° ((x : X) ‚Üí is-sgpe (œït x) (Œª xs ‚Üí q (x :: xs)) (œÉf x))
  observation-t = refl

  IH : (x : X) ‚Üí K-sequence (œït x) (Œª xs ‚Üí q (x :: xs)) ‚â° q (x :: strategic-path (œÉf x))
  IH x = sgpe-lemma (Xf x) (œït x) (Œª (xs : Path (Xf x)) ‚Üí q (x :: xs)) (œÉf x) (t x)

  Œ≥ = œï (Œª x ‚Üí K-sequence (œït x) (Œª xs ‚Üí q (x :: xs))) ‚â°‚ü® ap œï (dfunext fe IH) ‚ü©
      œï (Œª x ‚Üí q (x :: strategic-path (œÉf x)))         ‚â°‚ü® h ‚Åª¬π ‚ü©
      q (a :: strategic-path (œÉf a))                   ‚àé

\end{code}

This can be reformulated as follows in terms of the type of games:

\begin{code}

equilibrium-theorem : (G : Game) (œÉ : Strategy (Xt G))
                    ‚Üí is-optimal G œÉ
                    ‚Üí optimal-outcome G ‚â° q G (strategic-path œÉ)
equilibrium-theorem (game Xt R œït q) = sgpe-lemma Xt q œït

\end{code}

We now show how to use selection functions to compute a sgpe strategy.

We first convert a selection function into a quantifier as in
Definition 10 of [1]:

\begin{code}

overline : {X R : Type} ‚Üí J R X ‚Üí K R X
overline Œµ = Œª p ‚Üí p (Œµ p)

\end{code}

The following is the application of overline to each selection
function of a tree:

\begin{code}

Overline : {Xt : DTT} {R : Type} ‚Üí ùìô R Xt ‚Üí ùìö R Xt
Overline {[]}     ‚ü®‚ü©        = ‚ü®‚ü©
Overline {X ‚à∑ Xf} (Œµ :: Œµs) = overline Œµ :: (Œª x ‚Üí Overline {Xf x} (Œµs x))

\end{code}

The following, which defines a strategy from given selection
functions, is defined in Theorem 5.4 of [1], with the difference that
here, for the moment, we consider only single-valued quantifiers.

\begin{code}

selection-strategy : {Xt : DTT} {R : Type} ‚Üí ùìô R Xt ‚Üí (Path Xt ‚Üí R) ‚Üí Strategy Xt
selection-strategy {[]}     ‚ü®‚ü©           q = ‚ü®‚ü©
selection-strategy {X ‚à∑ Xf} Œµt@(Œµ :: Œµf) q = x‚ÇÄ :: œÉf
 where
  x‚ÇÄ : X
  x‚ÇÄ = path-head (J-sequence Œµt q)

  œÉf : (x : X) ‚Üí Strategy (Xf x)
  œÉf x = selection-strategy {Xf x} (Œµf x) (Œª xs ‚Üí q (x :: xs))

\end{code}

The following definition is in Section 1 on [1].

\begin{code}

_is-a-selection-of_ : {X R : Type} ‚Üí J R X ‚Üí K R X ‚Üí Type
Œµ is-a-selection-of œï = overline Œµ ‚àº œï

\end{code}

We generalize it to selection-function and quantifier trees in the
obvious way, by induction:

\begin{code}

_are-selections-of_ : {Xt : DTT} {R : Type} ‚Üí ùìô R Xt ‚Üí ùìö R Xt ‚Üí Type
_are-selections-of_ {[]}     ‚ü®‚ü©        ‚ü®‚ü©        = ùüô
_are-selections-of_ {X ‚à∑ Xf} (Œµ :: Œµf) (œï :: œïf) = (Œµ is-a-selection-of œï)
                                                 √ó ((x : X) ‚Üí (Œµf x) are-selections-of (œïf x))

observation : {Xt : DTT} {R : Type} (Œµt : ùìô R Xt) (œït : ùìö R Xt)
            ‚Üí Œµt are-selections-of œït
            ‚Üí Overline Œµt ‚â° œït
observation {[]}     ‚ü®‚ü©        ‚ü®‚ü©        ‚ü®‚ü©        = refl
observation {X ‚à∑ Xf} (Œµ :: Œµf) (œï :: œïf) (a :: af) = Œ≥
 where
  IH : (x : X) ‚Üí Overline (Œµf x) ‚â° œïf x
  IH x = observation {Xf x} (Œµf x) (œïf x) (af x)

  I : overline Œµ ‚â° œï
  I = dfunext fe a

  II : (Œª x ‚Üí Overline (Œµf x)) ‚â° œïf
  II = dfunext fe IH

  Œ≥ : overline Œµ :: (Œª x ‚Üí Overline (Œµf x)) ‚â° œï :: œïf
  Œ≥ = ap‚ÇÇ _::_ I II

\end{code}

Notice that the converse is also true, that is, if Overline Œµt ‚â° œït
then Œµt are selections of œït, but we don't need this fact here.

\begin{code}

crucial-lemma : {Xt : DTT} {R : Type} (Œµt : ùìô R Xt) (q : Path Xt ‚Üí R)
              ‚Üí J-sequence Œµt q
              ‚â° strategic-path (selection-strategy Œµt q)
crucial-lemma {[]}     ‚ü®‚ü©           q = refl
crucial-lemma {X ‚à∑ Xf} Œµt@(Œµ :: Œµf) q = Œ≥
 where
  t : (x : X) ‚Üí Path (Xf x)
  t x = J-sequence {Xf x} (Œµf x) (Œª xs ‚Üí q (x :: xs))

  x‚ÇÄ : X
  x‚ÇÄ = path-head (J-sequence Œµt q)

  remark-used-implicitly : x‚ÇÄ ‚â° Œµ (Œª x ‚Üí q (x :: t x))
  remark-used-implicitly = refl

  œÉf : (x : X) ‚Üí Strategy (Xf x)
  œÉf x = selection-strategy {Xf x} (Œµf x) (Œª xs ‚Üí q (x :: xs))

  IH : t x‚ÇÄ ‚â° strategic-path (œÉf x‚ÇÄ)
  IH = crucial-lemma (Œµf x‚ÇÄ) (Œª xs ‚Üí q (x‚ÇÄ :: xs))

  Œ≥ : x‚ÇÄ :: t x‚ÇÄ ‚â° x‚ÇÄ :: strategic-path (œÉf x‚ÇÄ)
  Œ≥ = ap (x‚ÇÄ ::_) IH

selection-strategy-lemma : {Xt : DTT} {R : Type} (Œµt : ùìô R Xt) (q : Path Xt ‚Üí R)
                         ‚Üí is-sgpe (Overline Œµt) q (selection-strategy Œµt q)
selection-strategy-lemma {[]}     {R} ‚ü®‚ü©        q = ‚ü®‚ü©
selection-strategy-lemma {X ‚à∑ Xf} {R} (Œµ :: Œµf) q = h :: t
 where
  f g : X ‚Üí R
  f x = q (x :: J-sequence (Œµf x) (Œª xs ‚Üí q (x :: xs)))
  g x = q (x :: strategic-path (selection-strategy (Œµf x) (Œª xs ‚Üí q (x :: xs))))

  I : (x : X) ‚Üí J-sequence (Œµf x) (Œª xs ‚Üí q (x :: xs))
              ‚â° strategic-path (selection-strategy (Œµf x) (Œª xs ‚Üí q (x :: xs)))
  I x = crucial-lemma (Œµf x) (Œª xs ‚Üí q (x :: xs))

  II : f ‚â° g
  II = dfunext fe (Œª x ‚Üí ap (Œª - ‚Üí q (x :: -)) (I x))

  h : g (Œµ f) ‚â° g (Œµ g)
  h = ap (g ‚àò Œµ) II

  t : (x : X) ‚Üí is-sgpe
                  (Overline (Œµf x))
                  (Œª xs ‚Üí q (x :: xs))
                  (selection-strategy (Œµf x) (Œª xs ‚Üí q (x :: xs)))
  t x = selection-strategy-lemma (Œµf x) (Œª xs ‚Üí q (x :: xs))

\end{code}

The following, which shows how to use selection functions to compute
optimal strategies, corresponds to Theorem 6.2 of [1].

\begin{code}

selection-strategy-theorem : {Xt : DTT} {R : Type} (Œµt : ùìô R Xt) (œït : ùìö R Xt) (q : Path Xt ‚Üí R)
                           ‚Üí Œµt are-selections-of œït
                           ‚Üí is-sgpe œït q (selection-strategy Œµt q)
selection-strategy-theorem Œµt œït q a = III
 where
  I : Overline Œµt ‚â° œït
  I = observation Œµt œït a

  II : is-sgpe (Overline Œµt) q (selection-strategy Œµt q)
  II = selection-strategy-lemma Œµt q

  III : is-sgpe œït q (selection-strategy Œµt q)
  III = transport (Œª - ‚Üí is-sgpe - q (selection-strategy Œµt q)) I II


Selection-Strategy-Theorem : (G : Game) (Œµt : ùìô (R G) (Xt G))
                           ‚Üí Œµt are-selections-of (œït G)
                           ‚Üí is-optimal G (selection-strategy Œµt (q G))
Selection-Strategy-Theorem (game Xt R œït q) Œµt = selection-strategy-theorem Œµt q œït

\end{code}

Incomplete example:

\begin{code}

module permutations-example where

 open import NonSpartanMLTTTypes

 no-repetitions : (n : ‚Ñï) (X : Type) ‚Üí DTT
 no-repetitions 0        X = []
 no-repetitions (succ n) X = X ‚à∑ Œª (x : X) ‚Üí no-repetitions n (Œ£ y Íûâ X , y ‚â¢ x)

 Permutations : ‚Ñï ‚Üí Type
 Permutations n = Path (no-repetitions n (Fin n))

 example-permutation2 : Permutations 2
 example-permutation2 = ùüé :: ((ùüè , (Œª ())) :: ‚ü®‚ü©)

 example-permutation3 : Permutations 3
 example-permutation3 = ùüê :: ((ùüè :: (Œª ())) :: (((ùüé , (Œª ())) , (Œª ())) :: ‚ü®‚ü©))

\end{code}

We use the type GameJ to present games equipped with selection
functions, as in some examples, such as tic-tac-toe this is easier
than to give a game directly.

\begin{code}

data GameJ (R : Type) : Type‚ÇÅ where
  leaf   : R ‚Üí GameJ R
  branch : (X : Type) (Xf : X ‚Üí GameJ R) (Œµ : J R X) ‚Üí GameJ R


dtt : {R : Type} ‚Üí GameJ R ‚Üí DTT
dtt (leaf x)        = []
dtt (branch X Xf Œµ) = X ‚à∑ Œª x ‚Üí dtt (Xf x)

predicate : {R : Type} (Œì : GameJ R) ‚Üí Path (dtt Œì) ‚Üí R
predicate (leaf r)        ‚ü®‚ü©        = r
predicate (branch X Xf Œµ) (x :: xs) = predicate (Xf x) xs

selections : {R : Type} (Œì : GameJ R) ‚Üí ùìô R (dtt Œì)
selections (leaf r)        = ‚ü®‚ü©
selections (branch X Xf Œµ) = Œµ :: (Œª x ‚Üí selections (Xf x))

quantifiers : {R : Type} (Œì : GameJ R) ‚Üí ùìö R (dtt Œì)
quantifiers (leaf r)        = ‚ü®‚ü©
quantifiers (branch X Xf Œµ) = overline Œµ :: (Œª x ‚Üí quantifiers (Xf x))

Game-from-GameJ : {R : Type} ‚Üí GameJ R ‚Üí Game
Game-from-GameJ {R} Œì = game (dtt Œì) R (predicate Œì) (quantifiers Œì)

strategyJ : {R : Type} (Œì : GameJ R) ‚Üí Strategy (dtt Œì)
strategyJ Œì = selection-strategy (selections Œì) (predicate Œì)

Selection-Strategy-TheoremJ : {R : Type} (Œì : GameJ R)
                            ‚Üí is-optimal (Game-from-GameJ Œì) (strategyJ Œì)
Selection-Strategy-TheoremJ {R} Œì = Œ≥
 where
  Œ¥ : (Œì : GameJ R) ‚Üí (selections Œì) are-selections-of (quantifiers Œì)
  Œ¥ (leaf r)        = ‚ü®‚ü©
  Œ¥ (branch X Xf Œµ) = (Œª p ‚Üí refl) , (Œª x ‚Üí Œ¥ (Xf x))

  Œ≥ : is-optimal (Game-from-GameJ Œì) (strategyJ Œì)
  Œ≥ = Selection-Strategy-Theorem (Game-from-GameJ Œì) (selections Œì) (Œ¥ Œì)

\end{code}

The following is used in conjunction with GameJ to build certain games
in a convenient way.

\begin{code}

build-GameJ : {R          : Type}
              (draw       : R)
              (Board      : Type)
              (transition : Board ‚Üí R + (Œ£ M Íûâ Type , (M ‚Üí Board) √ó J R M))
              (n          : ‚Ñï)
              (b          : Board)
            ‚Üí GameJ R
build-GameJ {R} draw Board transition n b = h n b
 where
  h : ‚Ñï ‚Üí Board ‚Üí GameJ R
  h 0        b = leaf draw
  h (succ n) b = g (transition b) refl
   where
    g : (f : R + (Œ£ M Íûâ Type , (M ‚Üí Board) √ó J R M)) ‚Üí transition b ‚â° f ‚Üí GameJ R
    g (inl r)              p = leaf r
    g (inr (M , play , Œµ)) p = branch M Xf Œµ
     where
      Xf : M ‚Üí GameJ R
      Xf m = h n (play m)

build-Game : {R          : Type}
             (draw       : R)
             (Board      : Type)
             (transition : Board ‚Üí R + (Œ£ M Íûâ Type , (M ‚Üí Board) √ó J R M))
             (n          : ‚Ñï)
             (b          : Board)
           ‚Üí Game
build-Game draw Board transition n b = Game-from-GameJ (build-GameJ draw Board transition n b)

\end{code}

Example: Tic-tac-toe. We have two versions.

\begin{code}

tic-tac-toe‚ÇÅ : Game
tic-tac-toe‚ÇÅ = build-Game draw Board transition 9 board‚ÇÄ
 where
  open import CompactTypes
  open import UF-Subsingletons
  open import DiscreteAndSeparated
  open import UF-Miscelanea

  open import NonSpartanMLTTTypes hiding (Fin ; ùüé ; ùüè ; ùüê ; ùüë ; ùüí ; ùüì ; ùüî ; ùüï ; ùüñ ; ùüó)
  open import Fin
  open import Fin-Properties

  data Player : Type where
   X O : Player

  opponent : Player ‚Üí Player
  opponent X = O
  opponent O = X

  ùüõ = Fin 3

  pattern X-wins = ùüé
  pattern draw   = ùüè
  pattern O-wins = ùüê

  Grid   = ùüõ √ó ùüõ
  Matrix = Grid ‚Üí Maybe Player
  Board  = Player √ó Matrix

\end{code}

Convention: in a board (p , A), p is the opponent of the the current player.

\begin{code}

  Grid-is-discrete : is-discrete Grid
  Grid-is-discrete = √ó-is-discrete Fin-is-discrete Fin-is-discrete

  Grid-compact : Compact Grid {ùì§‚ÇÄ}
  Grid-compact = √ó-Compact Fin-Compact Fin-Compact

  board‚ÇÄ : Board
  board‚ÇÄ = X , (Œª _ ‚Üí Nothing)

  Move : Board ‚Üí Type
  Move (_ , A) = Œ£ g Íûâ Grid , A g ‚â° Nothing

  Move-decidable : (b : Board) ‚Üí decidable (Move b)
  Move-decidable (_ , A) = Grid-compact
                            (Œª g ‚Üí A g ‚â° Nothing)
                            (Œª g ‚Üí Nothing-is-isolated' (A g))

  Move-compact : (b : Board) ‚Üí Compact (Move b)
  Move-compact (x , A) = complemented-subset-of-compact-type
                          Grid-compact
                          (Œª g ‚Üí Nothing-is-isolated' (A g))
                          (Œª g ‚Üí Nothing-is-h-isolated' (A g))

  selection : (b : Board) ‚Üí Move b ‚Üí J ùüõ (Move b)
  selection b@(X , A) m p = pr‚ÇÅ (compact-argmax p (Move-compact b) m)
  selection b@(O , A) m p = pr‚ÇÅ (compact-argmin p (Move-compact b) m)

  _is_ : Maybe Player ‚Üí Player ‚Üí Bool
  Nothing is _ = false
  Just X  is X = true
  Just O  is X = false
  Just X  is O = false
  Just O  is O = true

  infix 30 _is_

  wins : Player ‚Üí Matrix ‚Üí Bool
  wins p A = line || col || diag
   where
    l‚ÇÄ = A (ùüé , ùüé) is p && A (ùüé , ùüè) is p && A (ùüé , ùüê) is p
    l‚ÇÅ = A (ùüè , ùüé) is p && A (ùüè , ùüè) is p && A (ùüè , ùüê) is p
    l‚ÇÇ = A (ùüê , ùüé) is p && A (ùüê , ùüè) is p && A (ùüê , ùüê) is p

    c‚ÇÄ = A (ùüé , ùüé) is p && A (ùüè , ùüé) is p && A (ùüê , ùüé) is p
    c‚ÇÅ = A (ùüé , ùüè) is p && A (ùüè , ùüè) is p && A (ùüê , ùüè) is p
    c‚ÇÇ = A (ùüé , ùüê) is p && A (ùüè , ùüê) is p && A (ùüê , ùüê) is p

    d‚ÇÄ = A (ùüé , ùüé) is p && A (ùüè , ùüè) is p && A (ùüê , ùüê) is p
    d‚ÇÅ = A (ùüé , ùüê) is p && A (ùüè , ùüè) is p && A (ùüê , ùüé) is p

    line = l‚ÇÄ || l‚ÇÅ || l‚ÇÇ
    col  = c‚ÇÄ || c‚ÇÅ || c‚ÇÇ
    diag = d‚ÇÄ || d‚ÇÅ

  update : (p : Player) (A : Matrix)
         ‚Üí Move (p , A) ‚Üí Matrix
  update p A (m , _) m' = f (Grid-is-discrete m m')
   where
    f : decidable (m ‚â° m') ‚Üí Maybe Player
    f (inl _) = Just p
    f (inr _) = A m'

  play : (b : Board) (m : Move b) ‚Üí Board
  play (p , A) m = opponent p , update p A m

  transition : Board ‚Üí ùüõ + (Œ£ M Íûâ Type , (M ‚Üí Board) √ó J ùüõ M)
  transition (p , A) = f p A (wins p A) refl
   where
    f : (p : Player) (A : Matrix) (b : Bool) ‚Üí wins p A ‚â° b
      ‚Üí ùüõ + (Œ£ M Íûâ Type , (M ‚Üí Board) √ó J ùüõ M)
    f X A true e  = inl X-wins
    f O A true e  = inl O-wins
    f p A false e = Cases (Move-decidable (p , A))
                     (Œª (g , e) ‚Üí inr (Move (p , A) ,
                                       (Œª m ‚Üí opponent p , update p A m) ,
                                       selection (p , A) (g , e)))
                     (Œª ŒΩ ‚Üí inl draw)

t‚ÇÅ : R tic-tac-toe‚ÇÅ
t‚ÇÅ = optimal-outcome tic-tac-toe‚ÇÅ

\end{code}

The above computation takes too long, due to the use of brute-force search.

The following is another, more efficient, version of tic-tac-toe, with
a more refined exhaustive search that allows us to compute answers.

\begin{code}

data ùüõ : Type where
 O-wins draw X-wins : ùüõ

tic-tac-toe‚ÇÇJ : GameJ ùüõ
tic-tac-toe‚ÇÇJ = build-GameJ draw Board transition 9 board‚ÇÄ
 where
  flip : ùüõ ‚Üí ùüõ
  flip O-wins = X-wins
  flip draw   = draw
  flip X-wins = O-wins

  data Player : Type where
   O X : Player

  open import NonSpartanMLTTTypes
  open list-util

  Cell = Fin 9

  record Board : Type where
   pattern
   constructor board
   field
    next-player     : Player
    available-moves : List Cell
    X-moves         : List Cell
    O-moves         : List Cell

  open Board

  opponent-wins : Player ‚Üí ùüõ
  opponent-wins X = O-wins
  opponent-wins O = X-wins

  winning : List Cell ‚Üí Bool
  winning = some-contained ((ùüé ‚à∑ ùüè ‚à∑ ùüê ‚à∑ [])
                          ‚à∑ (ùüë ‚à∑ ùüí ‚à∑ ùüì ‚à∑ [])
                          ‚à∑ (ùüî ‚à∑ ùüï ‚à∑ ùüñ ‚à∑ [])
                          ‚à∑ (ùüé ‚à∑ ùüë ‚à∑ ùüî ‚à∑ [])
                          ‚à∑ (ùüè ‚à∑ ùüí ‚à∑ ùüï ‚à∑ [])
                          ‚à∑ (ùüê ‚à∑ ùüì ‚à∑ ùüñ ‚à∑ [])
                          ‚à∑ (ùüé ‚à∑ ùüí ‚à∑ ùüñ ‚à∑ [])
                          ‚à∑ (ùüê ‚à∑ ùüí ‚à∑ ùüî ‚à∑ [])
                          ‚à∑ [])

  wins : Board ‚Üí Bool
  wins (board O _ _  os) = winning os
  wins (board X _ xs  _) = winning xs

  board‚ÇÄ : Board
  board‚ÇÄ = board X (list-Fin 9) [] []

  Move : List Cell ‚Üí Type
  Move xs = Œ£ c Íûâ Cell , ((c is-in xs) ‚â° true)

\end{code}

The following definition of argmax is somewhat convoluted because it
is optimized for time, by minimizing the number of evaluations of the
predicate q:

\begin{code}

  argmax : (m : Cell) (ms : List Cell) ‚Üí ùüõ ‚Üí (Move (m ‚à∑ ms) ‚Üí ùüõ) ‚Üí Move (m ‚à∑ ms)
  argmax m ms       X-wins  q = m , need m == m || (m is-in ms) ‚â° true
                                    which-is-given-by ||-left-intro _ (==-refl m)

  argmax m []       r       q = m , need m == m || (m is-in []) ‚â° true
                                    which-is-given-by ||-left-intro _ (==-refl m)

  argmax m (x ‚à∑ xs) O-wins  q = Œπ Œ≥
   where
    Œπ : Move (x ‚à∑ xs) ‚Üí Move (m ‚à∑ x ‚à∑ xs)
    Œπ (c , e) = c , need c == m || (c is-in (x ‚à∑ xs)) ‚â° true
                    which-is-given-by ||-right-intro {c == m} _ e

    q' : Move (x ‚à∑ xs) ‚Üí ùüõ
    q' m = q (Œπ m)

    a : (x == m) || ((x == x) || (x is-in xs)) ‚â° true
    a = ||-right-intro {x == m} _ (||-left-intro _ (==-refl x))

    Œ≥ : Move (x ‚à∑ xs)
    Œ≥ = argmax x xs (q (x , a)) q'

  argmax m us@(x ‚à∑ ms) draw q = g us c
   where
    c : ((x == x) || (x is-in ms)) && (ms contained-in (x ‚à∑ ms)) ‚â° true
    c = &&-intro (||-left-intro _ (==-refl x)) (contained-lemma‚ÇÅ x ms)

    g : (vs : List Cell) ‚Üí vs contained-in us ‚â° true ‚Üí Move (m ‚à∑ us)
    g []       c = m , need m == m || (m is-in (x ‚à∑ ms)) ‚â° true
                       which-is-given-by ||-left-intro _ (==-refl m)

    g (y ‚à∑ vs) c = k (q (y , a))
     where
      a : (y == m) || ((y == x) || (y is-in ms)) ‚â° true
      a = ||-right-intro {y == m} _ (pr‚ÇÅ (&&-gives-√ó c))

      b : (vs contained-in (x ‚à∑ ms)) ‚â° true
      b = pr‚ÇÇ (&&-gives-√ó c)

      k : ùüõ ‚Üí Move (m ‚à∑ us)
      k X-wins = y , a
      k r      = g vs b

  argmin : (m : Cell) (ms : List Cell) ‚Üí ùüõ ‚Üí (Move (m ‚à∑ ms) ‚Üí ùüõ) ‚Üí Move (m ‚à∑ ms)
  argmin m ms r q = argmax m ms (flip r) (Œª xs ‚Üí flip (q xs))

  arg : Player ‚Üí (ms : List Cell) ‚Üí empty ms ‚â° false ‚Üí  J ùüõ (Move ms)
  arg _ []       e q = ùüò-elim (true-is-not-false e)
  arg X (m ‚à∑ ms) e q = argmax m ms (q (m , ||-left-intro (m is-in ms) (==-refl m))) q
  arg O (m ‚à∑ ms) e q = argmin m ms (q (m , ||-left-intro (m is-in ms) (==-refl m))) q

  play : (b : Board) ‚Üí Move (available-moves b) ‚Üí Board
  play (board X as xs os) (c , e) = board O (remove-first c as) (insert c xs) os
  play (board O as xs os) (c , e) = board X (remove-first c as) xs            (insert c os)

  transition : Board ‚Üí ùüõ + (Œ£ M Íûâ Type , (M ‚Üí Board) √ó J ùüõ M)
  transition b@(board next as xs os) =
   if wins b
   then inl (opponent-wins next)
   else Bool-equality-cases (empty as)
         (Œª (_ : empty as ‚â° true)  ‚Üí inl draw)
         (Œª (e : empty as ‚â° false) ‚Üí inr (Move as , play b , arg next as e))

tic-tac-toe‚ÇÇ : Game
tic-tac-toe‚ÇÇ = Game-from-GameJ tic-tac-toe‚ÇÇJ

t‚ÇÇ : R tic-tac-toe‚ÇÇ
t‚ÇÇ = optimal-outcome tic-tac-toe‚ÇÇ

s‚ÇÇ : Path (Xt tic-tac-toe‚ÇÇ)
s‚ÇÇ = strategic-path (selection-strategy (selections tic-tac-toe‚ÇÇJ) (q tic-tac-toe‚ÇÇ))

u‚ÇÇ : Path (Xt tic-tac-toe‚ÇÇ)
u‚ÇÇ = J-sequence (selections tic-tac-toe‚ÇÇJ) (q tic-tac-toe‚ÇÇ)

l‚ÇÇ : ‚Ñï
l‚ÇÇ = plength s‚ÇÇ

{- Slow

t‚ÇÇ-test : t‚ÇÇ ‚â° draw
t‚ÇÇ-test = refl

-}

{- Slow:

l‚ÇÇ-test : l‚ÇÇ ‚â° 9
l‚ÇÇ-test = refl

-}

{- slow

open import NonSpartanMLTTTypes

u‚ÇÇ-test : s‚ÇÇ ‚â° (ùüé :: refl)
           :: ((ùüí :: refl)
           :: ((ùüè :: refl)
           :: ((ùüê :: refl)
           :: ((ùüî :: refl)
           :: ((ùüë :: refl)
           :: ((ùüì :: refl)
           :: ((ùüï :: refl)
           :: ((ùüñ :: refl)
           :: ‚ü®‚ü©))))))))
u‚ÇÇ-test = refl
-}

\end{code}

More tests.

\begin{code}

module test where

 open import NonSpartanMLTTTypes

 Œµ‚ÇÇ : J Bool Bool
 Œµ‚ÇÇ p = p true

 h : ‚Ñï ‚Üí DTT
 h 0        = []
 h (succ n) = Bool ‚à∑ Œª _ ‚Üí h n

 Œµs : (n : ‚Ñï) ‚Üí ùìô Bool (h n)
 Œµs 0        = ‚ü®‚ü©
 Œµs (succ n) = Œµ‚ÇÇ :: Œª _ ‚Üí Œµs n

 Œµ : (n : ‚Ñï) ‚Üí J Bool (Path (h n))
 Œµ n = J-sequence (Œµs n)

 qq : (n : ‚Ñï) ‚Üí Path (h n) ‚Üí Bool
 qq 0        ‚ü®‚ü©        = true
 qq (succ n) (x :: xs) = not x && qq n xs

 test : (n : ‚Ñï) ‚Üí Path (h n)
 test n = Œµ n (qq n)

\end{code}

TODO. Generalize the above to multi-valued quantifiers, as in [1], using monads.

\begin{code}

data GameK (R : Type) : Type‚ÇÅ where
  leaf   : R ‚Üí GameK R
  branch : (X : Type) (Xf : X ‚Üí GameK R) (œï : K R X) ‚Üí GameK R

\end{code}

TODO. GameK ‚âÉ Game and we have a map GameJ ‚Üí GameK.

TODO. Define game isomorphism (and possibly homomorphism more generally).

\begin{code}

data DTT' (X : Type) : Type‚ÇÅ where
  []  : DTT' X
  _‚à∑_ : (A : X ‚Üí Type) (Xf : (x : X) ‚Üí A x ‚Üí DTT' X) ‚Üí DTT' X

record Game‚Åª : Type‚ÇÅ where
 constructor game‚Åª
 field
  Xt  : DTT
  R   : Type
  q   : Path Xt ‚Üí R

\end{code}

TODO. Game‚Åª ‚âÉ (Œ£ R : Type, DDTT R) for a suitable definition of
DDTT. Idea: In Game‚Åª, we know how to play the game, but we don't know
what the objective of the game is.
