Theo Hepburn, started on 8th October 2024

Contains proofs regarding natural number ordering beyond those provided in
Naturals.Order.

\begin{code}

{-# OPTIONS --safe --without-K #-}

module TGH.NatOrder where

open import MLTT.Spartan renaming (_+_ to _‚àî_) hiding (_^_)

open import Naturals.Addition renaming
 (addition-commutativity to +-comm ; addition-associativity to +-assoc)
open import Naturals.Multiplication renaming (mult-commutativity to *-comm)
open import Naturals.Exponentiation renaming (_‚Ñï^_ to _^_)
open import Naturals.Properties
open import Naturals.Order
open import Notation.Order
open import UF.Base

multiplication-preserves-order-left : (k m n : ‚Ñï) ‚Üí m ‚â§ n ‚Üí k * m ‚â§ k * n
multiplication-preserves-order-left k m n l = transport‚ÇÇ _‚â§_ Œ≥‚ÇÅ Œ≥‚ÇÇ Œ≥‚ÇÉ
 where
  Œ≥‚ÇÅ : m * k Ôºù k * m
  Œ≥‚ÇÅ = *-comm m k

  Œ≥‚ÇÇ : n * k Ôºù k * n
  Œ≥‚ÇÇ = *-comm n k

  Œ≥‚ÇÉ : m * k ‚â§ n * k
  Œ≥‚ÇÉ = multiplication-preserves-order m n k l

‚â§-multiplying : (m n x y : ‚Ñï) ‚Üí m ‚â§ n ‚Üí x ‚â§ y ‚Üí m * x ‚â§ n * y
‚â§-multiplying m n x y l‚ÇÅ l‚ÇÇ = ‚â§-trans (m * x) (n * x) (n * y) Œ≥‚ÇÅ Œ≥‚ÇÇ
 where
  Œ≥‚ÇÅ : m * x ‚â§ n * x
  Œ≥‚ÇÅ = multiplication-preserves-order m n x l‚ÇÅ 

  Œ≥‚ÇÇ : n * x ‚â§ n * y
  Œ≥‚ÇÇ = multiplication-preserves-order-left n x y l‚ÇÇ

exponentiation-preserves-order-right : (m n k : ‚Ñï) ‚Üí m ‚â§ n ‚Üí (m ^ k) ‚â§ (n ^ k)
exponentiation-preserves-order-right m n 0 l = ‚ãÜ
exponentiation-preserves-order-right m n (succ k) l
 = ‚â§-multiplying m n (m ^ k) (n ^ k) l Œ≥
 where
  Œ≥ : (m ^ k) ‚â§ (n ^ k)
  Œ≥ = exponentiation-preserves-order-right m n k l

\end{code}

We prove that 1·µè Ôºù 1 for all k and that 0·µè Ôºù 0 for all k > 0.
We then prove that if m ‚â§ n, then k·µê ‚â§ k‚Åø if k ‚â† 0 or m ‚â† 0 and n ‚â† 0.

\begin{code}

exponentiation-of-one : (k : ‚Ñï) ‚Üí 1 ^ k Ôºù 1
exponentiation-of-one zero = refl
exponentiation-of-one (succ k)
 = 1 * (1 ^ k) Ôºù‚ü® ap (Œª x ‚Üí 1 * x) (exponentiation-of-one k) ‚ü©
   1 * 1 Ôºù‚ü® refl ‚ü©
   1 ‚àé

exponentiation-of-zero : (k : ‚Ñï) ‚Üí 0 ^ (succ k) Ôºù 0
exponentiation-of-zero k = zero-left-base (0 ^ k)

exponentiation-preserves-order-left : (k m n : ‚Ñï) ‚Üí (k ‚â† 0) ‚àî (m ‚â† 0) ‚àî (n Ôºù 0)
                                    ‚Üí m ‚â§ n ‚Üí (k ^ m) ‚â§ (k ^ n)
exponentiation-preserves-order-left zero m n (inl k‚â†0) l
 = ùüò-elim (k‚â†0 refl)
exponentiation-preserves-order-left zero zero n (inr (inl m‚â†0)) l
 = ùüò-elim (m‚â†0 refl)
exponentiation-preserves-order-left zero (succ m) (succ n) (inr (inl m‚â†0)) l
 = transport‚ÇÇ _‚â§_ Œ≥‚ÇÅ Œ≥‚ÇÇ Œ≥‚ÇÉ 
 where
  Œ≥‚ÇÅ : 0 Ôºù 0 ^ succ m
  Œ≥‚ÇÅ = (exponentiation-of-zero  m)‚Åª¬π 

  Œ≥‚ÇÇ : 0 Ôºù 0 ^ succ n
  Œ≥‚ÇÇ = (exponentiation-of-zero n)‚Åª¬π

  Œ≥‚ÇÉ : 0 ‚â§ 0
  Œ≥‚ÇÉ = ‚â§-refl 0
exponentiation-preserves-order-left zero zero zero (inr (inr nÔºù0)) l = ‚ãÜ
exponentiation-preserves-order-left (succ k) zero zero _ l = ‚ãÜ
exponentiation-preserves-order-left (succ k) zero (succ n) _ l
 = ‚â§-trans 1 (succ k ^ n) (succ k ^ succ n) Œ≥‚ÇÅ Œ≥‚ÇÑ 
 where
  Œ≥‚ÇÅ : 1 ‚â§ (succ k ^ n)
  Œ≥‚ÇÅ = exponentiation-preserves-order-left (succ k) zero n (inl (Œª ())) l

  Œ≥‚ÇÇ : 1 * (succ k ^ n) ‚â§ (succ k) * (succ k ^ n)
  Œ≥‚ÇÇ = multiplication-preserves-order 1 (succ k) (succ k ^ n) ‚ãÜ

  Œ≥‚ÇÉ : 1 * (succ k ^ n) Ôºù succ k ^ n
  Œ≥‚ÇÉ = (mult-left-id (succ k ^ n))

  Œ≥‚ÇÑ : (succ k ^ n) ‚â§ (succ k) * (succ k ^ n)
  Œ≥‚ÇÑ = transport (_‚â§ (succ k) * (succ k ^ n)) Œ≥‚ÇÉ Œ≥‚ÇÇ
exponentiation-preserves-order-left (succ k) (succ m) (succ n) _ l = Œ≥‚ÇÇ
 where
  Œ≥‚ÇÅ : (succ k) ^ m ‚â§ (succ k) ^ n
  Œ≥‚ÇÅ = exponentiation-preserves-order-left (succ k) m n (inl (Œª ())) l

  Œ≥‚ÇÇ : (succ k * (succ k) ^ m) ‚â§ (succ k * (succ k) ^ n)
  Œ≥‚ÇÇ = multiplication-preserves-order-left
       (succ k) ((succ k) ^ m) ((succ k) ^ n) Œ≥‚ÇÅ

‚â§-exponentiating : (m n x y : ‚Ñï) ‚Üí (m ‚â† 0) ‚àî (x ‚â† 0) ‚àî (y Ôºù 0)
                 ‚Üí m ‚â§ n ‚Üí x ‚â§ y ‚Üí m ^ x ‚â§ n ^ y
‚â§-exponentiating m n x y (inl m‚â†0) l‚ÇÅ l‚ÇÇ
 = ‚â§-trans (m ^ x) (m ^ y) (n ^ y) Œ≥‚ÇÅ Œ≥‚ÇÇ
 where
  Œ≥‚ÇÅ : (m ^ x) ‚â§ (m ^ y)
  Œ≥‚ÇÅ = exponentiation-preserves-order-left m x y (inl m‚â†0) l‚ÇÇ

  Œ≥‚ÇÇ : (m ^ y) ‚â§ (n ^ y)
  Œ≥‚ÇÇ = exponentiation-preserves-order-right m n y l‚ÇÅ
‚â§-exponentiating m n x y (inr (inl x‚â†0)) l‚ÇÅ l‚ÇÇ
 = ‚â§-trans (m ^ x) (m ^ y) (n ^ y) Œ≥‚ÇÅ Œ≥‚ÇÇ
 where
  Œ≥‚ÇÅ : (m ^ x) ‚â§ (m ^ y)
  Œ≥‚ÇÅ = exponentiation-preserves-order-left m x y (inr (inl x‚â†0)) l‚ÇÇ

  Œ≥‚ÇÇ : (m ^ y) ‚â§ (n ^ y)
  Œ≥‚ÇÇ = exponentiation-preserves-order-right m n y l‚ÇÅ
‚â§-exponentiating m n zero zero (inr (inr yÔºù0)) l‚ÇÅ l‚ÇÇ = ‚ãÜ

exponent-addition : (a b x y n : ‚Ñï) ‚Üí (n ‚â† 0) ‚àî (x ‚â† 0) ‚àî (y Ôºù 0) ‚Üí x ‚â§ y
                    ‚Üí a * (n ^ x) + b * (n ^ y) ‚â§ (a + b) * (n ^ y)
exponent-addition zero b x y n c l = transport‚ÇÇ _‚â§_ Œ≥‚ÇÅ Œ≥‚ÇÇ Œ≥‚ÇÉ
 where
  Œ≥‚ÇÅ : b * (n ^ y) Ôºù (0 * (n ^ x)) + (b * (n ^ y))
  Œ≥‚ÇÅ = b * (n ^ y) Ôºù‚ü® (zero-left-neutral (b * (n ^ y)))‚Åª¬π ‚ü©
       0 + b * (n ^ y) Ôºù‚ü® ap (Œª x ‚Üí x + b * (n ^ y))
                           (zero-left-base (n ^ x))‚Åª¬π ‚ü©
       0 * (n ^ x) + b * (n ^ y) ‚àé

  Œ≥‚ÇÇ : b * (n ^ y) Ôºù (0 + b) * (n ^ y)
  Œ≥‚ÇÇ = ap (Œª x ‚Üí x * (n ^ y)) (zero-left-neutral b)‚Åª¬π

  Œ≥‚ÇÉ : b * (n ^ y) ‚â§ b * (n ^ y)
  Œ≥‚ÇÉ = ‚â§-refl (b * (n ^ y))
exponent-addition a@(succ _) zero x y n c l = transport‚ÇÇ _‚â§_ Œ≥‚ÇÅ Œ≥‚ÇÇ Œ≥‚ÇÑ
 where
  Œ≥‚ÇÅ : a * (n ^ x) Ôºù a * (n ^ x) + 0 * (n ^ y)
  Œ≥‚ÇÅ = a * (n ^ x) Ôºù‚ü® refl ‚ü©
       a * (n ^ x) + 0 Ôºù‚ü® ap (Œª z ‚Üí a * (n ^ x) + z)
                           (zero-left-base (n ^ y))‚Åª¬π ‚ü©
       a * (n ^ x) + 0 * (n ^ y) ‚àé

  Œ≥‚ÇÇ : a * (n ^ y) Ôºù (a + 0) * (n ^ y)
  Œ≥‚ÇÇ = refl

  Œ≥‚ÇÉ : (n ^ x) ‚â§ (n ^ y)
  Œ≥‚ÇÉ = exponentiation-preserves-order-left n x y c l

  Œ≥‚ÇÑ : a * (n ^ x) ‚â§ a * (n ^ y)
  Œ≥‚ÇÑ = multiplication-preserves-order-left a (n ^ x) (n ^ y) Œ≥‚ÇÉ
exponent-addition (succ a) (succ b) x y n c l
 = transport‚ÇÇ _‚â§_ ((Œ≥‚ÇÇ)‚Åª¬π) ((Œ≥‚ÇÉ)‚Åª¬π) Œ≥‚ÇÖ
 where
  Œ≥‚ÇÅ : a * (n ^ x) + b * (n ^ y) ‚â§ (a + b) * n ^ y
  Œ≥‚ÇÅ = exponent-addition a b x y n c l

  Œ≥‚ÇÇ : (succ a) * (n ^ x) + (succ b) * (n ^ y)
     Ôºù (a * (n ^ x) + b * (n ^ y)) + ((n ^ x) + (n ^ y))
  Œ≥‚ÇÇ = (succ a) * (n ^ x) + (succ b) * (n ^ y) Ôºù‚ü® i  ‚ü©
       (n ^ x) * (succ a) + (succ b) * (n ^ y) Ôºù‚ü® ii ‚ü©
       (n ^ x) * (succ a) + (n ^ y) * (succ b) Ôºù‚ü® iii ‚ü©
       (n ^ x) + (n ^ x) * a + (n ^ y) * (succ b) Ôºù‚ü® iv ‚ü©
       (n ^ x) + (n ^ x) * a + ((n ^ y) + (n ^ y) * b) Ôºù‚ü® v ‚ü©
       (n ^ x) + (n ^ x) * a + (n ^ y) + (n ^ y) * b Ôºù‚ü® vi ‚ü©
       (n ^ x) * a + (n ^ x) + (n ^ y) + (n ^ y) * b Ôºù‚ü® vii ‚ü©
       (n ^ x) * a + ((n ^ x) + (n ^ y)) + (n ^ y) * b Ôºù‚ü® viii ‚ü©
       (n ^ x) * a + (((n ^ x) + (n ^ y)) + (n ^ y) * b) Ôºù‚ü® ix ‚ü©
       (n ^ x) * a + ((n ^ y) * b + ((n ^ x) + (n ^ y))) Ôºù‚ü® x' ‚ü©
       ((n ^ x) * a + (n ^ y) * b) + ((n ^ x) + (n ^ y)) Ôºù‚ü® xi ‚ü©
       (a * (n ^ x) + (n ^ y) * b) + ((n ^ x) + (n ^ y)) Ôºù‚ü® xii  ‚ü©
       (a * (n ^ x) + b * (n ^ y)) + ((n ^ x) + (n ^ y)) ‚àé
   where
    i : (succ a) * (n ^ x) + (succ b) * (n ^ y)
      Ôºù (n ^ x) * (succ a) + (succ b) * (n ^ y)
    i = ap (Œª z ‚Üí z + (succ b) * (n ^ y)) (*-comm (succ a) (n ^ x))

    ii : (n ^ x) * (succ a) + (succ b) * (n ^ y)
       Ôºù (n ^ x) * (succ a) + (n ^ y) * (succ b)
    ii = ap (Œª z ‚Üí (n ^ x) * (succ a) + z) (*-comm (succ b) (n ^ y))

    iii : (n ^ x) * (succ a) + (n ^ y) * (succ b)
        Ôºù (n ^ x) + (n ^ x) * a + (n ^ y) * (succ b)
    iii = refl

    iv : (n ^ x) + (n ^ x) * a + (n ^ y) * (succ b)
       Ôºù (n ^ x) + (n ^ x) * a + ((n ^ y) + (n ^ y) * b)
    iv = refl

    v : (n ^ x) + (n ^ x) * a + ((n ^ y) + (n ^ y) * b)
      Ôºù (n ^ x) + (n ^ x) * a + (n ^ y) + (n ^ y) * b
    v = (+-assoc ((n ^ x) + (n ^ x) * a) (n ^ y) ((n ^ y) * b))‚Åª¬π

    vi : (n ^ x) + (n ^ x) * a + (n ^ y) + (n ^ y) * b
       Ôºù (n ^ x) * a + (n ^ x) + (n ^ y) + (n ^ y) * b
    vi = ap (Œª z ‚Üí z + (n ^ y) + (n ^ y) * b) (+-comm (n ^ x) ((n ^ x) * a))

    vii : (n ^ x) * a + (n ^ x) + (n ^ y) + (n ^ y) * b
        Ôºù (n ^ x) * a + ((n ^ x) + (n ^ y)) + (n ^ y) * b
    vii = ap (Œª z ‚Üí z + (n ^ y) * b) (+-assoc ((n ^ x) * a) (n ^ x) (n ^ y))

    viii : (n ^ x) * a + ((n ^ x) + (n ^ y)) + (n ^ y) * b
         Ôºù (n ^ x) * a + (((n ^ x) + (n ^ y)) + (n ^ y) * b)
    viii = +-assoc ((n ^ x) * a) ((n ^ x) + (n ^ y)) ((n ^ y) * b)

    ix : (n ^ x) * a + (((n ^ x) + (n ^ y)) + (n ^ y) * b)
       Ôºù (n ^ x) * a + ((n ^ y) * b + ((n ^ x) + (n ^ y)))
    ix = ap (Œª z ‚Üí (n ^ x) * a + z) (+-comm ((n ^ x) + (n ^ y)) ((n ^ y) * b))

    x' : (n ^ x) * a + ((n ^ y) * b + ((n ^ x) + (n ^ y)))
       Ôºù ((n ^ x) * a + (n ^ y) * b) + ((n ^ x) + (n ^ y))
    x' = (+-assoc ((n ^ x) * a) ((n ^ y) * b) ((n ^ x) + (n ^ y)))‚Åª¬π

    xi : ((n ^ x) * a + (n ^ y) * b) + ((n ^ x) + (n ^ y))
       Ôºù (a * (n ^ x) + (n ^ y) * b) + ((n ^ x) + (n ^ y))
    xi = ap (Œª z ‚Üí z + (n ^ y) * b + ((n ^ x) + (n ^ y))) (*-comm (n ^ x) a)

    xii : (a * (n ^ x) + (n ^ y) * b) + ((n ^ x) + (n ^ y))
        Ôºù (a * (n ^ x) + b * (n ^ y)) + ((n ^ x) + (n ^ y))
    xii = ap (Œª z ‚Üí a * (n ^ x) + z + ((n ^ x) + (n ^ y))) (*-comm (n ^ y) b)

  Œ≥‚ÇÉ : ((succ a) + (succ b)) * (n ^ y)
     Ôºù ((a + b) * (n ^ y)) + ((n ^ y) + (n ^ y))
  Œ≥‚ÇÉ = ((succ a) + (succ b)) * (n ^ y) Ôºù‚ü® refl ‚ü©
       succ (succ a + b) * (n ^ y) Ôºù‚ü® ap (Œª z ‚Üí succ z * (n ^ y))
                                       (succ-left a b) ‚ü©
       succ (succ (a + b)) * (n ^ y) Ôºù‚ü® *-comm (succ (succ (a + b))) (n ^ y) ‚ü©
       (n ^ y) * succ (succ (a + b)) Ôºù‚ü® refl ‚ü©
       (n ^ y) + ((n ^ y) + (n ^ y) * (a + b)) Ôºù‚ü® (+-assoc (n ^ y) (n ^ y)
                                                   ((n ^ y) * (a + b)))‚Åª¬π ‚ü©
       ((n ^ y) + (n ^ y)) + (n ^ y) * (a + b) Ôºù‚ü® ap ((n ^ y) + (n ^ y) +_)
                                                   (*-comm (n ^ y) (a + b)) ‚ü©
       ((n ^ y) + (n ^ y)) + (a + b) * (n ^ y) Ôºù‚ü® +-comm ((n ^ y) + (n ^ y))
                                                   ((a + b) * (n ^ y)) ‚ü©
       ((a + b) * (n ^ y)) + ((n ^ y) + (n ^ y)) ‚àé

  Œ≥‚ÇÑ : (n ^ x) + (n ^ y) ‚â§ (n ^ y) + (n ^ y)
  Œ≥‚ÇÑ = ‚â§-adding (n ^ x) (n ^ y) (n ^ y) (n ^ y)
       (exponentiation-preserves-order-left n x y c l) (‚â§-refl (n ^ y))

  Œ≥‚ÇÖ : (a * (n ^ x) + b * (n ^ y)) + ((n ^ x) + (n ^ y))
     ‚â§ ((a + b) * (n ^ y)) + ((n ^ y) + (n ^ y))
  Œ≥‚ÇÖ = ‚â§-adding (a * (n ^ x) + b * (n ^ y))
       ((a + b) * (n ^ y)) ((n ^ x) + (n ^ y)) ((n ^ y) + (n ^ y)) Œ≥‚ÇÅ Œ≥‚ÇÑ

\end{code}

A special case of the above for simplifying terms of form
b + a * n to (b + a) * n when reasoning about inequalities.

\begin{code}

simplify-constant : (a b n : ‚Ñï) ‚Üí n ‚â† 0 ‚Üí b + a * n ‚â§ (b + a) * n
simplify-constant a b zero l = ùüò-elim (l refl)
simplify-constant a b (succ n) l = transport‚ÇÇ _‚â§_ Œ≥‚ÇÅ Œ≥‚ÇÇ Œ≥‚ÇÉ
 where
  Œ≥‚ÇÅ : b * (succ n ^ 0) + a * (succ n ^ 1) Ôºù b + a * (succ n)
  Œ≥‚ÇÅ = refl

  Œ≥‚ÇÇ : (b + a) * (succ n ^ 1) Ôºù (b + a) * (succ n)
  Œ≥‚ÇÇ = refl

  Œ≥‚ÇÉ : b * (succ n ^ 0) + a * (succ n ^ 1) ‚â§ (b + a) * (succ n ^ 1)
  Œ≥‚ÇÉ = exponent-addition b a 0 1 (succ n) (inl (Œª ())) ‚ãÜ

\end{code}
