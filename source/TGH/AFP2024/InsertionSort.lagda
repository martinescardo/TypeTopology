Taken from the Advanced Functional Programming module lecture notes 2023-24

Modified to remove uses of with

Defines an insertion sort function and proves its correctness

\begin{code}

{-# OPTIONS --safe --without-K #-}

open import MLTT.Spartan renaming (_+_ to _‚àî_)
open import MLTT.List
open import Notation.Order
open import Ordinals.Notions
open import TGH.AFP2024.isomorphisms
open import TGH.AFP2024.iso-utils


module TGH.AFP2024.InsertionSort (X : ùì§‚ÇÄ Ãá) (_<_ : X ‚Üí X ‚Üí ùì§‚ÇÄ Ãá )
 (trichotomy : is-trichotomous-order _<_) where

insert : X ‚Üí List X ‚Üí List X

insert-trich : (y x : X) ‚Üí List X
             ‚Üí (trich : (x < y) ‚àî (x Ôºù y) ‚àî (y < x))
             ‚Üí List X
insert-trich y x xs (inl y<x) = x ‚à∑ insert y xs
insert-trich y x xs (inr x‚â§y) = y ‚à∑ x ‚à∑ xs

insert y [] = y ‚à∑ []
insert y (x ‚à∑ xs) = insert-trich y x xs (trichotomy x y)

insert-all : List X ‚Üí List X ‚Üí List X
insert-all [] ys = ys
insert-all (x ‚à∑ xs) ys = insert x (insert-all xs ys)

insertion-sort : List X ‚Üí List X
insertion-sort xs = insert-all xs []

data Sorted : List X ‚Üí Set where
 nil-sorted  : Sorted []
 sing-sorted : {x : X} ‚Üí Sorted (x ‚à∑ [])
 adj-sorted  : {y x : X} {xs : List X}
             ‚Üí Sorted (x ‚à∑ xs)
             ‚Üí (x Ôºù y) ‚àî (y < x)
             ‚Üí Sorted (y ‚à∑ x ‚à∑ xs)

Pos : {X : ùì§‚ÇÄ Ãá} ‚Üí List X ‚Üí ùì§‚ÇÄ Ãá 
Pos [] = ùüò
Pos (_ ‚à∑ xs) = ùüô ‚àî Pos xs

Inhab : {X : ùì§‚ÇÄ Ãá} (l : List X) ‚Üí Pos l ‚Üí X
Inhab (x ‚à∑ _) (inl ‚ãÜ) = x
Inhab (_ ‚à∑ l) (inr p) = Inhab l p

record _Is-Permutation-Of_ (xs ys : List X) : ùì§‚ÇÄ Ãá where
 field
  pos-iso : Pos xs ‚âÖ Pos ys
  inhab-eq : (p : Pos xs) ‚Üí Inhab xs p Ôºù Inhab ys (_‚âÖ_.bijection pos-iso p)

record Sorting-Algorithm : ùì§‚ÇÄ Ãá where
 field
  sort : List X ‚Üí List X
  sort-is-sorted : (xs : List X) ‚Üí Sorted (sort xs)
  sort-is-permutation : (xs : List X) ‚Üí (sort xs) Is-Permutation-Of xs

insert-is-sorted : (x : X) (xs : List X) ‚Üí Sorted xs ‚Üí Sorted (insert x xs)
insert-is-sorted y [] nil-sorted = sing-sorted 
insert-is-sorted y (x ‚à∑ []) sing-sorted
 = Œ≥ (trichotomy x y)
 where
   Œ≥ : (trich : ((x < y) ‚àî (x Ôºù y) ‚àî (y < x)))
     ‚Üí  Sorted (insert-trich y x [] trich)
   Œ≥ (inl x<y) = adj-sorted sing-sorted (inr x<y)
   Œ≥ (inr y‚â§x) = adj-sorted sing-sorted y‚â§x
insert-is-sorted y (z ‚à∑ x ‚à∑ xs) (adj-sorted srtd z‚â§x) = Œ≥‚ÇÅ (trichotomy z y)
 where
  Œ≥‚ÇÅ : (trich : (z < y) ‚àî (z Ôºù y) ‚àî (y < z))
     ‚Üí Sorted (insert-trich y z (x ‚à∑ xs) trich)
  Œ≥‚ÇÅ (inl z<y)
   = Œ≥‚ÇÇ (trichotomy x y) (insert-is-sorted y (x ‚à∑ xs) srtd)
   where
    Œ≥‚ÇÇ : (trich : (x < y) ‚àî (x Ôºù y) ‚àî (y < x))
       ‚Üí Sorted (insert-trich y x xs trich)
       ‚Üí Sorted (z ‚à∑ insert-trich y x xs trich)
    Œ≥‚ÇÇ (inl x<y) srtd' = adj-sorted srtd' z‚â§x
    Œ≥‚ÇÇ (inr y‚â§x) srtd' = adj-sorted (adj-sorted srtd y‚â§x) (inr z<y)
  Œ≥‚ÇÅ (inr y‚â§z) = adj-sorted (adj-sorted srtd z‚â§x) y‚â§z

insert-all-is-sorted : (xs ys : List X) (ys-srtd : Sorted ys)
  ‚Üí Sorted (insert-all xs ys)
insert-all-is-sorted [] ys ys-srtd = ys-srtd
insert-all-is-sorted (x ‚à∑ xs) ys ys-srtd
 = insert-is-sorted x (insert-all xs ys) (insert-all-is-sorted xs ys ys-srtd)

insertion-sort-is-sorted : (xs : List X) ‚Üí Sorted (insertion-sort xs)
insertion-sort-is-sorted xs = insert-all-is-sorted xs [] nil-sorted

insert-pos-iso : (x : X) (xs : List X)
 ‚Üí Pos (insert x xs) ‚âÖ ùüô ‚àî Pos xs

insert-pos-iso-trich : (y x : X) (xs : List X)
                     ‚Üí (trich : (x < y) ‚àî (x Ôºù y) ‚àî (y < x))
                     ‚Üí Pos (insert-trich y x xs trich) ‚âÖ ùüô ‚àî ùüô ‚àî Pos xs
insert-pos-iso-trich y x xs (inl x<y)
 = ‚àî-left-swap-iso ùüô ùüô (Pos xs) ‚àò·µ¢
     (‚àî-pair-iso (id-iso ùüô) (insert-pos-iso y xs))
insert-pos-iso-trich y x xs (inr trich)
 = id-iso (ùüô ‚àî ùüô ‚àî Pos xs)

insert-pos-iso y [] = id-iso (ùüô ‚àî ùüò)
insert-pos-iso y (x ‚à∑ xs)
 = insert-pos-iso-trich y x xs (trichotomy x y)

insert-all-pos-iso : (xs ys : List X)
  ‚Üí Pos (insert-all xs ys) ‚âÖ Pos (xs ++ ys)
insert-all-pos-iso [] ys = id-iso (Pos ys)
insert-all-pos-iso (x ‚à∑ xs) ys =
 Pos (insert x (insert-all xs ys)) ‚âÖ‚ü® insert-pos-iso x (insert-all xs ys) ‚ü©
 ùüô ‚àî Pos (insert-all xs ys)
 ‚âÖ‚ü® ‚àî-pair-iso (id-iso ùüô) (insert-all-pos-iso xs ys) ‚ü©
 (ùüô ‚àî Pos (xs ++ ys)) ‚àé·µ¢

pos-swap-lemma : (x y : X) (xs : List X)
 ‚Üí (p : Pos (y ‚à∑ xs))
 ‚Üí Inhab (x ‚à∑ y ‚à∑ xs) (inr p) Ôºù
   Inhab (y ‚à∑ x ‚à∑ xs) (_‚âÖ_.bijection (‚àî-left-swap-iso ùüô ùüô (Pos xs)) (inr p))
pos-swap-lemma x y xs (inl ‚ãÜ) = refl
pos-swap-lemma x y xs (inr p) = refl

insert-inhab-eq : (x : X) (xs : List X)
 ‚Üí (p : Pos (insert x xs))
 ‚Üí Inhab (insert x xs) p Ôºù Inhab (x ‚à∑ xs)
   (_‚âÖ_.bijection (insert-pos-iso x xs) p)

insert-inhab-eq-trich : (y : X) (x : X) (xs : List X)
                      ‚Üí (trich : ((x < y) ‚àî (x Ôºù y) ‚àî (y < x)))
                      ‚Üí (p : Pos (insert-trich y x xs trich))
                      ‚Üí Inhab (insert-trich y x xs trich) p
                      Ôºù Inhab (y ‚à∑ x ‚à∑ xs)
                        (_‚âÖ_.bijection (insert-pos-iso-trich y x xs trich) p)
insert-inhab-eq-trich y x xs (inl x<y) (inl ‚ãÜ) = refl
insert-inhab-eq-trich y x xs (inl x<y) (inr p)
 = Inhab (insert y xs) p Ôºù‚ü® insert-inhab-eq y xs p ‚ü©
 Inhab (y ‚à∑ xs) (_‚âÖ_.bijection (insert-pos-iso y xs) p) Ôºù‚ü® refl ‚ü©
 Inhab (x ‚à∑ y ‚à∑ xs) (inr (_‚âÖ_.bijection (insert-pos-iso y xs) p))
 Ôºù‚ü® pos-swap-lemma x y xs (_‚âÖ_.bijection (insert-pos-iso y xs) p) ‚ü© 
 Inhab (y ‚à∑ x ‚à∑ xs) (_‚âÖ_.bijection (‚àî-left-swap-iso ùüô ùüô (Pos xs))
                       (inr (_‚âÖ_.bijection (insert-pos-iso y xs) p))) ‚àé
insert-inhab-eq-trich y x xs (inr y‚â§x) p = refl

insert-inhab-eq y [] p = refl
insert-inhab-eq y (x ‚à∑ xs) p = insert-inhab-eq-trich y x xs (trichotomy x y) p

inhab-ext-lemma : (x : X) (xs ys : List X) 
 ‚Üí (Œ± : Pos xs ‚âÖ Pos ys)
 ‚Üí (e : (p : Pos xs) ‚Üí Inhab xs p Ôºù Inhab ys (_‚âÖ_.bijection Œ± p))
 ‚Üí (p : Pos (x ‚à∑ xs))
 ‚Üí Inhab (x ‚à∑ xs) p Ôºù Inhab (x ‚à∑ ys)
    (_‚âÖ_.bijection (‚àî-pair-iso (id-iso ùüô) Œ±) p)
inhab-ext-lemma x xs ys Œ± e (inl ‚ãÜ) = refl
inhab-ext-lemma x xs ys Œ± e (inr p) = e p

insert-all-inhab-eq : (xs ys : List X) (p : Pos (insert-all xs ys))
 ‚Üí Inhab (insert-all xs ys) p Ôºù
   Inhab (xs ++ ys) (_‚âÖ_.bijection (insert-all-pos-iso xs ys) p)
insert-all-inhab-eq [] ys p = refl
insert-all-inhab-eq (x ‚à∑ xs) ys p
 = Inhab (insert x (insert-all xs ys)) p
    Ôºù‚ü® insert-inhab-eq x (insert-all xs ys) p ‚ü©
   Inhab (x ‚à∑ insert-all xs ys) (_‚âÖ_.bijection
   (insert-pos-iso x (insert-all xs ys)) p)
    Ôºù‚ü® inhab-ext-lemma x (insert-all xs ys) (xs ++ ys)
    (insert-all-pos-iso xs ys)
    (Œª p ‚Üí insert-all-inhab-eq xs ys p)
    (_‚âÖ_.bijection (insert-pos-iso x (insert-all xs ys)) p) ‚ü© 
   Inhab (x ‚à∑ xs ++ ys)
   (_‚âÖ_.bijection (‚àî-pair-iso (id-iso ùüô) (insert-all-pos-iso xs ys))
   (_‚âÖ_.bijection (insert-pos-iso x (insert-all xs ys)) p)) ‚àé

insert-is-perm : (x : X) (xs : List X)
 ‚Üí (insert x xs) Is-Permutation-Of (x ‚à∑ xs)
insert-is-perm x xs = record { pos-iso = insert-pos-iso x xs
                      ; inhab-eq = insert-inhab-eq x xs }

insert-all-is-perm : (xs ys : List X)
 ‚Üí (insert-all xs ys) Is-Permutation-Of (xs ++ ys)
insert-all-is-perm xs ys = record { pos-iso = insert-all-pos-iso xs ys
                           ; inhab-eq = insert-all-inhab-eq xs ys }

insertion-sort-is-perm : (xs : List X)
 ‚Üí (insertion-sort xs) Is-Permutation-Of xs
insertion-sort-is-perm xs = transport (insertion-sort xs Is-Permutation-Of_)
 (([]-right-neutral xs)‚Åª¬π) (insert-all-is-perm xs [])

insertion-sort-algorithm : Sorting-Algorithm
insertion-sort-algorithm =
 record { sort = insertion-sort
        ; sort-is-sorted = insertion-sort-is-sorted
        ; sort-is-permutation = insertion-sort-is-perm
        } 

\end{code}
