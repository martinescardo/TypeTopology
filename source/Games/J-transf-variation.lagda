Martin Escardo, Paulo Oliva, December 2024, modified from a 2023 file.

A variation of the J monad transformer. Starting with a monad T and an
algebra ╬▒ : T R Рєњ R, we define a new monad JT X := (X Рєњ R) Рєњ T X.

\begin{code}

{-# OPTIONS --safe --without-K #-}

open import MLTT.Spartan hiding (J)

module Games.J-transf-variation where

open import UF.FunExt
open import Games.Monad

­ЮЋЂ-transf : Fun-Ext
         Рєњ (­ЮЊБ : Monad)
           (R : Type)
           (­ЮЊљ : Algebra ­ЮЊБ R)
         Рєњ Monad
­ЮЋЂ-transf fe ­ЮЊБ R ­ЮЊљ = monad JT ╬ир┤Хрхђ extр┤Хрхђ extр┤Хрхђ-╬и unitр┤Хрхђ assocр┤Хрхђ
 where
  open ╬▒-definitions ­ЮЊБ R ­ЮЊљ
  open T-definitions ­ЮЊБ

  JT : Type Рєњ Type
  JT X = (X Рєњ R) Рєњ T X

  ╬ир┤Хрхђ : {X : Type} Рєњ X Рєњ JT X
  ╬ир┤Хрхђ = ╬╗ x p Рєњ ╬ирхђ x

  extр┤Хрхђ : {X Y : Type} Рєњ (X Рєњ JT Y) Рєњ JT X Рєњ JT Y
  extр┤Хрхђ f ╬х p = extрхђ (╬╗ x Рєњ f x p) (╬х (╬╗ x Рєњ ╬▒-extрхђ p (f x p)))

  extр┤Хрхђ-╬и : {X : Type} Рєњ extр┤Хрхђ (╬ир┤Хрхђ {X}) Рѕ╝ ­ЮЉќ­ЮЉЉ (JT X)
  extр┤Хрхђ-╬и ╬х = dfunext fe (╬╗ p Рєњ
   extрхђ ╬ирхђ (╬х (╬╗ x Рєњ ╬▒-extрхђ p (╬ирхђ x))) №╝ЮРЪе extрхђ-╬и _ РЪЕ
   ╬х (╬╗ x Рєњ ╬▒-extрхђ p (╬ирхђ x))           №╝ЮРЪе ap ╬х (dfunext fe (╬▒-extрхђ-unit p)) РЪЕ
   ╬х p                                 Рѕј)

  unitр┤Хрхђ : {X Y : Type} (f : X Рєњ JT Y) (x : X) Рєњ extр┤Хрхђ f (╬ир┤Хрхђ x) №╝Ю f x
  unitр┤Хрхђ f x = dfunext fe (╬╗ p Рєњ unit ­ЮЊБ (╬╗ x Рєњ f x p) x)

  assocр┤Хрхђ : {X Y Z : Type} (g : Y Рєњ JT Z) (f : X Рєњ JT Y) (╬х : JT X)
          Рєњ extр┤Хрхђ (extр┤Хрхђ g Рѕў f) ╬х №╝Ю extр┤Хрхђ g (extр┤Хрхђ f ╬х)
  assocр┤Хрхђ {X} {Y} {Z} g f ╬х = dfunext fe ╬│
   where
    ╬│ : extр┤Хрхђ (extр┤Хрхђ g Рѕў f) ╬х Рѕ╝ extр┤Хрхђ g (extр┤Хрхђ f ╬х)
    ╬│ p =
     extр┤Хрхђ (extр┤Хрхђ g Рѕў f) ╬х p                         №╝ЮРЪе refl РЪЕ
     extрхђ (extрхђ ­ЮЋў Рѕў ­ЮЋЌ) (╬х (╬▒-extрхђ p Рѕў extрхђ ­ЮЋў Рѕў ­ЮЋЌ))   №╝ЮРЪе assoc ­ЮЊБ _ _ _ РЪЕ
     extрхђ ­ЮЋў (extрхђ ­ЮЋЌ (╬х (╬▒-extрхђ p Рѕў extрхђ ­ЮЋў Рѕў ­ЮЋЌ)))     №╝ЮРЪе by-╬▒-extрхђ-assoc РЂ╗┬╣ РЪЕ
     extрхђ ­ЮЋў (extрхђ ­ЮЋЌ (╬х (╬▒-extрхђ (╬▒-extрхђ p Рѕў ­ЮЋў) Рѕў ­ЮЋЌ))) №╝ЮРЪе refl РЪЕ
     extр┤Хрхђ g (extр┤Хрхђ f ╬х) p                           Рѕј
      where
       ­ЮЋў : Y Рєњ T Z
       ­ЮЋў = ╬╗ y Рєњ g y p
       ­ЮЋЌ : X Рєњ T Y
       ­ЮЋЌ = ╬╗ x Рєњ f x (╬▒-extрхђ p Рѕў ­ЮЋў)
       by-╬▒-extрхђ-assoc = ap (╬╗ - Рєњ extрхђ ­ЮЋў (extрхђ ­ЮЋЌ (╬х (- Рѕў ­ЮЋЌ))))
                            (dfunext fe (╬▒-extрхђ-assoc fe p ­ЮЋў))

­ЮЋЂ' : Fun-Ext Рєњ Type Рєњ Monad
­ЮЋЂ' fe R = ­ЮЋЂ-transf fe ­ЮЋђ­ЮЋЋ R ­ЮЊў
 where
  ­ЮЊў = record {
       structure-map = id ;
       aunit         = ╬╗ r Рєњ refl ;
       aassoc        = ╬╗ r Рєњ refl}

module JT-definitions
        (­ЮЊБ : Monad)
        (R : Type)
        (­ЮЊљ : Algebra ­ЮЊБ R)
        (fe : Fun-Ext)
       where

 open import Games.K

 open T-definitions ­ЮЊБ
 open K-definitions R

 ­ЮЋЂ­ЮЋІ : Monad
 ­ЮЋЂ­ЮЋІ = ­ЮЋЂ-transf fe ­ЮЊБ R ­ЮЊљ

 JT : Type Рєњ Type
 JT = functor ­ЮЋЂ­ЮЋІ

 KT : Type Рєњ Type
 KT X = (X Рєњ T R) Рєњ R

 ╬ир┤Хрхђ : {X : Type} Рєњ X Рєњ JT X
 ╬ир┤Хрхђ = ╬и ­ЮЋЂ­ЮЋІ

 extр┤Хрхђ : {X Y : Type} Рєњ (X Рєњ JT Y) Рєњ JT X Рєњ JT Y
 extр┤Хрхђ = ext ­ЮЋЂ­ЮЋІ

 mapр┤Хрхђ : {X Y : Type} Рєњ (X Рєњ Y) Рєњ JT X Рєњ JT Y
 mapр┤Хрхђ = map ­ЮЋЂ­ЮЋІ

 _РіЌр┤Хрхђ_ : {X : Type} {Y : X Рєњ Type}
       Рєњ JT X
       Рєњ ((x : X) Рєњ JT (Y x))
       Рєњ JT (╬Б x ЖъЅ X , Y x)
 _РіЌр┤Хрхђ_ = _РіЌ_ ­ЮЋЂ­ЮЋІ


 open ╬▒-definitions ­ЮЊБ R ­ЮЊљ

 module _ {X : Type}
          {Y : X Рєњ Type}
          (╬х : JT X)
          (╬┤ : (x : X) Рєњ JT (Y x))
          (q : (╬Б x ЖъЅ X , Y x) Рєњ R)
       where

  private
   f : (x : X) Рєњ T (Y x)
   f x = ╬┤ x (╬╗ y Рєњ ╬▒ (extрхђ (╬ирхђ Рѕў q) (╬ирхђ (x , y))))

   g : (x : X) Рєњ T (╬Б x ЖъЅ X , Y x)
   g x = extрхђ (╬╗ y Рєњ ╬ирхђ (x , y)) (f x)

   h : T X
   h = ╬х (╬╗ x Рєњ ╬▒ (extрхђ (╬ирхђ Рѕў q) (g x)))

  РіЌр┤Хрхђ-explicitly : (╬х РіЌр┤Хрхђ ╬┤) q №╝Ю extрхђ g h
  РіЌр┤Хрхђ-explicitly = refl

  ╬й : (x : X) Рєњ T (Y x)
  ╬й x = ╬┤ x (curry q x)

  ¤ё : T X
  ¤ё = ╬х (╬╗ x Рєњ ╬▒-extрхђ (curry q x) (╬й x))

  module _ (fe : funextРѓђ) where

  private
   lemma-f : funextРѓђ Рєњ f Рѕ╝ ╬й
   lemma-f fe x =
    ╬┤ x (╬╗ y Рєњ ╬▒ (extрхђ (╬ирхђ Рѕў q) (╬ирхђ (x , y)))) №╝ЮРЪе I РЪЕ
    ╬┤ x (╬╗ y Рєњ ╬▒ (╬ирхђ (q (x , y))))             №╝ЮРЪе II РЪЕ
    ╬┤ x (curry q x)                            Рѕј
     where
      I = ap (╬╗ - Рєњ ╬┤ x (╬╗ y Рєњ ╬▒ (- y))) (dfunext fe (╬╗ y Рєњ unitрхђ (╬ирхђ Рѕў q) (x , y)))
      II = ap (╬┤ x) (dfunext fe (╬╗ y Рєњ ╬▒-unitрхђ (q (x , y))))

   lemma-g : funextРѓђ Рєњ g Рѕ╝ (╬╗ x Рєњ extрхђ (╬╗ y Рєњ ╬ирхђ (x , y)) (╬й x))
   lemma-g fe x = ap (extрхђ (╬╗ y Рєњ ╬ирхђ (x , y))) (lemma-f fe x)

   lemma-h : funextРѓђ Рєњ h №╝Ю ¤ё
   lemma-h fe =
    h                                                             №╝ЮРЪе refl РЪЕ
    ╬х (╬╗ x Рєњ ╬▒ (extрхђ (╬ирхђ Рѕў q) (g x)))                             №╝ЮРЪе I РЪЕ
    ╬х (╬╗ x Рєњ ╬▒ (extрхђ (╬ирхђ Рѕў q) (extрхђ (╬╗ y Рєњ ╬ирхђ (x , y)) (╬й x))))   №╝ЮРЪе II РЪЕ
    ╬х (╬╗ x Рєњ ╬▒ (extрхђ (extрхђ (╬ирхђ Рѕў q) Рѕў (╬╗ y Рєњ ╬ирхђ (x , y))) (╬й x))) №╝ЮРЪе refl РЪЕ
    ╬х (╬╗ x Рєњ ╬▒ (extрхђ (╬╗ y Рєњ extрхђ (╬ирхђ Рѕў q) (╬ирхђ (x , y))) (╬й x)))   №╝ЮРЪе III РЪЕ
    ╬х (╬╗ x Рєњ ╬▒ (extрхђ (╬╗ y Рєњ ╬ирхђ (q (x , y))) (╬й x)))               №╝ЮРЪе refl РЪЕ
    ╬х (╬╗ x Рєњ ╬▒-extрхђ (curry q x) (╬й x))                            №╝ЮРЪе refl РЪЕ
    ¤ё Рѕј
     where
      I   = ap (╬╗ - Рєњ ╬х (╬╗ x Рєњ ╬▒ (extрхђ (╬ирхђ Рѕў q) (- x))))
               (dfunext fe (lemma-g fe))
      II  = ap (╬╗ - Рєњ ╬х (╬╗ x Рєњ ╬▒ (- x)))
               (dfunext fe (╬╗ x Рєњ (assocрхђ (╬ирхђ Рѕў q) (╬╗ y Рєњ ╬ирхђ (x , y)) (╬й x))РЂ╗┬╣))
      III = ap (╬╗ - Рєњ ╬х (╬╗ x Рєњ ╬▒ (extрхђ (╬╗ y Рєњ - (x , y)) (╬й x))))
               (dfunext fe (unitрхђ (╬ирхђ Рѕў q)))

  РіЌр┤Хрхђ-in-terms-of-РіЌрхђ : funextРѓђ Рєњ (╬х РіЌр┤Хрхђ ╬┤) q №╝Ю ¤ё РіЌрхђ ╬й
  РіЌр┤Хрхђ-in-terms-of-РіЌрхђ fe =
   (╬х РіЌр┤Хрхђ ╬┤) q                                  №╝ЮРЪе РіЌр┤Хрхђ-explicitly РЪЕ
   extрхђ g h                                     №╝ЮРЪе I РЪЕ
   extрхђ g ¤ё                                     №╝ЮРЪе II РЪЕ
   extрхђ (╬╗ x Рєњ extрхђ (╬╗ y Рєњ ╬ирхђ (x , y)) (╬й x)) ¤ё №╝ЮРЪе refl РЪЕ
   ¤ё РіЌрхђ ╬й                                       Рѕј
    where
     I  = ap (extрхђ g) (lemma-h fe)
     II = ap (╬╗ - Рєњ extрхђ - ¤ё) (dfunext fe (lemma-g fe))

\end{code}
