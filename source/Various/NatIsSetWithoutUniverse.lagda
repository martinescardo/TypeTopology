Evan Cavallo, 2nd July 2025, updated 3rd July 2025.

A proof that the natural numbers form a set that does not use a universe, in
response to a question asked by Na√Øm Favier on Mastodon:

 https://types.pl/@ncf/114779291760324789
 https://mathstodon.xyz/@ecavallo/114780841234656632

In Martin-L√∂f type theory without a universe or large elimination from ‚Ñï, it is
impossible to prove that 0 ‚â† 1:

 Jan M. Smith. The independence of Peano's fourth axiom from Martin-L√∂f's type
 theory without universes. The Journal of Symbolic Logic, Volume 53, Issue 3,
 September 1988, pp. 840‚Äì845. doi:10.2307/2274575.
 https://www.cse.chalmers.se/~smith/JSLPeano.pdf

Thus, we cannot take the usual route of showing that ‚Ñï has decidable equality
and then applying Hedberg's theorem.

There are multiple proofs of the same result in this file: the first one is the
original, and the others are subsequent simplifications. At the end, there is
also a proof that if A is a set then List A is a set.

\begin{code}

{-# OPTIONS --safe --without-K #-}

open import MLTT.Id
open import MLTT.NaturalNumbers
open import MLTT.Pi
open import MLTT.Plus
open import MLTT.Sigma
open import MLTT.List
open import UF.Base using (ap‚ÇÇ)
open import UF.Hedberg
open import UF.Sets using (is-set)
open import UF.Subsingletons using (is-prop)
open import UF.Subsingletons-Properties using (props-are-sets)
open import Naturals.Properties using (pred)

module Various.NatIsSetWithoutUniverse where

\end{code}

First we show that if 0 Ôºù succ n for some n : ‚Ñï, then ‚Ñï is an h-proposition.
This will be used in all the proofs.

\begin{code}

[0Ôºùsucc]-implies-‚Ñï-is-prop : {n : ‚Ñï} ‚Üí 0 Ôºù succ n ‚Üí is-prop ‚Ñï
[0Ôºùsucc]-implies-‚Ñï-is-prop eq m k = ap distinguish eq
 where
  distinguish : ‚Ñï ‚Üí ‚Ñï
  distinguish 0 = m
  distinguish (succ _) = k

\end{code}

For the first proof we follow the standard proof that ‚Ñï is a set from Hedberg's
theorem, but we use is-prop ‚Ñï as a substitute for the empty type. This proof
strategy is inspired by Friedman's A-translation (or "Friedman's trick") from

 Harvey Friedman. Classically and intuitionistically provably recursive functions.
 In: Higher Set Theory. Lecture Notes in Mathematics, Volume 669, 1978, pp 21‚Äì27,
 doi:10.1007/BFb0103100.

Another option would be to use 0 Ôºù 1 instead of is-prop ‚Ñï.

We can't show that ‚Ñï has decidable equality, but we can show that any m,n : ‚Ñï
are either equal or their equality would imply that ‚Ñï is a proposition (thus
contractible):

\begin{code}

‚Ñï-Ôºù-holds-or-makes-‚Ñï-prop
 : (m n : ‚Ñï) ‚Üí (m Ôºù n) + ((m Ôºù n) ‚Üí is-prop ‚Ñï)
‚Ñï-Ôºù-holds-or-makes-‚Ñï-prop zero zero =
 inl refl
‚Ñï-Ôºù-holds-or-makes-‚Ñï-prop zero (succ n) =
 inr [0Ôºùsucc]-implies-‚Ñï-is-prop
‚Ñï-Ôºù-holds-or-makes-‚Ñï-prop (succ m) zero =
 inr ([0Ôºùsucc]-implies-‚Ñï-is-prop ‚àò _‚Åª¬π)
‚Ñï-Ôºù-holds-or-makes-‚Ñï-prop (succ m) (succ n) =
 bump (‚Ñï-Ôºù-holds-or-makes-‚Ñï-prop m n)
 where
  bump : ((m Ôºù n) + ((m Ôºù n) ‚Üí is-prop ‚Ñï))
       ‚Üí (succ m Ôºù succ n) + ((succ m Ôºù succ n) ‚Üí is-prop ‚Ñï)
  bump (inl eq) = inl (ap succ eq)
  bump (inr neq) = inr (neq ‚àò ap pred)

\end{code}

From this decision procedure we derive double "negation" elimination for
equality in ‚Ñï in the usual way. Here, we need that our "empty type" is-prop ‚Ñï
implies whatever equality in ‚Ñï we need.

\begin{code}

‚Ñï-Ôºù-double-[to-is-prop]-elim-helper
 : (m n : ‚Ñï)
 ‚Üí ((m Ôºù n) + ((m Ôºù n) ‚Üí is-prop ‚Ñï))
 ‚Üí (((m Ôºù n) ‚Üí is-prop ‚Ñï) ‚Üí is-prop ‚Ñï) ‚Üí m Ôºù n
‚Ñï-Ôºù-double-[to-is-prop]-elim-helper m n (inl eq) _ = eq
‚Ñï-Ôºù-double-[to-is-prop]-elim-helper m n (inr neq) nneq = nneq neq m n

‚Ñï-Ôºù-double-[to-is-prop]-elim
 : (m n : ‚Ñï) ‚Üí (((m Ôºù n) ‚Üí is-prop ‚Ñï) ‚Üí is-prop ‚Ñï) ‚Üí m Ôºù n
‚Ñï-Ôºù-double-[to-is-prop]-elim m n =
 ‚Ñï-Ôºù-double-[to-is-prop]-elim-helper m n (‚Ñï-Ôºù-holds-or-makes-‚Ñï-prop m n)

\end{code}

To apply a Hedberg-like argument, we will also need to know that double
"negation" elimination is weakly constant. Here, we need that our "empty type"
is-prop ‚Ñï implies that all elements of identity types in ‚Ñï are equal (i.e., ‚Ñï is
a set).

If we assumed function extensionality, ((m Ôºù n) ‚Üí is-prop ‚Ñï) ‚Üí is-prop ‚Ñï) would
be a proposition and this would be immediate.

\begin{code}

‚Ñï-Ôºù-double-[to-is-prop]-elim-is-wconstant
 : (m n : ‚Ñï) ‚Üí wconstant (‚Ñï-Ôºù-double-[to-is-prop]-elim m n)
‚Ñï-Ôºù-double-[to-is-prop]-elim-is-wconstant m n =
 ‚Ñï-Ôºù-double-[to-is-prop]-elim-helper-is-wconstant
  (‚Ñï-Ôºù-holds-or-makes-‚Ñï-prop m n)
 where
  ‚Ñï-Ôºù-double-[to-is-prop]-elim-helper-is-wconstant
   : (dec : (m Ôºù n) + ((m Ôºù n) ‚Üí is-prop ‚Ñï))
   ‚Üí wconstant (‚Ñï-Ôºù-double-[to-is-prop]-elim-helper m n dec)
  ‚Ñï-Ôºù-double-[to-is-prop]-elim-helper-is-wconstant (inl eq) _ _ =
   refl
  ‚Ñï-Ôºù-double-[to-is-prop]-elim-helper-is-wconstant (inr neq) nneq _ =
   props-are-sets (nneq neq) _ _

\end{code}

We can use the following variation on Hedberg's theorem to prove the main
result. (Although the type signature involves two universes, we use these
hypotheses only as types / type families.)

\begin{code}

reflexive-relation-that-wconstantly-implies-equality-gives-set
 : {X : ùì§ Ãá }
 ‚Üí (_R_ : X ‚Üí X ‚Üí ùì• Ãá )
 ‚Üí ((x : X) ‚Üí x R x)
 ‚Üí (e : (x y : X) ‚Üí x R y ‚Üí x Ôºù y)
 ‚Üí ((x y : X) ‚Üí wconstant (e x y))
 ‚Üí is-set X
reflexive-relation-that-wconstantly-implies-equality-gives-set
 {ùì§} {ùì•} {X} _R_ r e ec = Œ≥
 where
  f : {x y :  X} ‚Üí x Ôºù y ‚Üí x Ôºù y
  f {x} {y} p = e x y (transport (x R_) p (r x))

  Œ∫ : {x y : X} ‚Üí wconstant (f {x} {y})
  Œ∫ p q = ec _ _ _ _

  Œ≥ : is-set X
  Œ≥ = Id-collapsibles-are-sets (f , Œ∫)

‚Ñï-is-set-without-universe : is-set ‚Ñï
‚Ñï-is-set-without-universe =
 reflexive-relation-that-wconstantly-implies-equality-gives-set
  (Œª m n ‚Üí ((m Ôºù n) ‚Üí is-prop ‚Ñï) ‚Üí is-prop ‚Ñï)
  (Œª n neq ‚Üí neq refl)
  ‚Ñï-Ôºù-double-[to-is-prop]-elim
  ‚Ñï-Ôºù-double-[to-is-prop]-elim-is-wconstant

\end{code}

The above proof can be shortened if we inline the Hedberg lemma. Upon inlining,
we see that "f" in the lemma above uses the transport in the family

  n : ‚Ñï ‚ä¢ ((m Ôºù n) ‚Üí is-prop ‚Ñï) ‚Üí is-prop ‚Ñï

of

  (Œª neq ‚Üí neq refl) : ((m Ôºù m) ‚Üí is-prop ‚Ñï) ‚Üí is-prop ‚Ñï

along some p : m Ôºù n. Using the usual simplifications of transport in function
and identity types, the result is equal to (Œª neq ‚Üí neq p). Making that
substitution, we have:

\begin{code}

‚Ñï-is-set-without-universe' : is-set ‚Ñï
‚Ñï-is-set-without-universe' =
  Id-collapsibles-are-sets
   ( (Œª p ‚Üí ‚Ñï-Ôºù-double-[to-is-prop]-elim _ _ (Œª neq ‚Üí neq p))
   , (Œª p q ‚Üí ‚Ñï-Ôºù-double-[to-is-prop]-elim-is-wconstant _ _ _ _)
   )

\end{code}

Added by Evan Cavallo, 3rd July 2025.

We can give a significantly simpler proof that ‚Ñï is a set by proving that ‚Ñï's
identity types are collapsible directly by induction, rather going through a
"decision" procedure first.

Beware that Agda's coverage checker would let us leave out the "impossible"
cases of these inductions, but those omissions are not justified in MLTT without
a universe!

\begin{code}

‚Ñï-Ôºù-collapse : (m n : ‚Ñï) ‚Üí m Ôºù n ‚Üí m Ôºù n
‚Ñï-Ôºù-collapse zero zero _ = refl
‚Ñï-Ôºù-collapse zero (succ n) p = [0Ôºùsucc]-implies-‚Ñï-is-prop p _ _
‚Ñï-Ôºù-collapse (succ m) zero p = [0Ôºùsucc]-implies-‚Ñï-is-prop (p ‚Åª¬π) _ _
‚Ñï-Ôºù-collapse (succ m) (succ n) p = ap succ (‚Ñï-Ôºù-collapse m n (ap pred p))

‚Ñï-Ôºù-collapse-is-wconstant : (m n : ‚Ñï) ‚Üí wconstant (‚Ñï-Ôºù-collapse m n)
‚Ñï-Ôºù-collapse-is-wconstant zero zero _ _ = refl
‚Ñï-Ôºù-collapse-is-wconstant zero (succ n) p _  =
 props-are-sets ([0Ôºùsucc]-implies-‚Ñï-is-prop p) _ _
‚Ñï-Ôºù-collapse-is-wconstant (succ m) zero p _ =
 props-are-sets ([0Ôºùsucc]-implies-‚Ñï-is-prop (p ‚Åª¬π)) _ _
‚Ñï-Ôºù-collapse-is-wconstant (succ m) (succ n) p q =
 ap (ap succ) (‚Ñï-Ôºù-collapse-is-wconstant m n (ap pred p) (ap pred q))

‚Ñï-is-Id-collapsible : Id-collapsible ‚Ñï
‚Ñï-is-Id-collapsible = (‚Ñï-Ôºù-collapse _ _ , ‚Ñï-Ôºù-collapse-is-wconstant _ _)

‚Ñï-is-set-without-universe'' : is-set ‚Ñï
‚Ñï-is-set-without-universe'' = Id-collapsibles-are-sets ‚Ñï-is-Id-collapsible

\end{code}

An advantage of the preceding proof is that we can apply the same argument to
types that we don't expect to have decidable equality (even with a universe).
For example, we can show that if A is a set then List A is a set:

\begin{code}

module _ {A : ùì§ Ãá } (setA : is-set A) where

 [nilÔºùcons]-implies-List-is-prop
  : {x : A} {xs : List A} ‚Üí [] Ôºù x ‚à∑ xs ‚Üí is-prop (List A)
 [nilÔºùcons]-implies-List-is-prop p ys zs = ap distinguish p
  where
   distinguish : List A ‚Üí List A
   distinguish [] = ys
   distinguish (_ ‚à∑ _) = zs

 safe-head : A ‚Üí List A ‚Üí A
 safe-head a [] = a
 safe-head a (x ‚à∑ xs) = x

 tail : List A ‚Üí List A
 tail [] = []
 tail (x ‚à∑ xs) = xs

 List-Ôºù-collapse : (xs ys : List A) ‚Üí xs Ôºù ys ‚Üí xs Ôºù ys
 List-Ôºù-collapse [] [] p = refl
 List-Ôºù-collapse [] (y ‚à∑ ys) p = [nilÔºùcons]-implies-List-is-prop p _ _
 List-Ôºù-collapse (x ‚à∑ xs) [] p = [nilÔºùcons]-implies-List-is-prop (p ‚Åª¬π) _ _
 List-Ôºù-collapse (x ‚à∑ xs) (y ‚à∑ ys) p =
  ap‚ÇÇ _‚à∑_ (ap (safe-head x) p) (List-Ôºù-collapse xs ys (ap tail p))

 List-Ôºù-collapse-is-wconstant
  : (xs ys : List A) ‚Üí wconstant (List-Ôºù-collapse xs ys)
 List-Ôºù-collapse-is-wconstant [] [] p q = refl
 List-Ôºù-collapse-is-wconstant [] (y ‚à∑ ys) p q =
  props-are-sets ([nilÔºùcons]-implies-List-is-prop p) _ _
 List-Ôºù-collapse-is-wconstant (x ‚à∑ xs) [] p q =
  props-are-sets ([nilÔºùcons]-implies-List-is-prop (p ‚Åª¬π)) _ _
 List-Ôºù-collapse-is-wconstant (x ‚à∑ xs) (y ‚à∑ ys) p q =
   ap‚ÇÇ
    (ap‚ÇÇ _‚à∑_)
    (setA _ _)
    (List-Ôºù-collapse-is-wconstant xs ys (ap tail p) (ap tail q))

 List-is-Id-collapsible : Id-collapsible (List A)
 List-is-Id-collapsible = (List-Ôºù-collapse _ _ , List-Ôºù-collapse-is-wconstant _ _)

 List-is-set-without-universe : is-set (List A)
 List-is-set-without-universe =
  Id-collapsibles-are-sets List-is-Id-collapsible

\end{code}
