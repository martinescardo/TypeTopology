---
title:       Distributive lattices
author:      Ayberk Tosun
start-date:  2024-02-14
---

\begin{code}

{-# OPTIONS --safe --without-K #-}

open import UF.FunExt
open import UF.PropTrunc
open import UF.Sets

module Locales.DistributiveLattice.Definition
        (fe : Fun-Ext)
        (pt : propositional-truncations-exist)
       where

open import Locales.Frame pt fe
open import MLTT.Spartan
open import UF.Base
open import UF.Logic
open import UF.Powerset-MultiUniverse
open import UF.SubtypeClassifier

open Implication fe

\end{code}

In the future, equivalent definitions of the notion of distributive lattice
will be added to this module.

\begin{code}

record DistributiveLattice (ùì§ : Universe) : ùì§ ‚Å∫  Ãá where
 field
  X   : ùì§  Ãá
  ùüè   : X
  ùüé   : X
  _‚àß_ : X ‚Üí X ‚Üí X
  _‚à®_ : X ‚Üí X ‚Üí X

 field
  X-is-set      : is-set X

  ‚àß-associative : (x y z : X) ‚Üí x ‚àß (y ‚àß z) Ôºù (x ‚àß y) ‚àß z
  ‚àß-commutative : (x y   : X) ‚Üí x ‚àß y Ôºù y ‚àß x
  ‚àß-unit        : (x     : X) ‚Üí x ‚àß ùüè Ôºù x
  ‚àß-idempotent  : (x     : X) ‚Üí x ‚àß x Ôºù x
  ‚àß-absorptive  : (x y   : X) ‚Üí x ‚àß (x ‚à® y) Ôºù x

  ‚à®-associative : (x y z : X) ‚Üí x ‚à® (y ‚à® z) Ôºù (x ‚à® y) ‚à® z
  ‚à®-commutative : (x y   : X) ‚Üí x ‚à® y Ôºù y ‚à® x
  ‚à®-unit        : (x     : X) ‚Üí x ‚à® ùüé Ôºù x
  ‚à®-idempotent  : (x     : X) ‚Üí x ‚à® x Ôºù x
  ‚à®-absorptive  : (x y   : X) ‚Üí x ‚à® (x ‚àß y) Ôºù x

  distributivity·µà : (x y z : X) ‚Üí x ‚àß (y ‚à® z) Ôºù (x ‚àß y) ‚à® (x ‚àß z)

 _‚â§_ : X ‚Üí X ‚Üí Œ© ùì§
 x ‚â§ y = (x ‚àß y Ôºù x) , X-is-set

 ‚àß-is-a-lower-bound‚ÇÅ : (x y : X) ‚Üí ((x ‚àß y) ‚â§ x) holds
 ‚àß-is-a-lower-bound‚ÇÅ x y = (x ‚àß y) ‚àß x   Ôºù‚ü® ‚Ö† ‚ü©
                           (y ‚àß x) ‚àß x   Ôºù‚ü® ‚Ö° ‚ü©
                           y ‚àß (x ‚àß x)   Ôºù‚ü® ‚Ö¢ ‚ü©
                           y ‚àß x         Ôºù‚ü® ‚Ö£ ‚ü©
                           x ‚àß y          ‚àé
                            where
                             ‚Ö† = ap (_‚àß x) (‚àß-commutative x y)
                             ‚Ö° = ‚àß-associative y x x ‚Åª¬π
                             ‚Ö¢ = ap (y ‚àß_) (‚àß-idempotent x)
                             ‚Ö£ = ‚àß-commutative y x

 ‚àß-is-a-lower-bound‚ÇÇ : (x y : X) ‚Üí ((x ‚àß y) ‚â§ y) holds
 ‚àß-is-a-lower-bound‚ÇÇ x y = (x ‚àß y) ‚àß y Ôºù‚ü® ‚Ö† ‚ü©
                           x ‚àß (y ‚àß y) Ôºù‚ü® ‚Ö° ‚ü©
                           x ‚àß y ‚àé
                            where
                             ‚Ö† = ‚àß-associative x y y ‚Åª¬π
                             ‚Ö° = ap (x ‚àß_) (‚àß-idempotent y)

 distributivity·µà‚ÇÅ : (x y z : X) ‚Üí (y ‚à® z) ‚àß x Ôºù (y ‚àß x) ‚à® (z ‚àß x)
 distributivity·µà‚ÇÅ x y z = (y ‚à® z) ‚àß x         Ôºù‚ü® ‚Ö† ‚ü©
                          x ‚àß (y ‚à® z)         Ôºù‚ü® ‚Ö° ‚ü©
                          (x ‚àß y) ‚à® (x ‚àß z)   Ôºù‚ü® ‚Ö¢ ‚ü©
                          (y ‚àß x) ‚à® (x ‚àß z)   Ôºù‚ü® ‚Ö£ ‚ü©
                          (y ‚àß x) ‚à® (z ‚àß x)   ‚àé
                           where
                            ‚Ö† = ‚àß-commutative (y ‚à® z) x
                            ‚Ö° = distributivity·µà x y z
                            ‚Ö¢ = ap (_‚à® (x ‚àß z)) (‚àß-commutative x y)
                            ‚Ö£ = ap ((y ‚àß x) ‚à®_) (‚àß-commutative x z)

 ‚àß-absorptive‚ÇÅ : (x y : X) ‚Üí x ‚àß (y ‚à® x) Ôºù x
 ‚àß-absorptive‚ÇÅ x y = x ‚àß (y ‚à® x) Ôºù‚ü® ap (x ‚àß_) (‚à®-commutative y x) ‚ü©
                     x ‚àß (x ‚à® y) Ôºù‚ü® ‚àß-absorptive x y              ‚ü©
                     x           ‚àé

 ‚àß-absorptive‚ÇÉ : (x y : X) ‚Üí (y ‚à® x) ‚àß x Ôºù x
 ‚àß-absorptive‚ÇÉ x y = (y ‚à® x) ‚àß x Ôºù‚ü® ‚àß-commutative (y ‚à® x) x ‚ü©
                     x ‚àß (y ‚à® x) Ôºù‚ü® ‚àß-absorptive‚ÇÅ x y ‚ü©
                     x           ‚àé

 ‚à®-absorptive‚ÇÅ : (x y : X) ‚Üí (x ‚àß y) ‚à® x Ôºù x
 ‚à®-absorptive‚ÇÅ x y = (x ‚àß y) ‚à® x Ôºù‚ü® ‚à®-commutative (x ‚àß y) x ‚ü©
                     x ‚à® (x ‚àß y) Ôºù‚ü® ‚à®-absorptive x y        ‚ü©
                     x           ‚àé

 ‚à®-absorptive‚ÇÇ : (x y : X) ‚Üí (y ‚àß x) ‚à® x Ôºù x
 ‚à®-absorptive‚ÇÇ x y = (y ‚àß x) ‚à® x Ôºù‚ü® ‚Ö† ‚ü©
                     (x ‚àß y) ‚à® x Ôºù‚ü® ‚Ö° ‚ü©
                     x           ‚àé
                      where
                       ‚Ö† = ap (_‚à® x) (‚àß-commutative y x)
                       ‚Ö° = ‚à®-absorptive‚ÇÅ x y

 ‚à®-absorptive‚ÇÉ : (x y : X) ‚Üí x ‚à® (y ‚àß x) Ôºù x
 ‚à®-absorptive‚ÇÉ x y = x ‚à® (y ‚àß x)   Ôºù‚ü® ‚à®-commutative x (y ‚àß x) ‚ü©
                     (y ‚àß x) ‚à® x   Ôºù‚ü® ‚à®-absorptive‚ÇÇ x y       ‚ü©
                     x             ‚àé

 distributivity-op : (x y z : X) ‚Üí x ‚à® (y ‚àß z) Ôºù (x ‚à® y) ‚àß (x ‚à® z)
 distributivity-op x y z =
  x ‚à® (y ‚àß z)                      Ôºù‚ü® ‚Ö† ‚ü©
  x ‚à® ((z ‚àß y) ‚à® (z ‚àß x))          Ôºù‚ü® ‚Ö° ‚ü©
  ((x ‚à® y) ‚àß z) ‚à® ((x ‚à® y) ‚àß z)    Ôºù‚ü® ‚Ö¢ ‚ü©
  (x ‚à® y) ‚àß (x ‚à® z)                ‚àé
   where
    p = ap (_‚à® (y ‚àß z)) (‚à®-absorptive‚ÇÉ x z ‚Åª¬π)
    q = ap ((x ‚à® (z ‚àß x)) ‚à®_) (‚àß-commutative y z)
    r = ‚à®-associative x (z ‚àß x) (z ‚àß y) ‚Åª¬π
    s = ap (x ‚à®_) (‚à®-commutative (z ‚àß x) (z ‚àß y))

    ‚Ö† = x ‚à® (y ‚àß z)               Ôºù‚ü® p ‚ü©
        (x ‚à® (z ‚àß x)) ‚à® (y ‚àß z)   Ôºù‚ü® q ‚ü©
        (x ‚à® (z ‚àß x)) ‚à® (z ‚àß y)   Ôºù‚ü® r ‚ü©
        x ‚à® ((z ‚àß x) ‚à® (z ‚àß y))   Ôºù‚ü® s ‚ü©
        x ‚à® ((z ‚àß y) ‚à® (z ‚àß x))   ‚àé
    ‚Ö° = x ‚à® ((z ‚àß y) ‚à® (z ‚àß x))       Ôºù‚ü® {!!} ‚ü©
        x ‚à® (z ‚àß (y ‚à® x))             Ôºù‚ü® {!!} ‚ü©
        ((x ‚à® y) ‚àß z) ‚à® ((x ‚à® y) ‚àß z) ‚àé
    ‚Ö¢ = {!!}

\end{code}

\begin{code}

‚à£_‚à£·µà : DistributiveLattice ùì§ ‚Üí ùì§  Ãá
‚à£_‚à£·µà L = let open DistributiveLattice L in X

\end{code}

\begin{code}

order·µà : (L : DistributiveLattice ùì§)
       ‚Üí ‚à£ L ‚à£·µà ‚Üí ‚à£ L ‚à£·µà ‚Üí Œ© ùì§
order·µà L x y = (x ‚àß y Ôºù x) , X-is-set
 where
  open DistributiveLattice L

syntax order·µà L x y = x ‚â§·µà[ L ] y

‚â§·µà-is-reflexive : (L : DistributiveLattice ùì§) ‚Üí is-reflexive (order·µà L) holds
‚â§·µà-is-reflexive L = ‚àß-idempotent
 where
  open DistributiveLattice L

‚â§·µà-is-transitive : (L : DistributiveLattice ùì§) ‚Üí is-transitive (order·µà L) holds
‚â§·µà-is-transitive L x y z p q =
 x ‚àß z         Ôºù‚ü® ‚Ö† ‚ü©
 (x ‚àß y) ‚àß z   Ôºù‚ü® ‚Ö° ‚ü©
 x ‚àß (y ‚àß z)   Ôºù‚ü® ‚Ö¢ ‚ü©
 x ‚àß y         Ôºù‚ü® ‚Ö£ ‚ü©
 x             ‚àé
  where
   open DistributiveLattice L

   ‚Ö† = ap (_‚àß z) (p ‚Åª¬π)
   ‚Ö° = ‚àß-associative x y z ‚Åª¬π
   ‚Ö¢ = ap (x ‚àß_) q
   ‚Ö£ = p

‚â§·µà-is-antisymmetric : (L : DistributiveLattice ùì§) ‚Üí is-antisymmetric (order·µà L)
‚â§·µà-is-antisymmetric L {x} {y} p q =
 x      Ôºù‚ü® ‚Ö† ‚ü©
 x ‚àß y  Ôºù‚ü® ‚Ö° ‚ü©
 y ‚àß x  Ôºù‚ü® ‚Ö¢ ‚ü©
 y      ‚àé
  where
   open DistributiveLattice L

   ‚Ö† = p ‚Åª¬π
   ‚Ö° = ‚àß-commutative x y
   ‚Ö¢ = q

order·µà-‚à® : (L : DistributiveLattice ùì§) ‚Üí ‚à£ L ‚à£·µà ‚Üí ‚à£ L ‚à£·µà ‚Üí Œ© ùì§
order·µà-‚à® L x y = (x ‚à® y Ôºù y) , X-is-set
 where
  open DistributiveLattice L

order·µà-‚à®-implies-order·µà : (L : DistributiveLattice ùì§) {x y : ‚à£ L ‚à£·µà}
                        ‚Üí (order·µà-‚à® L x y ‚áí order·µà L x y) holds
order·µà-‚à®-implies-order·µà L {x} {y} p =
 x ‚àß y Ôºù‚ü® ‚Ö† ‚ü© x ‚àß (x ‚à® y) Ôºù‚ü® ‚Ö° ‚ü© x ‚àé
  where
   open DistributiveLattice L

   ‚Ö† = ap (x ‚àß_) p ‚Åª¬π
   ‚Ö° = ‚àß-absorptive x y

order·µà-implies-order·µà-‚à® : (L : DistributiveLattice ùì§) {x y : ‚à£ L ‚à£·µà}
                        ‚Üí (order·µà L x y ‚áí order·µà-‚à® L x y) holds
order·µà-implies-order·µà-‚à® L {x} {y} p =
 x ‚à® y       Ôºù‚ü® ‚Ö†                ‚ü©
 y ‚à® x       Ôºù‚ü® ‚Ö°                ‚ü©
 y ‚à® (x ‚àß y) Ôºù‚ü® ‚Ö¢                ‚ü©
 y ‚à® (y ‚àß x) Ôºù‚ü® ‚à®-absorptive y x ‚ü©
 y           ‚àé
  where
   open DistributiveLattice L

   ‚Ö† = ‚à®-commutative x y
   ‚Ö° = ap (y ‚à®_) (p ‚Åª¬π)
   ‚Ö¢ = ap (y ‚à®_) (‚àß-commutative x y)

\end{code}

\begin{code}

poset-of·µà : DistributiveLattice ùì§ ‚Üí Poset ùì§ ùì§
poset-of·µà L = ‚à£ L ‚à£·µà
            , order·µà L
            , (‚â§·µà-is-reflexive L , ‚â§·µà-is-transitive L)
            , ‚â§·µà-is-antisymmetric L
 where
  open DistributiveLattice L

\end{code}

\begin{code}

module _ (L : DistributiveLattice ùì§) where

 open DistributiveLattice L
 open Meets (order·µà L)

 ‚àß-is-greatest : (x y z : ‚à£ L ‚à£·µà)
               ‚Üí (z is-a-lower-bound-of (x , y) ‚áí z ‚â§ (x ‚àß y)) holds
 ‚àß-is-greatest x y z (p‚ÇÅ , p‚ÇÇ) = ‚Ä†
  where
   p‚ÇÅ‚Ä≤ : z ‚à® x Ôºù x
   p‚ÇÅ‚Ä≤ = order·µà-implies-order·µà-‚à® L p‚ÇÅ

   p‚ÇÇ‚Ä≤ : z ‚à® y Ôºù y
   p‚ÇÇ‚Ä≤ = order·µà-implies-order·µà-‚à® L p‚ÇÇ

   ‚Ä† : order·µà L z (x ‚àß y) holds
   ‚Ä† = z ‚àß (x ‚àß y)                   Ôºù‚ü® ‚Ö† ‚ü©
       z ‚àß ((z ‚à® x) ‚àß y)             Ôºù‚ü® ‚Ö° ‚ü©
       z ‚àß ((z ‚àß y) ‚à® (x ‚àß y))       Ôºù‚ü® ‚Ö¢ ‚ü©
       (z ‚àß (z ‚àß y)) ‚à® (z ‚àß (x ‚àß y)) Ôºù‚ü® {!!} ‚ü©
       z ‚à® (z ‚àß y)                   Ôºù‚ü® ‚Ö£ ‚ü©
       z                             ‚àé
        where
         ‚Ö† = ap (Œª - ‚Üí z ‚àß (- ‚àß y)) (p‚ÇÅ‚Ä≤ ‚Åª¬π)
         ‚Ö° = ap (z ‚àß_) (distributivity·µà‚ÇÅ y z x)
         ‚Ö¢ = distributivity·µà z (z ‚àß y) (x ‚àß y)
         -- ‚Ö¢ = ap (_‚à® (z ‚àß y)) (‚àß-absorptive z x)
         ‚Ö£ = ‚à®-absorptive z y

 ‚àß-is-glb : (x y : ‚à£ L ‚à£·µà) ‚Üí ((x ‚àß y) is-glb-of (x , y)) holds
 ‚àß-is-glb x y = (‚àß-is-a-lower-bound‚ÇÅ x y , ‚àß-is-a-lower-bound‚ÇÇ x y)
              , Œª (z , p) ‚Üí ‚àß-is-greatest x y z p

\end{code}
