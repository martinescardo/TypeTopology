Martin Escardo 11th September 2024

The type ‚Ñï‚Çã‚ÇÇ of integers ‚â• -2, used for truncation levels.

\begin{code}

{-# OPTIONS --safe --without-K #-}

module UF.TruncationLevels where

open import MLTT.Spartan hiding (_+_)
open import Naturals.Order
open import Notation.Order
open import Notation.Decimal

data ‚Ñï‚Çã‚ÇÇ : ùì§‚ÇÄ Ãá where
 ‚àí2   : ‚Ñï‚Çã‚ÇÇ
 succ : ‚Ñï‚Çã‚ÇÇ ‚Üí ‚Ñï‚Çã‚ÇÇ

‚àí1 : ‚Ñï‚Çã‚ÇÇ
‚àí1 = succ ‚àí2

\end{code}

Input "‚àí2" in the emacs mode as "\minus 2" (and not as "-2").  And
similarly for "‚àí1". The two different unicode minus symbols look the
same (good), but they are not the same (also good).

The following allows us to write e.g. 3 as an element of ‚Ñï‚Çã‚ÇÇ.

\begin{code}

‚Ñï-to-‚Ñï‚Çã‚ÇÇ : (n : ‚Ñï) {{_ : No-Constraint}} ‚Üí ‚Ñï‚Çã‚ÇÇ
‚Ñï-to-‚Ñï‚Çã‚ÇÇ 0              = succ ‚àí1
‚Ñï-to-‚Ñï‚Çã‚ÇÇ (succ n) {{c}} = succ (‚Ñï-to-‚Ñï‚Çã‚ÇÇ n {{c}})

instance
 Decimal-‚Ñï-to-‚Ñï‚Çã‚ÇÇ : Decimal ‚Ñï‚Çã‚ÇÇ
 Decimal-‚Ñï-to-‚Ñï‚Çã‚ÇÇ = make-decimal-with-no-constraint ‚Ñï-to-‚Ñï‚Çã‚ÇÇ

\end{code}

Examples.

\begin{code}

_ : ‚Ñï‚Çã‚ÇÇ
_ = 3

_ : succ (succ ‚àí2) Ôºù 0
_ = refl

_ : succ ‚àí2 Ôºù ‚àí1
_ = refl

\end{code}

Addition of a natural number to an integer ‚â• -2.

\begin{code}

_+_ : ‚Ñï‚Çã‚ÇÇ ‚Üí ‚Ñï ‚Üí ‚Ñï‚Çã‚ÇÇ
n + 0        = n
n + (succ m) = succ (n + m)

\end{code}

Order.

\begin{code}

_‚â§‚Ñï‚Çã‚ÇÇ_ : ‚Ñï‚Çã‚ÇÇ ‚Üí ‚Ñï‚Çã‚ÇÇ ‚Üí ùì§‚ÇÄ Ãá
‚àí2     ‚â§‚Ñï‚Çã‚ÇÇ n      = ùüô
succ m ‚â§‚Ñï‚Çã‚ÇÇ ‚àí2     = ùüò
succ m ‚â§‚Ñï‚Çã‚ÇÇ succ n = m ‚â§‚Ñï‚Çã‚ÇÇ n

instance
 Order-‚Ñï‚Çã‚ÇÇ-‚Ñï‚Çã‚ÇÇ : Order ‚Ñï‚Çã‚ÇÇ ‚Ñï‚Çã‚ÇÇ
 _‚â§_ {{Order-‚Ñï‚Çã‚ÇÇ-‚Ñï‚Çã‚ÇÇ}} = _‚â§‚Ñï‚Çã‚ÇÇ_

\end{code}

Added by Ian Ray 22nd September, 2024.

TODO: Show ‚Ñï‚Çã‚ÇÇ ‚âÉ ‚Ñï.

\begin{code}

‚Ñï‚Çã‚ÇÇ-to-‚Ñï : ‚Ñï‚Çã‚ÇÇ ‚Üí ‚Ñï
‚Ñï‚Çã‚ÇÇ-to-‚Ñï ‚àí2 = 0
‚Ñï‚Çã‚ÇÇ-to-‚Ñï (succ x) = succ (‚Ñï‚Çã‚ÇÇ-to-‚Ñï x)

‚Ñï‚Çã‚ÇÇ-to-‚Ñï' : ‚Ñï‚Çã‚ÇÇ ‚Üí ‚Ñï
‚Ñï‚Çã‚ÇÇ-to-‚Ñï' ‚àí2 = 0
‚Ñï‚Çã‚ÇÇ-to-‚Ñï' (succ ‚àí2) = 0
‚Ñï‚Çã‚ÇÇ-to-‚Ñï' (succ (succ ‚àí2)) = 0
‚Ñï‚Çã‚ÇÇ-to-‚Ñï' (succ (succ (succ x))) = succ (‚Ñï‚Çã‚ÇÇ-to-‚Ñï' (succ (succ x)))

‚Ñï‚Çã‚ÇÇ-to-‚Ñï'-is-identity : (m : ‚Ñï‚Çã‚ÇÇ) ‚Üí 0 ‚â§‚Ñï‚Çã‚ÇÇ m ‚Üí Œ£ n Íûâ ‚Ñï , ‚Ñï‚Çã‚ÇÇ-to-‚Ñï' m Ôºù n
‚Ñï‚Çã‚ÇÇ-to-‚Ñï'-is-identity (succ (succ m)) o = (‚Ñï‚Çã‚ÇÇ-to-‚Ñï' (succ (succ m)) , refl)

telescoping-+2 : (n : ‚Ñï‚Çã‚ÇÇ) ‚Üí (‚àí2 + ‚Ñï‚Çã‚ÇÇ-to-‚Ñï' (succ (succ n))) Ôºù n
telescoping-+2 ‚àí2 = refl
telescoping-+2 (succ n) = ap succ (telescoping-+2 n)

assoc-‚Ñï‚Çã‚ÇÇ-+1 : (m : ‚Ñï‚Çã‚ÇÇ) (n : ‚Ñï) ‚Üí succ m + n Ôºù succ(m + n)
assoc-‚Ñï‚Çã‚ÇÇ-+1 m zero = refl
assoc-‚Ñï‚Çã‚ÇÇ-+1 m (succ n) = ap succ (assoc-‚Ñï‚Çã‚ÇÇ-+1 m n)

subtraction-‚Ñï‚Çã‚ÇÇ : (m n : ‚Ñï‚Çã‚ÇÇ) ‚Üí m ‚â§‚Ñï‚Çã‚ÇÇ n ‚Üí Œ£ k Íûâ ‚Ñï , m + k Ôºù n
subtraction-‚Ñï‚Çã‚ÇÇ ‚àí2 n o = (‚Ñï‚Çã‚ÇÇ-to-‚Ñï' (n + 2) , telescoping-+2 n)
subtraction-‚Ñï‚Çã‚ÇÇ (succ m) (succ n) o = (k , p)
 where
  IH : Œ£ k Íûâ ‚Ñï , m + k Ôºù n
  IH = subtraction-‚Ñï‚Çã‚ÇÇ m n o
  k = pr‚ÇÅ IH
  q = pr‚ÇÇ IH 
  p : (succ m + k) Ôºù succ n
  p = succ m + k Ôºù‚ü® assoc-‚Ñï‚Çã‚ÇÇ-+1 m k ‚ü©
      succ(m + k)Ôºù‚ü® ap succ q ‚ü©
      succ n     ‚àé

\end{code}
