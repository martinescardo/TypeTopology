Andrew Sneap - 26th November 2021

\begin{code}

{-# OPTIONS --without-K --exact-split --safe #-}

open import SpartanMLTT renaming (_+_ to _‚àî_) --TypeTopology

open import DiscreteAndSeparated --TypeTopology
open import NaturalNumbers-Properties --TypeTopology
open import UF-Base hiding (_‚âà_)
open import UF-FunExt -- TypeTopology
open import UF-Miscelanea --TypeTopology
open import UF-Subsingletons --TypeTopology

open import HCF
open import IntegersAbs
open import IntegersB
open import IntegersMultiplication renaming (_*_ to _‚Ñ§*_)
open import IntegersNegation
open import IntegersOrder
open import NaturalsDivision
open import NaturalsMultiplication renaming (_*_ to _‚Ñï*_)
open import ncRationals

module Rationals where

‚Ñö : ùì§‚ÇÄ Ãá
‚Ñö = Œ£ q Íûâ ‚Ñö‚Çô , is-in-lowest-terms q

‚Ñö-is-discrete : Fun-Ext ‚Üí is-discrete ‚Ñö
‚Ñö-is-discrete fe = Œ£-is-discrete ‚Ñö‚Çô-is-discrete Œª q x y ‚Üí inl (is-in-lowest-terms-is-prop fe q x y)

‚Ñö-is-set : Fun-Ext ‚Üí is-set ‚Ñö
‚Ñö-is-set fe = discrete-types-are-sets (‚Ñö-is-discrete fe)

to‚Ñö‚Çô : ‚Ñö ‚Üí ‚Ñö‚Çô
to‚Ñö‚Çô (q , _) = q

\end{code}

I would like to rewrite this function to move h out of a sigma type (h = hcf' x (succ a))

\begin{code}
{-
to‚Ñö' : ‚Ñö‚Çô ‚Üí ‚Ñö
to‚Ñö' (x , a) = {!!}
-}
to‚Ñölemma : ((x , a) : ‚Ñö‚Çô) ‚Üí Œ£ ((x' , a') , p) Íûâ ‚Ñö , (Œ£ h Íûâ ‚Ñï , (x ‚â° (pos (succ h)) ‚Ñ§* x') √ó (succ a ‚â° (succ h) ‚Ñï* succ a'))
to‚Ñölemma (pos a , b) = f (divbyhcf a (succ b))
 where
  f : Œ£ h Íûâ ‚Ñï , Œ£ x Íûâ ‚Ñï , Œ£ y Íûâ ‚Ñï , ((h ‚Ñï* x ‚â° a) √ó (h ‚Ñï* y ‚â° succ b)) √ó coprime x y ‚Üí _
  f (h      , x , zero   , (Œ≥‚ÇÅ , Œ≥‚ÇÇ) , r) = ùüò-elim (positive-not-zero b (Œ≥‚ÇÇ ‚Åª¬π))
  f (0      , x , succ y , (Œ≥‚ÇÅ , Œ≥‚ÇÇ) , r) = ùüò-elim (positive-not-zero b (Œ≥‚ÇÇ ‚Åª¬π ‚àô zero-left-is-zero (succ y)))
  f (succ h , x , succ y , (Œ≥‚ÇÅ , Œ≥‚ÇÇ) , r) = (((pos x) , y) , r) , h , I , (Œ≥‚ÇÇ ‚Åª¬π)
   where
    I : pos a ‚â° pos (succ h) ‚Ñ§* pos x
    I = pos a                 ‚â°‚ü® ap pos Œ≥‚ÇÅ ‚Åª¬π                                 ‚ü©                               
        pos (succ h ‚Ñï* x)     ‚â°‚ü® pos-multiplication-equiv-to-‚Ñï (succ h) x ‚Åª¬π ‚ü©
        pos (succ h) ‚Ñ§* pos x ‚àé
to‚Ñölemma (negsucc a , b) = f (divbyhcf (succ a) (succ b))
 where
  f : ((Œ£ h Íûâ ‚Ñï , Œ£ x Íûâ ‚Ñï , Œ£ y Íûâ ‚Ñï , ((h ‚Ñï* x ‚â° (succ a)) √ó (h ‚Ñï* y ‚â° succ b)) √ó coprime x y)) ‚Üí _
  f (h      , x      , 0      , (Œ≥‚ÇÅ , Œ≥‚ÇÇ) , r) = ùüò-elim (positive-not-zero b (Œ≥‚ÇÇ ‚Åª¬π))
  f (h      , 0      , succ y , (Œ≥‚ÇÅ , Œ≥‚ÇÇ) , r) = ùüò-elim (positive-not-zero a (Œ≥‚ÇÅ ‚Åª¬π))
  f (0      , succ x , succ y , (Œ≥‚ÇÅ , Œ≥‚ÇÇ) , r) = ùüò-elim (positive-not-zero b (Œ≥‚ÇÇ ‚Åª¬π ‚àô zero-left-is-zero (succ y)))
  f (succ h , succ x , succ y , (Œ≥‚ÇÅ , Œ≥‚ÇÇ) , r) = (((negsucc x) , y) , r) , (h , (I , (Œ≥‚ÇÇ ‚Åª¬π)))
   where
    i : pos (succ a) ‚â° (pos (succ h) ‚Ñ§* pos (succ x))
    i = pos (succ a)                 ‚â°‚ü® ap pos Œ≥‚ÇÅ ‚Åª¬π                                        ‚ü©
        pos (succ h ‚Ñï* succ x)       ‚â°‚ü® pos-multiplication-equiv-to-‚Ñï (succ h) (succ x) ‚Åª¬π ‚ü©
        pos (succ h) ‚Ñ§* pos (succ x) ‚àé

    I : negsucc a ‚â° pos (succ h) ‚Ñ§* negsucc x
    I = negsucc a                          ‚â°‚ü® ap -_ i                                                     ‚ü©
        - (pos (succ h) ‚Ñ§* pos (succ x))   ‚â°‚ü® subtraction-dist-over-mult (pos (succ h)) (pos (succ x)) ‚Åª¬π ‚ü©
        pos (succ h) ‚Ñ§* (- pos (succ x))  ‚àé

to‚Ñö : ‚Ñö‚Çô ‚Üí ‚Ñö
to‚Ñö q = pr‚ÇÅ (to‚Ñölemma q)

0‚Ñö : ‚Ñö
0‚Ñö = to‚Ñö (pos 0 , 0)

1‚Ñö : ‚Ñö
1‚Ñö = to‚Ñö (pos 1 , 0)

-1‚Ñö : ‚Ñö
-1‚Ñö = to‚Ñö (negsucc 0 , 0)

1/3 2/3 : ‚Ñö
1/3 = to‚Ñö (pos 1 , 2)
2/3 = to‚Ñö (pos 2 , 2)

1/2 : ‚Ñö
1/2 = to‚Ñö (pos 1 , 1)

1/5 : ‚Ñö
1/5 = to‚Ñö (pos 1 , 4)

2/5 : ‚Ñö
2/5 = to‚Ñö (pos 2 , 4)

3/5 : ‚Ñö
3/5 = to‚Ñö (pos 3 , 4)

\end{code}
I would like to rewrite the following proof as it is difficult to follow, and having ‚áî introduces many projections later in the code.
\begin{code}

equiv-equality : Fun-Ext ‚Üí (p q : ‚Ñö‚Çô) ‚Üí p ‚âà q ‚áî to‚Ñö p ‚â° to‚Ñö q
equiv-equality fe (x , a) (y , b) = I , II
 where
  Œ± : Œ£ ((x' , a') , p) Íûâ ‚Ñö , Œ£ h Íûâ ‚Ñï , (x ‚â° (pos (succ h) ‚Ñ§* x')) √ó (succ a ‚â° succ h ‚Ñï* succ a')
  Œ± = to‚Ñölemma (x , a)

  Œ≤ : Œ£ ((y' , b') , p') Íûâ ‚Ñö , Œ£ h' Íûâ ‚Ñï , (y ‚â° (pos (succ h') ‚Ñ§* y')) √ó (succ b ‚â° succ h' ‚Ñï* succ b')
  Œ≤ = to‚Ñölemma (y , b)

  h h' : ‚Ñï
  h = pr‚ÇÅ (pr‚ÇÇ Œ±)
  h' = pr‚ÇÅ (pr‚ÇÇ Œ≤)

  a' b' : ‚Ñï
  a' = pr‚ÇÇ (pr‚ÇÅ (pr‚ÇÅ Œ±))
  b' = pr‚ÇÇ (pr‚ÇÅ (pr‚ÇÅ Œ≤))

  x' y' : ‚Ñ§
  x' = pr‚ÇÅ (pr‚ÇÅ (pr‚ÇÅ Œ±))
  y' = pr‚ÇÅ (pr‚ÇÅ (pr‚ÇÅ Œ≤))

  p : is-in-lowest-terms (x' , a')
  p = pr‚ÇÇ (pr‚ÇÅ Œ±)

  p' : is-in-lowest-terms (y' , b')
  p' = pr‚ÇÇ (pr‚ÇÅ Œ≤)

  Œ±‚Çö‚ÇÅ : x ‚â° pos (succ h) ‚Ñ§* x'
  Œ±‚Çö‚ÇÅ = pr‚ÇÅ (pr‚ÇÇ (pr‚ÇÇ Œ±))

  Œ±‚Çö‚ÇÇ : succ a ‚â° succ h ‚Ñï* succ a'
  Œ±‚Çö‚ÇÇ = pr‚ÇÇ (pr‚ÇÇ (pr‚ÇÇ Œ±))

  Œ±‚Çö‚ÇÇ' : pos (succ a) ‚â° pos (succ h) ‚Ñ§* pos (succ a')
  Œ±‚Çö‚ÇÇ' = pos (succ a)                  ‚â°‚ü® ap pos Œ±‚Çö‚ÇÇ ‚ü©
        pos (succ h ‚Ñï* succ a')       ‚â°‚ü® pos-multiplication-equiv-to-‚Ñï (succ h) (succ a') ‚Åª¬π ‚ü©
        pos (succ h) ‚Ñ§* pos (succ a') ‚àé

  Œ≤‚Çö‚ÇÅ : y ‚â° (pos (succ h') ‚Ñ§* y')
  Œ≤‚Çö‚ÇÅ = pr‚ÇÅ (pr‚ÇÇ (pr‚ÇÇ Œ≤))

  Œ≤‚Çö‚ÇÇ : succ b ‚â° succ h' ‚Ñï* succ b'
  Œ≤‚Çö‚ÇÇ = pr‚ÇÇ (pr‚ÇÇ (pr‚ÇÇ Œ≤))

  Œ≤‚Çö‚ÇÇ' : pos (succ b) ‚â° pos (succ h') ‚Ñ§* (pos (succ b'))
  Œ≤‚Çö‚ÇÇ' = pos (succ b)              ‚â°‚ü® ap pos Œ≤‚Çö‚ÇÇ ‚ü©
         pos (succ h' ‚Ñï* succ b') ‚â°‚ü® pos-multiplication-equiv-to-‚Ñï (succ h') (succ b') ‚Åª¬π ‚ü©
         pos (succ h') ‚Ñ§* pos (succ b') ‚àé

  I : (x , a) ‚âà (y , b) ‚Üí ((x' , a') , p) ‚â° ((y' , b') , p')
  I e = to-subtype-‚â° (Œª z ‚Üí is-in-lowest-terms-is-prop fe z) (equiv-with-lowest-terms-is-equal (x' , a') (y' , b') f p p')
   where
    f : x' ‚Ñ§* (pos (succ b')) ‚â° y' ‚Ñ§* (pos (succ a'))
    f = ‚Ñ§-mult-left-cancellable (x' ‚Ñ§* pos (succ b')) (y' ‚Ñ§* pos (succ a')) (pos (succ h)) id g
     where
      g : pos (succ h) ‚Ñ§* (x' ‚Ñ§* (pos (succ b'))) ‚â° pos (succ h) ‚Ñ§* (y' ‚Ñ§* (pos (succ a')))
      g = ‚Ñ§-mult-left-cancellable (pos (succ h) ‚Ñ§* ((x' ‚Ñ§* pos (succ b')))) (pos (succ h) ‚Ñ§* (y' ‚Ñ§* pos (succ a'))) (pos (succ h')) id k
       where
        k : pos (succ h') ‚Ñ§* (pos (succ h) ‚Ñ§* (x' ‚Ñ§* (pos (succ b')))) ‚â° pos (succ h') ‚Ñ§* (pos (succ h) ‚Ñ§* (y' ‚Ñ§* (pos (succ a'))))
        k = pos (succ h') ‚Ñ§* (pos (succ h) ‚Ñ§* (x' ‚Ñ§* pos (succ b')))       ‚â°‚ü® ap (pos (succ h') ‚Ñ§*_) (‚Ñ§*-assoc (pos (succ h)) x' (pos (succ b')) ‚Åª¬π) ‚ü©
            pos (succ h') ‚Ñ§* ((pos (succ h) ‚Ñ§* x') ‚Ñ§* pos (succ b'))       ‚â°‚ü® ap (Œª z ‚Üí pos (succ h') ‚Ñ§* (z ‚Ñ§* pos (succ b'))) (Œ±‚Çö‚ÇÅ ‚Åª¬π) ‚ü©
            pos (succ h') ‚Ñ§* (x ‚Ñ§* pos (succ b'))                          ‚â°‚ü® ‚Ñ§-mult-rearrangement''' (pos (succ h')) x (pos (succ b')) ‚ü©
            x ‚Ñ§* (pos (succ h') ‚Ñ§* pos (succ b'))                          ‚â°‚ü® ap (x ‚Ñ§*_) (Œ≤‚Çö‚ÇÇ' ‚Åª¬π) ‚ü©
            x ‚Ñ§* pos (succ b)                                              ‚â°‚ü® e ‚ü©
            y ‚Ñ§* pos (succ a)                                              ‚â°‚ü® ap‚ÇÇ (Œª z z' ‚Üí z ‚Ñ§* z') Œ≤‚Çö‚ÇÅ Œ±‚Çö‚ÇÇ' ‚ü©
            pos (succ h') ‚Ñ§* y' ‚Ñ§* (pos (succ h) ‚Ñ§* pos (succ a'))         ‚â°‚ü® ‚Ñ§*-assoc (pos (succ h')) y' (pos (succ h) ‚Ñ§* pos (succ a'))  ‚ü©
            pos (succ h') ‚Ñ§* (y' ‚Ñ§* (pos (succ h) ‚Ñ§* pos (succ a')))       ‚â°‚ü® ap (pos (succ h') ‚Ñ§*_) (‚Ñ§-mult-rearrangement''' y' (pos (succ h)) (pos (succ a'))) ‚ü©
            pos (succ h') ‚Ñ§* (pos (succ h) ‚Ñ§* (y' ‚Ñ§* pos (succ a')))       ‚àé

  II : to‚Ñö (x , a) ‚â° to‚Ñö (y , b) ‚Üí (x , a) ‚âà (y , b)
  II e = x ‚Ñ§* pos (succ b)                                              ‚â°‚ü® ap‚ÇÇ (Œª z z' ‚Üí z ‚Ñ§* z') Œ±‚Çö‚ÇÅ (ap pos Œ≤‚Çö‚ÇÇ) ‚ü©
         ((pos (succ h) ‚Ñ§* x') ‚Ñ§* pos (succ h' ‚Ñï* succ b'))             ‚â°‚ü® ap‚ÇÇ (Œª z z' ‚Üí ((pos (succ h) ‚Ñ§* z) ‚Ñ§* pos (succ h' ‚Ñï* succ z'))) (pr‚ÇÅ iii) ((pr‚ÇÇ iii) ‚Åª¬π) ‚ü©
         ((pos (succ h) ‚Ñ§* y') ‚Ñ§* pos (succ h' ‚Ñï* succ a'))             ‚â°‚ü® ap (((pos (succ h) ‚Ñ§* y')) ‚Ñ§*_) (pos-multiplication-equiv-to-‚Ñï (succ h') (succ a')) ‚Åª¬π ‚ü©
         ((pos (succ h) ‚Ñ§* y') ‚Ñ§* (pos (succ h') ‚Ñ§* pos (succ a')))     ‚â°‚ü® ‚Ñ§-mult-rearrangement'' (pos (succ h')) (pos (succ h)) y' (pos (succ a')) ‚ü©
         (((pos (succ h') ‚Ñ§* y')) ‚Ñ§* (pos (succ h) ‚Ñ§* pos (succ a')))   ‚â°‚ü® ap (((pos (succ h') ‚Ñ§* y')) ‚Ñ§*_) (pos-multiplication-equiv-to-‚Ñï (succ h) (succ a')) ‚ü© 
         ((pos (succ h') ‚Ñ§* y')) ‚Ñ§* pos (succ h ‚Ñï* succ a')             ‚â°‚ü® ap‚ÇÇ (Œª z z' ‚Üí z ‚Ñ§* z') (pr‚ÇÅ (pr‚ÇÇ (pr‚ÇÇ Œ≤)) ‚Åª¬π) (ap pos (pr‚ÇÇ (pr‚ÇÇ (pr‚ÇÇ Œ±)) ‚Åª¬π)) ‚ü©
         y ‚Ñ§* pos (succ a) ‚àé
    where
     i : Œ£ Œ¥ Íûâ (x' , a') ‚â° (y' , b') , transport is-in-lowest-terms Œ¥ (pr‚ÇÇ (to‚Ñö (x , a))) ‚â° pr‚ÇÇ (to‚Ñö (y , b))
     i = from-Œ£-‚â° e

     ii : x' , a' ‚â° y' , b'
     ii = pr‚ÇÅ i

     iii : (x' ‚â° y') √ó (a' ‚â° b')
     iii = from-√ó-‚â°' ii

equiv‚Üíequality : Fun-Ext ‚Üí (p q : ‚Ñö‚Çô) ‚Üí p ‚âà q ‚Üí to‚Ñö p ‚â° to‚Ñö q
equiv‚Üíequality fe p q = I
 where
  I : p ‚âà q ‚Üí to‚Ñö p ‚â° to‚Ñö q
  I = pr‚ÇÅ (equiv-equality fe p q)

equality‚Üíequiv : Fun-Ext ‚Üí (p q : ‚Ñö‚Çô) ‚Üí to‚Ñö p ‚â° to‚Ñö q ‚Üí p ‚âà q
equality‚Üíequiv fe p q = I
 where
  I : to‚Ñö p ‚â° to‚Ñö q ‚Üí p ‚âà q
  I = pr‚ÇÇ (equiv-equality fe p q)

‚âà-to‚Ñö : (p : ‚Ñö‚Çô) ‚Üí p ‚âà to‚Ñö‚Çô (to‚Ñö p)
‚âà-to‚Ñö (x , a) = conclusion
 where
  right-l : Œ£ ((x' , a') , p) Íûâ ‚Ñö , (Œ£ h Íûâ ‚Ñï , (x ‚â° (pos (succ h)) ‚Ñ§* x') √ó (succ a ‚â° (succ h) ‚Ñï* succ a'))
  right-l = to‚Ñölemma (x , a)

  right : ‚Ñö
  right = to‚Ñö (x , a)

  x' : ‚Ñ§
  x' = pr‚ÇÅ (pr‚ÇÅ right)
  a' : ‚Ñï
  a' = pr‚ÇÇ (pr‚ÇÅ right)

  h : ‚Ñï
  h = pr‚ÇÅ (pr‚ÇÇ right-l)

  a'' = pos (succ a')
  h' = pos (succ h)
    
  conclusion : x ‚Ñ§* a'' ‚â° x' ‚Ñ§* pos (succ a)
  conclusion = x ‚Ñ§* a''                    ‚â°‚ü® ap (_‚Ñ§* a'') (pr‚ÇÅ (pr‚ÇÇ (pr‚ÇÇ right-l))) ‚ü©
               h' ‚Ñ§* x' ‚Ñ§* a''   ‚â°‚ü® ap (_‚Ñ§* a'') (‚Ñ§*-comm h' x') ‚ü©
               x' ‚Ñ§* h' ‚Ñ§* a''   ‚â°‚ü® ‚Ñ§*-assoc x' (h') (a'')  ‚ü©
               x' ‚Ñ§* (h' ‚Ñ§* a'') ‚â°‚ü® ap (x' ‚Ñ§*_) (pos-multiplication-equiv-to-‚Ñï (succ h) (succ a')) ‚ü©
               x' ‚Ñ§* pos ((succ h) ‚Ñï* succ a')       ‚â°‚ü® ap (x' ‚Ñ§*_) (ap pos (pr‚ÇÇ (pr‚ÇÇ (pr‚ÇÇ right-l))) ‚Åª¬π ) ‚ü©
               x' ‚Ñ§* pos (succ a) ‚àé

q-has-qn : Fun-Ext ‚Üí (q : ‚Ñö) ‚Üí Œ£ q' Íûâ ‚Ñö‚Çô , q ‚â° to‚Ñö q'
q-has-qn fe (q , p) = q , (to-subtype-‚â° (is-in-lowest-terms-is-prop fe) (equiv-with-lowest-terms-is-equal q q' (‚âà-to‚Ñö q) p (pr‚ÇÇ right)))
 where
  right : ‚Ñö
  right = to‚Ñö q

  q' : ‚Ñö‚Çô
  q' = pr‚ÇÅ right

‚Ñö-zero-not-one : Fun-Ext ‚Üí ¬¨ (0‚Ñö ‚â° 1‚Ñö)
‚Ñö-zero-not-one fe e = positive-not-zero 0 (pos-lc V ‚Åª¬π)
 where
  I : ((pos 0 , 0) ‚âà (pos 1 , 0)) ‚áî to‚Ñö (pos 0 , 0) ‚â° to‚Ñö (pos 1 , 0) 
  I = equiv-equality fe ((pos 0) , 0) ((pos 1) , 0)

  II : to‚Ñö (pos 0 , 0) ‚â° to‚Ñö (pos 1 , 0) ‚Üí (pos 0 , 0) ‚âà (pos 1 , 0)
  II = pr‚ÇÇ I

  III : (pos 0 , 0) ‚âà (pos 1 , 0)
  III = II e

  IV : pos 0 ‚Ñ§* pos 1 ‚â° pos 1 ‚Ñ§* pos 1
  IV = III

  V : pos 0 ‚â° pos 1
  V = pos 0          ‚â°‚ü® refl ‚ü©
      pos 0 ‚Ñ§* pos 1 ‚â°‚ü® IV   ‚ü©
      pos 1 ‚Ñ§* pos 1 ‚â°‚ü® refl ‚ü©
      pos 1          ‚àé

numerator-zero-is-zero : Fun-Ext ‚Üí (((x , a) , p) : ‚Ñö) ‚Üí x ‚â° pos zero ‚Üí ((x , a) , p) ‚â° 0‚Ñö
numerator-zero-is-zero fe ((negsucc x    , a) , p) e = ùüò-elim (neg-not-positive e)
numerator-zero-is-zero fe ((pos zero , a) , icd , f) e = to-subtype-‚â° (is-in-lowest-terms-is-prop fe) I
 where
  I : pos zero , a ‚â° pos zero , 0
  I = ap‚ÇÇ _,_ refl (succ-lc II)
   where    
    II : succ a ‚â° 1
    II = ‚à£-anti (succ a) 1 (f (succ a) ((0 , refl) , 1 , refl)) (pr‚ÇÇ icd)
numerator-zero-is-zero fe ((pos (succ x) , a) , p) e = ùüò-elim (positive-not-zero x (pos-lc e))

to‚Ñö-to‚Ñö‚Çô : Fun-Ext ‚Üí ((r , p) : ‚Ñö) ‚Üí (r , p) ‚â° to‚Ñö r
to‚Ñö-to‚Ñö‚Çô fe (r , p) = II
 where
  rp' = to‚Ñö r
  r' = pr‚ÇÅ (to‚Ñö r)
  r'lt = pr‚ÇÇ (to‚Ñö r)
  I = equiv-with-lowest-terms-is-equal r r' (‚âà-to‚Ñö r) p r'lt
  II : r , p ‚â° pr‚ÇÅ (pr‚ÇÅ (to‚Ñölemma r)) , pr‚ÇÇ (pr‚ÇÅ (to‚Ñölemma r))
  II = to-subtype-‚â° (is-in-lowest-terms-is-prop fe) I




