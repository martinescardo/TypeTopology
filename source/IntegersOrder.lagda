Andrew Sneap - 26th November 2021

In this file, I define order of integers, and prove some common properties of order.

\begin{code}

{-# OPTIONS --without-K --exact-split --safe #-}

open import SpartanMLTT renaming (_+_ to _‚àî_) -- TypeTopology

open import NaturalsOrder 
open import OrderNotation --TypeTopology
open import UF-Base 
open import UF-Subsingletons

open import IntegersAbs
open import IntegersB
open import IntegersAddition
open import IntegersMultiplication
open import IntegersNegation
open import MoreNaturalProperties
open import NaturalsAddition renaming (_+_ to _‚Ñï+_)
open import NaturalsOrderExtended

open import NaturalsOrderExtended

module IntegersOrder where

\end{code}

First, the definition of < and ‚â§ for the integers. See the NaturalsOrder import to see how < is defined similarly to < for the natural numbers.  Following the definitions are the proofs that the relations are propositions, and some simple proofs for each.

\begin{code}

_‚â§‚Ñ§_ _‚â•‚Ñ§_ : (x y : ‚Ñ§) ‚Üí ùì§‚ÇÄ Ãá
x ‚â§‚Ñ§ y = Œ£ n Íûâ ‚Ñï , x + pos n ‚â° y
x ‚â•‚Ñ§ y = y ‚â§‚Ñ§ x

instance
 Order-‚Ñ§-‚Ñ§ : Order ‚Ñ§ ‚Ñ§
 _‚â§_ {{Order-‚Ñ§-‚Ñ§}} = _‚â§‚Ñ§_
 
_<‚Ñ§_ _>‚Ñ§_ : (x y : ‚Ñ§) ‚Üí ùì§‚ÇÄ Ãá
x <‚Ñ§ y = succ‚Ñ§ x ‚â§ y
x >‚Ñ§ y = y <‚Ñ§ x

instance
 Strict-Order-‚Ñ§-‚Ñ§ : Strict-Order ‚Ñ§ ‚Ñ§
 _<_ {{Strict-Order-‚Ñ§-‚Ñ§}} = _<‚Ñ§_

‚Ñ§‚â§-is-prop : (x y : ‚Ñ§) ‚Üí is-prop (x ‚â§ y)
‚Ñ§‚â§-is-prop x y (n , p) (m , q) = to-subtype-‚â° (Œª _ ‚Üí ‚Ñ§-is-set) (pos-lc (‚Ñ§+-lc (pos n) (pos m) x (p ‚àô (q ‚Åª¬π))))

‚Ñ§<-is-prop : (x y : ‚Ñ§) ‚Üí is-prop (x < y)
‚Ñ§<-is-prop x = ‚Ñ§‚â§-is-prop (succ‚Ñ§ x)

‚â§-incr‚Ñ§ : (x : ‚Ñ§) ‚Üí x ‚â§ succ‚Ñ§ x
‚â§-incr‚Ñ§ x = 1 , refl

<-incr‚Ñ§ : (x : ‚Ñ§) ‚Üí x < succ‚Ñ§ x
<-incr‚Ñ§ x = 0 , refl

‚â§-pred‚Ñ§ : (x : ‚Ñ§) ‚Üí pred‚Ñ§ x ‚â§ x
‚â§-pred‚Ñ§ x = 1 , succpred‚Ñ§ x

<-pred‚Ñ§ : (x : ‚Ñ§) ‚Üí pred‚Ñ§ x < x
<-pred‚Ñ§ x = 0 , succpred‚Ñ§ x

<-is-‚â§ : (x y : ‚Ñ§) ‚Üí x < y ‚Üí x ‚â§ y
<-is-‚â§ x y (a , p) = succ a , (‚Ñ§-left-succ x (pos a) ‚Åª¬π ‚àô p)

‚Ñ§-bigger-or-equal-not-less : (x y : ‚Ñ§) ‚Üí x ‚â§ y ‚Üí ¬¨ (y < x)
‚Ñ§-bigger-or-equal-not-less x y (Œ± , p) (Œ≤ , q) = ùüò-elim (pos-int-not-zero (Œ± ‚Ñï+ Œ≤) II)
 where
  I : x + succ‚Ñ§ (pos (Œ± ‚Ñï+ Œ≤)) ‚â° x + pos 0
  I = x + succ‚Ñ§ (pos (Œ± ‚Ñï+ Œ≤))    ‚â°‚ü® ap (Œª - ‚Üí x + succ‚Ñ§ -) (pos-addition-equiv-to-‚Ñï Œ± Œ≤ ‚Åª¬π) ‚ü©
      x + succ‚Ñ§ (pos Œ± + pos Œ≤)   ‚â°‚ü® ‚Ñ§-right-succ x (pos Œ± + pos Œ≤) ‚ü©
      succ‚Ñ§ (x + (pos Œ± + pos Œ≤)) ‚â°‚ü® ap succ‚Ñ§ (‚Ñ§+-assoc x (pos Œ±) (pos Œ≤) ‚Åª¬π) ‚ü©
      succ‚Ñ§ ((x + pos Œ±) + pos Œ≤) ‚â°‚ü® ‚Ñ§-left-succ (x + pos Œ±) (pos Œ≤) ‚Åª¬π ‚ü©
      succ‚Ñ§ (x + pos Œ±) + pos Œ≤   ‚â°‚ü® transport (Œª - ‚Üí succ‚Ñ§ - + (pos Œ≤) ‚â° x) (p ‚Åª¬π) q ‚ü©
      x                           ‚â°‚ü® by-definition ‚ü©
      x + pos 0 ‚àé
  II : succ‚Ñ§ (pos (Œ± ‚Ñï+ Œ≤)) ‚â° pos 0
  II = ‚Ñ§+-lc (succ‚Ñ§ (pos (Œ± ‚Ñï+ Œ≤))) (pos 0) x I

‚Ñ§‚â§-split : (x y : ‚Ñ§) ‚Üí x ‚â§ y ‚Üí (x < y) ‚àî (x ‚â° y)
‚Ñ§‚â§-split x y (zero , p) = inr p
‚Ñ§‚â§-split x y (succ a , p) = inl (a , (‚Ñ§-left-succ x (pos a)  ‚àô p))

‚Ñ§‚â§-trans : (x y z : ‚Ñ§) ‚Üí x ‚â§ y ‚Üí y ‚â§ z ‚Üí x ‚â§ z
‚Ñ§‚â§-trans x y z (a , p) (b , q) = a ‚Ñï+ b , I
 where
  I : x + pos (a ‚Ñï+ b) ‚â° z
  I = x + pos (a ‚Ñï+ b)        ‚â°‚ü® ap (x +_) (pos-addition-equiv-to-‚Ñï a b ‚Åª¬π) ‚ü©
      x + ((pos a) + (pos b)) ‚â°‚ü® ‚Ñ§+-assoc x (pos a) (pos b) ‚Åª¬π ‚ü©
      (x + pos a) + (pos b)   ‚â°‚ü® ap (_+ (pos b)) p ‚ü©
      y + (pos b)             ‚â°‚ü® q ‚ü©
      z ‚àé

‚Ñ§<-trans : (x y z : ‚Ñ§) ‚Üí x < y ‚Üí y < z ‚Üí x < z
‚Ñ§<-trans x y z l‚ÇÅ l‚ÇÇ = ‚Ñ§‚â§-trans (succ‚Ñ§ x) (succ‚Ñ§ y) z I l‚ÇÇ
 where
  I : succ‚Ñ§ x ‚â§ succ‚Ñ§ y
  I = ‚Ñ§‚â§-trans (succ‚Ñ§ x) y (succ‚Ñ§ y) l‚ÇÅ (‚â§-incr‚Ñ§ y)

‚Ñ§‚â§-refl : (x : ‚Ñ§) ‚Üí x ‚â§ x
‚Ñ§‚â§-refl x = 0 , refl

‚Ñ§-equal-not-less-than : (x : ‚Ñ§) ‚Üí ¬¨ (x < x)
‚Ñ§-equal-not-less-than x (0 , Œ±)      = succ‚Ñ§-no-fp x (Œ± ‚Åª¬π)
‚Ñ§-equal-not-less-than x (succ n , Œ±) = pos-int-not-zero (n ‚Ñï+ 1) (‚Ñ§+-lc (succ‚Ñ§ (succ‚Ñ§ (pos n))) (pos 0) x I)
 where
  I : x + succ‚Ñ§ (succ‚Ñ§ (pos n)) ‚â° x + pos 0
  I = x + succ‚Ñ§ (succ‚Ñ§ (pos n)) ‚â°‚ü® ‚Ñ§-right-succ x (succ‚Ñ§ (pos n)) ‚ü©
     succ‚Ñ§ (x + succ‚Ñ§ (pos n))  ‚â°‚ü® ‚Ñ§-left-succ x (succ‚Ñ§ (pos n)) ‚Åª¬π ‚ü©
     succ‚Ñ§ x + succ‚Ñ§ (pos n)    ‚â°‚ü® by-definition ‚ü©
     succ‚Ñ§ x + pos (succ n)     ‚â°‚ü® Œ± ‚ü©
     x ‚â°‚ü® ‚Ñ§-zero-right-neutral x ‚ü©
     x + pos 0 ‚àé

‚Ñ§-zero-less-than-pos : (n : ‚Ñï) ‚Üí pos 0 < pos (succ n)
‚Ñ§-zero-less-than-pos 0     = 0 , refl
‚Ñ§-zero-less-than-pos (succ n) = ‚Ñ§<-trans (pos 0) (pos (succ n)) (pos (succ (succ n))) IH (<-incr‚Ñ§ (pos (succ n)))
 where
  IH : pos 0 < pos (succ n)
  IH = ‚Ñ§-zero-less-than-pos n

negative-less-than-positive : (x y : ‚Ñï) ‚Üí negsucc x < pos y
negative-less-than-positive x y = (x ‚Ñï+ y) , I
 where
  I : succ‚Ñ§ (negsucc x) + pos (x ‚Ñï+ y) ‚â° pos y
  I = succ‚Ñ§ (negsucc x) + pos (x ‚Ñï+ y)    ‚â°‚ü® ap (succ‚Ñ§ (negsucc x) +_) (pos-addition-equiv-to-‚Ñï x y ‚Åª¬π) ‚ü©
      succ‚Ñ§ (negsucc x) + (pos x + pos y)     ‚â°‚ü® ‚Ñ§+-assoc (succ‚Ñ§ (negsucc x)) (pos x) (pos y) ‚Åª¬π ‚ü©
      succ‚Ñ§ (negsucc x) + pos x + pos y       ‚â°‚ü® ap (_+ pos y) (‚Ñ§-left-succ (negsucc x) (pos x)) ‚ü©
      negsucc x + pos (succ x) + pos y        ‚â°‚ü® refl ‚ü©
      (- pos (succ x)) + pos (succ x) + pos y ‚â°‚ü® ap (_+ pos y) (‚Ñ§-sum-of-inverse-is-zero' (pos (succ x))) ‚ü©
      pos 0 + pos y                           ‚â°‚ü® ‚Ñ§-zero-left-neutral (pos y) ‚ü©
      pos y                                   ‚àé  

‚Ñï-order-respects-‚Ñ§-order : (m n : ‚Ñï) ‚Üí m < n ‚Üí pos m < pos n
‚Ñï-order-respects-‚Ñ§-order m n l = I (subtraction'' m n l)
 where
  I : (Œ£ k Íûâ ‚Ñï , succ k ‚Ñï+ m ‚â° n) ‚Üí pos m < pos n
  I (k , e) = k , II
   where
    II : succ‚Ñ§ (pos m) + pos k ‚â° pos n
    II = succ‚Ñ§ (pos m) + pos k ‚â°‚ü® pos-addition-equiv-to-‚Ñï (succ m) k ‚ü©
         pos (succ m ‚Ñï+ k)     ‚â°‚ü® ap pos (addition-commutativity (succ m) k) ‚ü©
         pos (k ‚Ñï+ succ m)     ‚â°‚ü® ap pos (succ-left k m ‚Åª¬π) ‚ü©
         pos (succ k ‚Ñï+ m)     ‚â°‚ü® ap pos e ‚ü©
         pos n                 ‚àé

‚Ñï-order-respects-‚Ñ§-order' : (m n : ‚Ñï) ‚Üí m < n ‚Üí negsucc n < negsucc m
‚Ñï-order-respects-‚Ñ§-order' m n l = I (subtraction'' m n l)
 where
  I : (Œ£ k Íûâ ‚Ñï , succ k ‚Ñï+ m ‚â° n) ‚Üí negsucc n < negsucc m
  I (k , e) = k , conclusion
   where
    II : pos (succ k ‚Ñï+ succ m) ‚â° pos (succ n)
    II = ap (Œª p ‚Üí pos (succ p)) e
    III : pos (succ k) + pos (succ m) ‚â° pos (succ n)
    III = pos-addition-equiv-to-‚Ñï (succ k) (succ m) ‚àô II
    IV : pos (succ k) + pos (succ m) + (negsucc n + negsucc m) ‚â° pos (succ n) + (negsucc n + negsucc m)
    IV = ap (Œª p ‚Üí p + (negsucc n + negsucc m)) III
    conclusion : succ‚Ñ§ (negsucc n) + pos k ‚â° negsucc m
    conclusion = succ‚Ñ§ (negsucc n) + pos k                             ‚â°‚ü® ‚Ñ§-left-succ (negsucc n) (pos k) ‚ü©
                 negsucc n + pos (succ k)                              ‚â°‚ü® ‚Ñ§+-comm (negsucc n) (pos (succ k)) ‚ü©
                 pos (succ k) + negsucc n                              ‚â°‚ü® ‚Ñ§-zero-right-neutral (pos (succ k) + negsucc n) ‚ü©
                 pos (succ k) + negsucc n + pos 0                      ‚â°‚ü® ap ((pos (succ k) + negsucc n) +_) (‚Ñ§-sum-of-inverse-is-zero (pos (succ m)) ‚Åª¬π) ‚ü©
                 pos (succ k) + negsucc n + (pos (succ m) + negsucc m) ‚â°‚ü® ‚Ñ§+-assoc (pos (succ k) + negsucc n) (pos (succ m)) (negsucc m) ‚Åª¬π ‚ü©
                 pos (succ k) + negsucc n + pos (succ m) + negsucc m   ‚â°‚ü® ap (_+ negsucc m) (‚Ñ§+-assoc (pos (succ k)) (negsucc n) (pos (succ m))) ‚ü©
                 pos (succ k) + (negsucc n + pos (succ m)) + negsucc m ‚â°‚ü® ap (Œª p ‚Üí pos (succ k) + p + negsucc m) (‚Ñ§+-comm (negsucc n) (pos (succ m))) ‚ü©
                 pos (succ k) + (pos (succ m) + negsucc n) + negsucc m ‚â°‚ü® ap (_+ negsucc m) (‚Ñ§+-assoc (pos (succ k)) (pos (succ m)) (negsucc n) ‚Åª¬π) ‚ü©
                 pos (succ k) + pos (succ m) + negsucc n + negsucc m   ‚â°‚ü® ‚Ñ§+-assoc (pos (succ k) + pos (succ m)) (negsucc n) (negsucc m) ‚ü©
                 pos (succ k) + pos (succ m) + (negsucc n + negsucc m) ‚â°‚ü® IV ‚ü©
                 pos (succ n) + (negsucc n + negsucc m)                ‚â°‚ü® ‚Ñ§+-assoc (pos (succ n)) (negsucc n) (negsucc m) ‚Åª¬π ‚ü©
                 pos (succ n) + negsucc n + negsucc m                  ‚â°‚ü® ap (_+ negsucc m) (‚Ñ§-sum-of-inverse-is-zero (pos (succ n))) ‚ü©
                 pos 0 + negsucc m                                     ‚â°‚ü® ‚Ñ§-zero-left-neutral (negsucc m) ‚ü©
                 negsucc m ‚àé

‚Ñ§‚â§-swap : (x y : ‚Ñ§) ‚Üí x ‚â§ y ‚Üí - y ‚â§ - x
‚Ñ§‚â§-swap x y (k , e) = k , ‚Ñ§+-lc ((- y) + pos k) (- x) (y + x) I
 where 
  I : y + x + ((- y) + pos k) ‚â° y + x + (- x)
  I = y + x + ((- y) + pos k)         ‚â°‚ü® ap (_+ ((- y) + pos k)) (‚Ñ§+-comm y x) ‚ü©
      x + y + ((- y) + pos k)         ‚â°‚ü® ‚Ñ§+-assoc (x + y) (- y) (pos k) ‚Åª¬π ‚ü©
      x + y + (- y) + pos k           ‚â°‚ü® ap (_+ pos k) (‚Ñ§+-assoc x y (- y)) ‚ü©
      x + (y + (- y)) + pos k         ‚â°‚ü® ap (Œª Œ± ‚Üí x + Œ± + (pos k)) (‚Ñ§-sum-of-inverse-is-zero y) ‚ü©
      x + pos 0 + pos k               ‚â°‚ü® by-definition ‚ü©
      x + pos k                       ‚â°‚ü® e ‚ü©
      y                               ‚â°‚ü® by-definition ‚ü©
      y + pos 0                       ‚â°‚ü® ap (y +_) (‚Ñ§-sum-of-inverse-is-zero x ‚Åª¬π) ‚ü©
      y + (x + (- x))                 ‚â°‚ü® ‚Ñ§+-assoc y x (- x ) ‚Åª¬π ‚ü©
      y + x + (- x) ‚àé

‚Ñï‚â§-to-‚Ñ§‚â§ : (x y : ‚Ñï) ‚Üí x ‚â§ y ‚Üí pos x ‚â§ pos y
‚Ñï‚â§-to-‚Ñ§‚â§ x y l = I (subtraction x y l) 
 where
  I : (Œ£ k Íûâ ‚Ñï , k ‚Ñï+ x ‚â° y) ‚Üí pos x ‚â§ pos y
  I (k , e) = k , II
   where
    II : pos x + pos k ‚â° pos y
    II = pos x + pos k ‚â°‚ü® pos-addition-equiv-to-‚Ñï x k ‚ü©
         pos (x ‚Ñï+ k)  ‚â°‚ü® ap pos (addition-commutativity x k) ‚ü©
         pos (k ‚Ñï+ x)          ‚â°‚ü® ap pos e ‚ü©
         pos y         ‚àé
         
‚Ñ§-dichotomous : (x y : ‚Ñ§) ‚Üí x ‚â§ y ‚àî y ‚â§ x
‚Ñ§-dichotomous (pos x) (pos y) = I (‚â§-dichotomous x y)
 where
  I : (x ‚â§ y) ‚àî (y ‚â§ x) ‚Üí (pos x ‚â§ pos y) ‚àî (pos y ‚â§ pos x)
  I (inl l) = inl (‚Ñï‚â§-to-‚Ñ§‚â§ x y l)
  I (inr r) = inr (‚Ñï‚â§-to-‚Ñ§‚â§ y x r)
‚Ñ§-dichotomous (pos x) (negsucc y) = inr (negative-less-than-positive (succ y) x)
‚Ñ§-dichotomous (negsucc x) (pos y) = inl (negative-less-than-positive (succ x) y)
‚Ñ§-dichotomous (negsucc x) (negsucc y) = I (‚â§-dichotomous x y)
 where
  I : (x ‚â§ y) ‚àî (y ‚â§ x) ‚Üí (negsucc x ‚â§ negsucc y) ‚àî (negsucc y ‚â§ negsucc x)
  I (inl l) = inr (‚Ñ§‚â§-swap (pos (succ x)) (pos (succ y)) (‚Ñï‚â§-to-‚Ñ§‚â§ (succ x) (succ y) l))
  I (inr r) = inl (‚Ñ§‚â§-swap (pos (succ y)) (pos (succ x)) (‚Ñï‚â§-to-‚Ñ§‚â§ (succ y) (succ x) r))

‚Ñ§-trichotomous : (x y : ‚Ñ§) ‚Üí (x < y) ‚àî (x ‚â° y) ‚àî (y < x)
‚Ñ§-trichotomous x y = I (‚Ñ§-dichotomous x y) 
 where
  I : (x ‚â§ y) ‚àî (y ‚â§ x) ‚Üí (x < y) ‚àî (x ‚â° y) ‚àî (y < x)
  I (inl l) = II (‚Ñ§‚â§-split x y l)
   where
    II : (x < y) ‚àî (x ‚â° y) ‚Üí (x < y) ‚àî (x ‚â° y) ‚àî (y < x)
    II (inl l) = inl l
    II (inr r) = inr (inl r)
  I (inr r) = II (‚Ñ§‚â§-split y x r)
   where
    II : (y < x) ‚àî (y ‚â° x) ‚Üí (x < y) ‚àî (x ‚â° y) ‚àî (y < x) 
    II (inl l) = inr (inr l)
    II (inr r) = inr (inl (r ‚Åª¬π))
{-
‚Ñ§-trichotomous : (x y : ‚Ñ§) ‚Üí (x < y) ‚àî (x ‚â° y) ‚àî (y < x)
‚Ñ§-trichotomous (pos x) (pos y) = I (nat-order-trichotomous x y)
 where
  I : (x < y) ‚àî (x ‚â° y) ‚àî (y < x) ‚Üí (pos x < pos y) ‚àî (pos x ‚â° pos y) ‚àî (pos y < pos x)
  I (inl l) = inl (‚Ñï-order-respects-‚Ñ§-order x y l)
  I (inr (inl e)) = inr (inl (ap pos e))
  I (inr (inr l)) = inr (inr (‚Ñï-order-respects-‚Ñ§-order y x l))
‚Ñ§-trichotomous (pos x) (negsucc y) = inr (inr (negative-less-than-positive y x))
‚Ñ§-trichotomous (negsucc x) (pos y) = inl (negative-less-than-positive x y)
‚Ñ§-trichotomous (negsucc x) (negsucc y) = I (nat-order-trichotomous x y)
 where
  I : (x < y) ‚àî (x ‚â° y) ‚àî (y < x)
    ‚Üí (negsucc x < negsucc y) ‚àî (negsucc x ‚â° negsucc y) ‚àî (negsucc y < negsucc x)
  I (inl l) = inr (inr (‚Ñï-order-respects-‚Ñ§-order' x y l))
  I (inr (inl e)) = inr (inl (ap negsucc e))
  I (inr (inr l)) = inl (‚Ñï-order-respects-‚Ñ§-order' y x l)
-}
‚Ñ§‚â§-adding : (a b c d : ‚Ñ§) ‚Üí a ‚â§ b ‚Üí c ‚â§ d ‚Üí (a + c) ‚â§ (b + d)
‚Ñ§‚â§-adding a b c d (p , Œ≤) (q , Œ≤') = (p ‚Ñï+ q) , I
 where
  I : a + c + pos (p ‚Ñï+ q) ‚â° b + d
  I = a + c + pos (p ‚Ñï+ q) ‚â°‚ü® ap ((a + c) +_) (pos-addition-equiv-to-‚Ñï p q ‚Åª¬π) ‚ü©
      (a + c) + (pos p + pos q)      ‚â°‚ü® ‚Ñ§+-assoc (a + c) (pos p) (pos q) ‚Åª¬π              ‚ü©
      ((a + c) + pos p) + pos q      ‚â°‚ü® ap (Œª z ‚Üí (z + pos p) + pos q) (‚Ñ§+-comm a c) ‚ü©
      ((c + a) + pos p) + pos q      ‚â°‚ü® ap (_+ pos q) (‚Ñ§+-assoc c a (pos p))           ‚ü©
      (c + (a + pos p)) + pos q      ‚â°‚ü® ap (Œª z ‚Üí (c + z) + pos q) Œ≤             ‚ü©
      (c + b) + pos q                ‚â°‚ü® ap (_+ pos q) (‚Ñ§+-comm c b)              ‚ü©
      (b + c) + pos q                ‚â°‚ü® ‚Ñ§+-assoc b c (pos q)                       ‚ü©
      b + (c + pos q)                ‚â°‚ü® ap (b +_) Œ≤'                         ‚ü©
      b + d                          ‚àé

‚Ñ§<-adding : (a b c d : ‚Ñ§) ‚Üí a < b ‚Üí c < d ‚Üí (a + c) < (b + d)
‚Ñ§<-adding a b c d (p , Œ≤) (q , Œ≤') = ‚Ñ§<-trans (a + c) (a + succ‚Ñ§ c) (b + d) II III
 where
  I : (succ‚Ñ§ a + succ‚Ñ§ c) ‚â§ (b + d)
  I = ‚Ñ§‚â§-adding (succ‚Ñ§ a) b (succ‚Ñ§ c) d (p , Œ≤) (q , Œ≤')
  II : (a + c) < (a + succ‚Ñ§ c)
  II = 0 , (‚Ñ§-right-succ a c ‚Åª¬π)
  III : (a + succ‚Ñ§ c) < (b + d)
  III = transport (_‚â§ (b + d)) (‚Ñ§-left-succ a (succ‚Ñ§ c)) I

‚Ñ§‚â§-adding' :  (a b c : ‚Ñ§) ‚Üí a ‚â§ b ‚Üí a + c ‚â§ b + c
‚Ñ§‚â§-adding' a b c (k , p) = k , I
 where
  I : a + c + pos k ‚â° b + c
  I = a + c + pos k   ‚â°‚ü® ‚Ñ§+-assoc a c (pos k) ‚ü©
      a + (c + pos k) ‚â°‚ü® ap (a +_) (‚Ñ§+-comm c (pos k)) ‚ü©
      a + (pos k + c) ‚â°‚ü® ‚Ñ§+-assoc a (pos k) c ‚Åª¬π ‚ü©
      a + pos k + c   ‚â°‚ü® ap (_+ c) p ‚ü©
      b + c ‚àé

‚Ñ§<-adding' : (a b c : ‚Ñ§) ‚Üí a < b ‚Üí a + c < b + c
‚Ñ§<-adding' a b c (k , p) = I (‚Ñ§‚â§-adding' (succ‚Ñ§ a) b c (k , p))
 where
  I : (succ‚Ñ§ a + c) ‚â§ (b + c) ‚Üí (a + c) < (b + c)
  I (h , q) = h , II
   where
    II : succ‚Ñ§ (a + c) + pos h ‚â° b + c
    II = succ‚Ñ§ (a + c) + pos h ‚â°‚ü® ap (_+ (pos h)) (‚Ñ§-left-succ a c ‚Åª¬π) ‚ü©
         succ‚Ñ§ a + c + pos h   ‚â°‚ü® q ‚ü©
         b + c ‚àé

‚Ñ§<-adding'' : (a b c : ‚Ñ§) ‚Üí a < b ‚Üí c + a < c + b
‚Ñ§<-adding'' a b c l = transport‚ÇÇ _<_ (‚Ñ§+-comm a c) (‚Ñ§+-comm b c) I
 where
  I : (a + c) < (b + c)
  I = ‚Ñ§<-adding' a b c l

pmpo-lemma : (a b : ‚Ñ§) ‚Üí (n : ‚Ñï) ‚Üí a < b ‚Üí  a * pos (succ n) < b * pos (succ n)
pmpo-lemma a b = induction base step
 where
  base : a < b
       ‚Üí a * pos 1 < b * pos 1
  base z = z

  step : (k : ‚Ñï)
       ‚Üí (a < b ‚Üí a * pos (succ k) < b * pos (succ k))
       ‚Üí a < b
       ‚Üí a * pos (succ (succ k)) < b * pos (succ (succ k))
  step k IH l = ‚Ñ§<-adding a b (a + (a * pos k)) (b + (b * pos k)) l (IH l)

positive-multiplication-preserves-order : (a b c : ‚Ñ§) ‚Üí greater-than-zero c ‚Üí a < b ‚Üí (a * c) < (b * c)
positive-multiplication-preserves-order a b (negsucc x)    p l = ùüò-elim p
positive-multiplication-preserves-order a b (pos 0)        p l = ùüò-elim p
positive-multiplication-preserves-order a b (pos (succ x)) p l = pmpo-lemma a b x l

nmco-lemma : (a b : ‚Ñ§) ‚Üí (c : ‚Ñï) ‚Üí a < b ‚Üí (b * (negsucc c)) < (a * (negsucc c))
nmco-lemma a b = induction base step
 where
  base : a < b ‚Üí (b * negsucc 0) < (a * negsucc 0)
  base (Œ± , Œ≥) = Œ± , I
   where
    III : (- b) + pos Œ± + (a + (- a)) ‚â° a + pos Œ± + ((- b) + (- a))
    III = (- b) + pos Œ± + (a + (- a))   ‚â°‚ü® ap (_+ (a + (- a))) (‚Ñ§+-comm (- b) (pos Œ±)) ‚ü©
          pos Œ± + (- b) + (a + (- a))   ‚â°‚ü® ‚Ñ§+-assoc (pos Œ± + (- b)) a (- a) ‚Åª¬π ‚ü© 
          pos Œ± + (- b) + a + (- a)     ‚â°‚ü® ap (_+ (- a)) (‚Ñ§+-comm (pos Œ± + (- b)) a) ‚ü©
          a + (pos Œ± + (- b)) + (- a)   ‚â°‚ü® ap (_+ (- a)) (‚Ñ§+-assoc a (pos Œ±) (- b) ‚Åª¬π) ‚ü©
          a + pos Œ± + (- b) + (- a)     ‚â°‚ü® ‚Ñ§+-assoc (a + pos Œ±) (- b) (- a) ‚ü©
          a + pos Œ± + ((- b) + (- a))   ‚àé
    II : succ‚Ñ§ a + pos Œ± + ((- b) + (- a)) ‚â° b + ((- b) + (- a))
    II = ap (_+ ((- b) + (- a))) Œ≥
    I : succ‚Ñ§ (b * negsucc 0) + pos Œ± ‚â° a * negsucc 0
    I = succ‚Ñ§ (b * negsucc 0) + pos Œ±         ‚â°‚ü® by-definition ‚ü©
        succ‚Ñ§ (- b) + pos Œ±                   ‚â°‚ü® ‚Ñ§-left-succ (- b) (pos Œ±) ‚ü©
        succ‚Ñ§ ((- b) + pos Œ±)                 ‚â°‚ü® ‚Ñ§-zero-right-neutral (succ‚Ñ§ ((- b) +pos Œ±)) ‚ü©
        succ‚Ñ§ ((- b) + pos Œ±) + pos 0         ‚â°‚ü® ap (succ‚Ñ§ ((- b) + pos Œ±) +_) (‚Ñ§-sum-of-inverse-is-zero a ‚Åª¬π) ‚ü©
        succ‚Ñ§ ((- b) + pos Œ±) + ((a + (- a))) ‚â°‚ü® ‚Ñ§-left-succ ((- b) + pos Œ±) (a + (- a)) ‚ü©
        succ‚Ñ§ (((- b) + pos Œ±) + (a + (- a))) ‚â°‚ü® ap succ‚Ñ§ III ‚ü©
        succ‚Ñ§ (a + pos Œ± + ((- b) + (- a)))   ‚â°‚ü® ‚Ñ§-left-succ (a + pos Œ±) ((- b) + (- a)) ‚Åª¬π ‚ü©
        succ‚Ñ§ (a + pos Œ±) + ((- b) + (- a))   ‚â°‚ü® ap (_+ ((- b) + (- a))) (‚Ñ§-left-succ a (pos Œ±) ‚Åª¬π) ‚ü©
        succ‚Ñ§ a + pos Œ± + ((- b) + (- a))     ‚â°‚ü® II ‚ü©
        b + ((- b) + (- a))                   ‚â°‚ü® ‚Ñ§+-assoc b (- b) (- a) ‚Åª¬π ‚ü©
        b + (- b) + (- a)                     ‚â°‚ü® ap (_+ (- a)) (‚Ñ§-sum-of-inverse-is-zero b) ‚ü©
        pos 0 + (- a)                         ‚â°‚ü® ‚Ñ§-zero-left-neutral (- a) ‚ü©
        - a                                   ‚â°‚ü® by-definition ‚ü©
        a * negsucc 0 ‚àé

  step : (k : ‚Ñï)
       ‚Üí (a < b ‚Üí (b * negsucc k) < (a * negsucc k))
       ‚Üí  a < b ‚Üí (b * negsucc (succ k)) < (a * negsucc (succ k))
  step k IH l = ‚Ñ§<-adding (- b) (- a) (b * negsucc k) (a * negsucc k) (base l) (IH l)

negative-multiplication-changes-order : (a b c : ‚Ñ§) ‚Üí negative c ‚Üí a < b ‚Üí (b * c) < (a * c)
negative-multiplication-changes-order a b (pos c)     g l = ùüò-elim g
negative-multiplication-changes-order a b (negsucc c) g l = nmco-lemma a b c l

‚Ñ§-mult-right-cancellable : (x y z : ‚Ñ§) ‚Üí not-zero z ‚Üí (x * z) ‚â° (y * z) ‚Üí x ‚â° y
‚Ñ§-mult-right-cancellable x y (pos 0)        nz e = ùüò-elim (nz ‚ãÜ)
‚Ñ§-mult-right-cancellable x y (pos (succ z)) nz e = tri-split (‚Ñ§-trichotomous x y)
 where
  tri-split : (x < y) ‚àî (x ‚â° y) ‚àî (y < x) ‚Üí x ‚â° y
  tri-split (inl l) = ùüò-elim (‚Ñ§-equal-not-less-than (x * pos (succ z)) (transport (x * pos (succ z) <_) (e ‚Åª¬π) I))
   where
    I : (x * pos (succ z)) < (y * pos (succ z))
    I = positive-multiplication-preserves-order x y (pos (succ z)) ‚ãÜ l
  tri-split (inr (inl m)) = m
  tri-split (inr (inr r)) = ùüò-elim (‚Ñ§-equal-not-less-than (y * pos (succ z)) (transport (y * pos (succ z) <_) e I))
   where
    I : (y * pos (succ z)) < (x * pos (succ z))
    I = positive-multiplication-preserves-order y x (pos (succ z)) ‚ãÜ r
‚Ñ§-mult-right-cancellable x y (negsucc z)    nz e = tri-split (‚Ñ§-trichotomous x y)
 where
  tri-split : (x < y) ‚àî (x ‚â° y) ‚àî (y < x) ‚Üí x ‚â° y
  tri-split (inl l) = ùüò-elim (‚Ñ§-equal-not-less-than (y * negsucc z) (transport (y * negsucc z <_) e I))
   where
    I : (y * negsucc z) < (x * negsucc z) 
    I = nmco-lemma x y z l
  tri-split (inr (inl r)) = r
  tri-split (inr (inr r)) = ùüò-elim (‚Ñ§-equal-not-less-than (x * negsucc z) (transport (x * negsucc z <_) (e ‚Åª¬π) I))
   where
    I : (x * negsucc z) < (y * negsucc z)
    I = nmco-lemma y x z r

‚Ñ§-mult-left-cancellable : (x y z : ‚Ñ§) ‚Üí not-zero z ‚Üí (z * x) ‚â° (z * y) ‚Üí x ‚â° y
‚Ñ§-mult-left-cancellable x y z nz e = ‚Ñ§-mult-right-cancellable x y z nz I
 where
  I : x * z ‚â° y * z
  I = x * z   ‚â°‚ü® ‚Ñ§*-comm x z ‚ü©
      z * x   ‚â°‚ü® e ‚ü©
      z * y   ‚â°‚ü® ‚Ñ§*-comm z y ‚ü©
      y * z   ‚àé

orcl : (a b : ‚Ñ§) ‚Üí (n : ‚Ñï) ‚Üí (a * (pos (succ n))) ‚â§ (b * (pos (succ n))) ‚Üí a ‚â§ b
orcl a b = induction base step
 where
  base : (a * pos 1) ‚â§ (b * pos 1) ‚Üí a ‚â§ b
  base = Œª z ‚Üí z

  step : (k : ‚Ñï)
       ‚Üí ((a * pos (succ k)) ‚â§ (b * pos (succ k)) ‚Üí a ‚â§ b)
       ‚Üí (a * pos (succ (succ k))) ‚â§ (b * pos (succ (succ k)))
       ‚Üí a ‚â§ b
  step k IH (Œ± , Œ≥) = I (‚Ñ§-trichotomous a b)
   where
    I : (a < b) ‚àî (a ‚â° b) ‚àî (b < a) ‚Üí a ‚â§ b
    I (inl l) = <-is-‚â§ a b l
    I (inr (inl e)) = 0 , e
    I (inr (inr (Œ≤ , Œ¥))) = ùüò-elim (‚Ñ§-bigger-or-equal-not-less (a * pos (succ (succ k))) (b * pos (succ (succ k))) II III)
     where
      II : (a * pos (succ (succ k))) ‚â§ (b * pos (succ (succ k)))
      II = Œ± , Œ≥

      III : (b * pos (succ (succ k))) < (a * pos (succ (succ k)))
      III = positive-multiplication-preserves-order b a (pos (succ (succ k))) ‚ãÜ (Œ≤ , Œ¥)

orcl' : (a b : ‚Ñ§) ‚Üí (n : ‚Ñï) ‚Üí (a * (pos (succ n))) < (b * (pos (succ n))) ‚Üí a < b
orcl' a b n l = II (‚Ñ§‚â§-split a b I)
 where
  I : a ‚â§ b
  I = orcl a b n (<-is-‚â§ (a * pos (succ n)) (b * pos (succ n)) l)
  II : (a < b) ‚àî (a ‚â° b) ‚Üí a < b
  II (inl l) = l
  II (inr e) = ùüò-elim (‚Ñ§-equal-not-less-than (a * pos (succ n)) III)
   where
    III : (a * pos (succ n)) < (a * pos (succ n))
    III = transport (Œª - ‚Üí (a * pos (succ n)) < (- * pos (succ n))) (e ‚Åª¬π) l

ordering-right-cancellable : (a b c : ‚Ñ§) ‚Üí greater-than-zero c ‚Üí (a * c) < (b * c) ‚Üí a < b
ordering-right-cancellable a b (negsucc x) p l    = ùüò-elim p
ordering-right-cancellable a b (pos 0) p l        = ùüò-elim p
ordering-right-cancellable a b (pos (succ x)) p l = orcl' a b x l

‚Ñ§‚â§-ordering-right-cancellable : (a b c : ‚Ñ§) ‚Üí greater-than-zero c ‚Üí (a * c) ‚â§ (b * c) ‚Üí a ‚â§ b
‚Ñ§‚â§-ordering-right-cancellable a b (pos zero) p l = ùüò-elim p
‚Ñ§‚â§-ordering-right-cancellable a b (pos (succ x)) p l = orcl a b x l
‚Ñ§‚â§-ordering-right-cancellable a b (negsucc x) p l = ùüò-elim p
      
 
\end{code}
